foreach (pass in drawingPasses)
    pass.begin(drawingContext)
        foreach (renderStates in orderedRenderStates)
            foreach (batch in orderedBatchTypes)
                foreach (drawable in drawablesWithTheSpecifiedRenderState)
                    drawable.material.beginApply(previousMaterial)
                    drawable.draw()
                    drawable.material.endApply()
    pass.end()
                
                



scene
sceneManager       objectModels         materials       drawingPass

// Each drawing pass draws a group of objects onto a render target or the backbuffer
// A drawing pass may have different render states.

// In general:
//
// - Drawing context provides global drawing parameters for a view frustum
// - Drawing pass manages render states
// - Drawing batch manages geometry batching and state batching
// - Material manages per instance data
// - Drawable draws the geometry (Drawables are rendered using drawing batches)


// DrawingBatches:
//
// - ModelBatch
// - PrimitiveBatch
// - ParticleBatch

// DrawingPasses:
//
// - BasicDrawingPass: draw each object based on material render states and batch type

BasicDrawingPass.draw(drawable) 
{
}

BasicDrawingPass.end()
{
    foreach blendGroup in (opaque, transparent)
        if blendGroup == drawable.material.blendGroup (opaque, transparent) // or use the phrase isTransparent
            foreach batch in batches
                batch.begin()
                if batch == drawable.batch
                    batch.draw(drawable)
                batch.end()
}

[ExecuteBefore(typeof(BasicDrawingPass))]
ShadowMapDrawingPass


// Extension Point
//
// The following uses dependency sorting
scene.drawingPasses.add(new GlowDrawingPass())

// The following do not check for dependency but checks for null
scene.drawingPasses[2] = new GlowDrawingPass();

scene.drawingBatches : readonly

[DependentPass(typeof(GlowMaterialDrawingPass))]
public class GlowMaterial

[ExecuteBefore(typeof(DeferredLightingPass))]
[ExecuteAfter(typeof(BasicDrawingPass))]
public class GlowMaterialDrawingPass
{
}


// Use Transformable as a common base class for all drawables to speed things up
[BatchType(typeof(ModelBatch))]
public class Model : Transformable
{
}

drawingContext.viewFrustum
drawingContext.viewport

// Trigger nested drawing, can be used for split screen games or reflection
// No needs to preserve back buffer, but make sure this method is called only
// at drawingPass.begin(drawingContext)
drawingContext.draw(view, projection, viewport) 
  
drawingPass.begin(drawingContext)
drawingPass.draw(drawable)
drawingPass.end();


// Material do not manage depth stencil state. Just blend state and rasterize state.
material.notifyMaterialChanged


// Batch order is fixed, but can be extended
// Pass order is fixed, but can be extended


scene.draw(view, projection)
{
    context.draw(view, projection);
}

context.draw(view, projection)
{
    spatialQuery.findAll(viewFrustum);
    foreach (pass in drawingPasses)
        pass.begin(this)
        foreach (drawable in visibleDrawablesInViewFrustum)
            pass.draw(drawable)
        pass.end()
}

<Model.Material>
    <MaterialGroup>
        <DiffuseMaterial />
        <TextureMaterial />
        <NormalMappingMaterial />
        <LightMaterial />
        <ShadowMaterial />
        <BorderMaterial />
        <GlowMaterial />
    </MaterialGroup>
</Model.Material>



// Global environment states
v<Vector3> ambientLightColor
v<IDirectionalLight> directionalLight

view
projection

