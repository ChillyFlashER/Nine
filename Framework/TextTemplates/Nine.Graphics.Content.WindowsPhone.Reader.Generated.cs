// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------

#if !TEXT_TEMPLATE
namespace Nine.Animations
{
    /// <summary>
    /// Content reader for <c>BoneAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoneAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BoneAnimation>
    {
        protected override Nine.Animations.BoneAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BoneAnimation existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            {
                var count = input.ReadUInt16();
                for (var i = 0; i < count; ++i)
                    existingInstance.Controllers.Add(input.ReadObject<Nine.Animations.IBoneAnimationController>());
            }
            existingInstance.BlendEnabled = input.ReadBoolean();
            existingInstance.BlendDuration = input.ReadObject<System.TimeSpan>();
            existingInstance.KeyController = input.ReadObject<Nine.Animations.ITimelineAnimation>();
            existingInstance.IsSychronized = input.ReadBoolean();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BoneAnimationClip</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoneAnimationClipReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BoneAnimationClip>
    {
        protected override Nine.Animations.BoneAnimationClip Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BoneAnimationClip existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new BoneAnimationClip();
            existingInstance.FramesPerSecond = input.ReadInt32();
            existingInstance.TotalFrames = input.ReadInt32();
            existingInstance.PreferredEnding = (Nine.Animations.KeyframeEnding)input.ReadUInt16();
            existingInstance.Transforms = input.ReadObject<Microsoft.Xna.Framework.Matrix[][]>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BoneAnimationController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoneAnimationControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BoneAnimationController>
    {
        protected override Nine.Animations.BoneAnimationController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BoneAnimationController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            existingInstance.InterpolationEnabled = input.ReadBoolean();
            existingInstance.BeginFrame = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.EndFrame = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.FramesPerSecond = input.ReadSingle();
            existingInstance.Ending = (Nine.Animations.KeyframeEnding)input.ReadUInt16();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = (Nine.Animations.AnimationDirection)input.ReadUInt16();
            existingInstance.Direction = (Nine.Animations.AnimationDirection)input.ReadUInt16();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpriteAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpriteAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.SpriteAnimation>
    {
        protected override Nine.Animations.SpriteAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.SpriteAnimation existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new SpriteAnimation();
            existingInstance.Source = input.ReadObject<Nine.Graphics.TextureAtlas>();
            existingInstance.TargetProperty = input.ReadString();
            existingInstance.BeginFrame = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.EndFrame = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.FramesPerSecond = input.ReadSingle();
            existingInstance.Ending = (Nine.Animations.KeyframeEnding)input.ReadUInt16();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = (Nine.Animations.AnimationDirection)input.ReadUInt16();
            existingInstance.Direction = (Nine.Animations.AnimationDirection)input.ReadUInt16();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics
{
    /// <summary>
    /// Content reader for <c>AmbientLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AmbientLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.AmbientLight>
    {
        protected override Nine.Graphics.AmbientLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.AmbientLight existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new AmbientLight(graphicsDevice);
            }
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.AmbientLightColor = input.ReadVector3();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BirdEyeCamera</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BirdEyeCameraReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.BirdEyeCamera>
    {
        protected override Nine.Graphics.BirdEyeCamera Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.BirdEyeCamera existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new BirdEyeCamera(graphicsDevice);
            }
            existingInstance.Yaw = input.ReadSingle();
            existingInstance.Pitch = input.ReadSingle();
            existingInstance.Radius = input.ReadSingle();
            existingInstance.MinRadius = input.ReadSingle();
            existingInstance.MaxRadius = input.ReadSingle();
            existingInstance.WheelSpeed = input.ReadSingle();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.RotateButton = (Nine.MouseButtons)input.ReadUInt16();
            existingInstance.TranslateButton = (Nine.MouseButtons)input.ReadUInt16();
            existingInstance.LookAt = input.ReadVector3();
            existingInstance.NearPlane = input.ReadSingle();
            existingInstance.FarPlane = input.ReadSingle();
            existingInstance.FieldOfView = input.ReadSingle();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Camera</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CameraReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Camera>
    {
        protected override Nine.Graphics.Camera Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Camera existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Camera(graphicsDevice);
            }
            existingInstance.NearPlane = input.ReadSingle();
            existingInstance.FarPlane = input.ReadSingle();
            existingInstance.FieldOfView = input.ReadSingle();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Camera2D</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Camera2DReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Camera2D>
    {
        protected override Nine.Graphics.Camera2D Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Camera2D existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Camera2D(graphicsDevice);
            }
            existingInstance.Position = input.ReadVector2();
            existingInstance.Zoom = input.ReadSingle();
            existingInstance.MinZoom = input.ReadSingle();
            existingInstance.MaxZoom = input.ReadSingle();
            existingInstance.WheelSpeed = input.ReadSingle();
            existingInstance.InputEnabled = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ChaseCamera</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ChaseCameraReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ChaseCamera>
    {
        protected override Nine.Graphics.ChaseCamera Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ChaseCamera existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ChaseCamera(graphicsDevice);
            }
            existingInstance.ChaseTarget = input.ReadObject<Nine.Transformable>();
            existingInstance.PositionOffset = input.ReadVector3();
            existingInstance.LookAtOffset = input.ReadVector3();
            existingInstance.Stiffness = input.ReadSingle();
            existingInstance.Damping = input.ReadSingle();
            existingInstance.Mass = input.ReadSingle();
            existingInstance.NearPlane = input.ReadSingle();
            existingInstance.FarPlane = input.ReadSingle();
            existingInstance.FieldOfView = input.ReadSingle();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Decal</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DecalReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Decal>
    {
        protected override Nine.Graphics.Decal Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Decal existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Decal(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.IsDynamic = input.ReadBoolean();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.Color = input.ReadVector3();
            existingInstance.Size = input.ReadVector3();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.DepthBias = input.ReadSingle();
            existingInstance.LightingEnabled = input.ReadBoolean();
            existingInstance.NormalMappingEnabled = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Duration = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.FadeDuration = input.ReadObject<System.TimeSpan>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DirectionalLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DirectionalLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.DirectionalLight>
    {
        protected override Nine.Graphics.DirectionalLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.DirectionalLight existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DirectionalLight(graphicsDevice);
            }
            existingInstance.ShadowDistance = input.ReadSingle();
            existingInstance.Direction = input.ReadVector3();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadSingle();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Fog</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FogReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Fog>
    {
        protected override Nine.Graphics.Fog Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Fog existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new Fog();
            existingInstance.FogStart = input.ReadSingle();
            existingInstance.FogEnd = input.ReadSingle();
            existingInstance.FogColor = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FreeCamera</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FreeCameraReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.FreeCamera>
    {
        protected override Nine.Graphics.FreeCamera Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.FreeCamera existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new FreeCamera(graphicsDevice);
            }
            existingInstance.Angle = input.ReadVector3();
            existingInstance.Position = input.ReadVector3();
            existingInstance.TurnSpeed = input.ReadSingle();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.PrecisionModeSpeed = input.ReadSingle();
            existingInstance.ForwardKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.BackwardKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.LeftKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.RightKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.UpKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.DownKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.PrecisionModeKey = (Microsoft.Xna.Framework.Input.Keys)input.ReadUInt16();
            existingInstance.NearPlane = input.ReadSingle();
            existingInstance.FarPlane = input.ReadSingle();
            existingInstance.FieldOfView = input.ReadSingle();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FullScreenQuad</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FullScreenQuadReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.FullScreenQuad>
    {
        protected override Nine.Graphics.FullScreenQuad Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.FullScreenQuad existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new FullScreenQuad(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Geometry</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class GeometryReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Geometry>
    {
        protected override Nine.Graphics.Geometry Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Geometry existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new Geometry();
            existingInstance.positions = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.indices = input.ReadObject<System.UInt16[]>();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Heightmap</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class HeightmapReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Heightmap>
    {
        protected override Nine.Graphics.Heightmap Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Heightmap existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new Heightmap();
            existingInstance.Size = input.ReadVector3();
            existingInstance.Step = input.ReadSingle();
            existingInstance.Heights = input.ReadObject<System.Single[]>();
            existingInstance.Normals = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Tangents = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Width = input.ReadInt32();
            existingInstance.Height = input.ReadInt32();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Model</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Model>
    {
        protected override Nine.Graphics.Model Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Model existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Model(graphicsDevice);
            }
            {
                var count = input.ReadUInt16();
                for (var i = 0; i < count; ++i)
                    existingInstance.Meshes.Add(input.ReadObject<Nine.Graphics.ModelMesh>());
            }
            existingInstance.Source = input.ReadObject<Microsoft.Xna.Framework.Graphics.Model>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.AnimationCullingEnabled = input.ReadBoolean();
            existingInstance.UseModelTextures = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.OrientedBoundingBox = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.BoundingBox>>();
            existingInstance.SharedSkeleton = input.ReadObject<Nine.Graphics.Skeleton>();
            {
                var count = input.ReadUInt16();
                for (var i = 0; i < count; ++i)
                    existingInstance.Attachments.Add(input.ReadObject<Nine.Graphics.ModelAttachment>());
            }
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelAttachment</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelAttachmentReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelAttachment>
    {
        protected override Nine.Graphics.ModelAttachment Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelAttachment existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ModelAttachment();
            existingInstance.Transformable = input.ReadObject<Nine.Transformable>();
            existingInstance.Bone = input.ReadString();
            existingInstance.Transform = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.UseBoneScale = input.ReadBoolean();
            existingInstance.ShareSkeleton = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelCollision</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelCollisionReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelCollision>
    {
        protected override Nine.Graphics.ModelCollision Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelCollision existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ModelCollision();
            existingInstance.CollisionTree = input.ReadObject<Nine.Octree<System.Boolean>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelMesh</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelMeshReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelMesh>
    {
        protected override Nine.Graphics.ModelMesh Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelMesh existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ModelMesh();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.UseModelTextures = input.ReadObject<System.Nullable<System.Boolean>>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelMeshPartTag</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelMeshPartTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelMeshPartTag>
    {
        protected override Nine.Graphics.ModelMeshPartTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelMeshPartTag existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ModelMeshPartTag();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Textures = input.ReadObject<System.Collections.Generic.Dictionary<Nine.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.Texture>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelSkeletonData</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelSkeletonDataReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelSkeletonData>
    {
        protected override Nine.Graphics.ModelSkeletonData Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelSkeletonData existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ModelSkeletonData();
            existingInstance.InverseAbsoluteBindPose = input.ReadObject<System.Collections.Generic.List<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.SkeletonRoot = input.ReadInt32();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelTag</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelTag>
    {
        protected override Nine.Graphics.ModelTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelTag existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ModelTag();
            existingInstance.Skeleton = input.ReadObject<Nine.Graphics.ModelSkeletonData>();
            existingInstance.Collision = input.ReadObject<Nine.Graphics.ModelCollision>();
            existingInstance.Animations = input.ReadObject<System.Collections.Generic.Dictionary<System.String, Nine.Animations.BoneAnimationClip>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelViewerCamera</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelViewerCameraReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelViewerCamera>
    {
        protected override Nine.Graphics.ModelViewerCamera Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelViewerCamera existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ModelViewerCamera(graphicsDevice);
            }
            existingInstance.Radius = input.ReadSingle();
            existingInstance.MinRadius = input.ReadSingle();
            existingInstance.MaxRadius = input.ReadSingle();
            existingInstance.WheelSpeed = input.ReadSingle();
            existingInstance.Center = input.ReadVector3();
            existingInstance.MouseWheelEnabled = input.ReadBoolean();
            existingInstance.RotateButton = (Nine.MouseButtons)input.ReadUInt16();
            existingInstance.NearPlane = input.ReadSingle();
            existingInstance.FarPlane = input.ReadSingle();
            existingInstance.FieldOfView = input.ReadSingle();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Sprite</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpriteReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Sprite>
    {
        protected override Nine.Graphics.Sprite Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Sprite existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Sprite(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.Color = input.ReadColor();
            existingInstance.BlendState = input.ReadObject<Microsoft.Xna.Framework.Graphics.BlendState>();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.FlipX = input.ReadBoolean();
            existingInstance.FlipY = input.ReadBoolean();
            existingInstance.ZOrder = input.ReadInt32();
            existingInstance.Animations = input.ReadObject<Nine.Animations.AnimationPlayer>();
            existingInstance.Position = input.ReadVector2();
            existingInstance.Scale = input.ReadVector2();
            existingInstance.Rotation = input.ReadSingle();
            existingInstance.Size = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector2>>();
            existingInstance.Anchor = input.ReadVector2();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SourceRectangle = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Rectangle>>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Surface</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SurfaceReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Surface>
    {
        protected override Nine.Graphics.Surface Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Surface existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Surface(graphicsDevice);
            }
            existingInstance.PatchSegmentCount = input.ReadInt32();
            existingInstance.TextureTransform = input.ReadMatrix();
            existingInstance.Topology = (Nine.Graphics.SurfaceTopology)input.ReadUInt16();
            existingInstance.VertexTypeSerializer = input.ReadString();
            existingInstance.Heightmap = input.ReadObject<Nine.Graphics.Heightmap>();
            existingInstance.LevelOfDetailStart = input.ReadSingle();
            existingInstance.LevelOfDetailEnd = input.ReadSingle();
            existingInstance.LevelOfDetailEnabled = input.ReadBoolean();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.BoundingBoxPadding = input.ReadVector3();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TextSprite</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TextSpriteReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.TextSprite>
    {
        protected override Nine.Graphics.TextSprite Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.TextSprite existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new TextSprite(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Text = input.ReadString();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.Color = input.ReadColor();
            existingInstance.BlendState = input.ReadObject<Microsoft.Xna.Framework.Graphics.BlendState>();
            existingInstance.ZOrder = input.ReadInt32();
            existingInstance.Font = input.ReadObject<Microsoft.Xna.Framework.Graphics.SpriteFont>();
            existingInstance.FlipX = input.ReadBoolean();
            existingInstance.FlipY = input.ReadBoolean();
            existingInstance.Position = input.ReadVector2();
            existingInstance.Scale = input.ReadVector2();
            existingInstance.Rotation = input.ReadSingle();
            existingInstance.Size = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector2>>();
            existingInstance.Anchor = input.ReadVector2();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Materials
{
    /// <summary>
    /// Content reader for <c>AlphaTestMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AlphaTestMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.AlphaTestMaterial>
    {
        protected override Nine.Graphics.Materials.AlphaTestMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.AlphaTestMaterial existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new AlphaTestMaterial(graphicsDevice);
            }
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.ReferenceAlpha = input.ReadInt32();
            existingInstance.AlphaFunction = (Microsoft.Xna.Framework.Graphics.CompareFunction)input.ReadUInt16();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BasicMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BasicMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.BasicMaterial>
    {
        protected override Nine.Graphics.Materials.BasicMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.BasicMaterial existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new BasicMaterial(graphicsDevice);
            }
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.SpecularPower = input.ReadSingle();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.LightingEnabled = input.ReadBoolean();
            existingInstance.PreferPerPixelLighting = input.ReadBoolean();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DebugMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DebugMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DebugMaterial>
    {
        protected override Nine.Graphics.Materials.DebugMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DebugMaterial existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DebugMaterial(graphicsDevice);
            }
            existingInstance.TextureUsage = (Nine.Graphics.TextureUsage)input.ReadUInt16();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DualTextureMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DualTextureMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DualTextureMaterial>
    {
        protected override Nine.Graphics.Materials.DualTextureMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DualTextureMaterial existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DualTextureMaterial(graphicsDevice);
            }
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.Texture2 = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.PreferPerPixelLighting = input.ReadBoolean();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>EnvironmentMapMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class EnvironmentMapMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.EnvironmentMapMaterial>
    {
        protected override Nine.Graphics.Materials.EnvironmentMapMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.EnvironmentMapMaterial existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new EnvironmentMapMaterial(graphicsDevice);
            }
            existingInstance.FresnelFactor = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.EnvironmentMapAmount = input.ReadSingle();
            existingInstance.EnvironmentMapSpecular = input.ReadVector3();
            existingInstance.EnvironmentMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.TextureCube>();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>MaterialLevelOfDetail</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class MaterialLevelOfDetailReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialLevelOfDetail>
    {
        protected override Nine.Graphics.Materials.MaterialLevelOfDetail Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialLevelOfDetail existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new MaterialLevelOfDetail();
            {
                var count = input.ReadUInt16();
                for (var i = 0; i < count; ++i)
                    existingInstance.MaterialLevels.Add(input.ReadObject<Nine.Graphics.Materials.Material>());
            }
            existingInstance.LevelOfDetailStart = input.ReadSingle();
            existingInstance.LevelOfDetailEnd = input.ReadSingle();
            existingInstance.MaterialQuality = input.ReadSingle();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SkinnedMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SkinnedMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.SkinnedMaterial>
    {
        protected override Nine.Graphics.Materials.SkinnedMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.SkinnedMaterial existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new SkinnedMaterial(graphicsDevice);
            }
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.SpecularPower = input.ReadSingle();
            existingInstance.WeightsPerVertex = input.ReadInt32();
            existingInstance.PreferPerPixelLighting = input.ReadBoolean();
            existingInstance.SamplerState = input.ReadObject<Microsoft.Xna.Framework.Graphics.SamplerState>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.ParticleEffects
{
    /// <summary>
    /// Content reader for <c>AbsorbController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AbsorbControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.AbsorbController>
    {
        protected override Nine.Graphics.ParticleEffects.AbsorbController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.AbsorbController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new AbsorbController();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Force = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BoxEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoxEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.BoxEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.BoxEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.BoxEmitter existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new BoxEmitter();
            existingInstance.Min = input.ReadVector3();
            existingInstance.Max = input.ReadVector3();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ColorControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ColorController>
    {
        protected override Nine.Graphics.ParticleEffects.ColorController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ColorController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ColorController();
            existingInstance.EndColor = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CylinderEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CylinderEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.CylinderEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.CylinderEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.CylinderEmitter existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new CylinderEmitter();
            existingInstance.Shell = input.ReadBoolean();
            existingInstance.Radiate = input.ReadBoolean();
            existingInstance.Height = input.ReadSingle();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Radius = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FadeController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FadeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.FadeController>
    {
        protected override Nine.Graphics.ParticleEffects.FadeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.FadeController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new FadeController();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ForceController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ForceController>
    {
        protected override Nine.Graphics.ParticleEffects.ForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ForceController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new ForceController();
            existingInstance.Force = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>LineEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class LineEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.LineEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.LineEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.LineEmitter existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new LineEmitter();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.LineList = input.ReadObject<System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Vector3>>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ParticleEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ParticleEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ParticleEffect>
    {
        protected override Nine.Graphics.ParticleEffects.ParticleEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ParticleEffect existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ParticleEffect(graphicsDevice);
            }
            existingInstance.ParticleType = (Nine.Graphics.ParticleEffects.ParticleType)input.ReadUInt16();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Stretch = input.ReadSingle();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SourceRectangle = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Rectangle>>();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.IsAsync = input.ReadBoolean();
            existingInstance.BoundingBoxPadding = input.ReadVector3();
            existingInstance.Emitter = input.ReadObject<Nine.Graphics.ParticleEffects.IParticleEmitter>();
            {
                var count = input.ReadUInt16();
                for (var i = 0; i < count; ++i)
                    existingInstance.Controllers.Add(input.ReadObject<Nine.Graphics.ParticleEffects.IParticleController>());
            }
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PointEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.PointEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.PointEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.PointEmitter existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new PointEmitter();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>RotationController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class RotationControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.RotationController>
    {
        protected override Nine.Graphics.ParticleEffects.RotationController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.RotationController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new RotationController();
            existingInstance.EndRotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SizeController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SizeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SizeController>
    {
        protected override Nine.Graphics.ParticleEffects.SizeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SizeController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new SizeController();
            existingInstance.EndSize = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpeedController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpeedControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SpeedController>
    {
        protected override Nine.Graphics.ParticleEffects.SpeedController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SpeedController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new SpeedController();
            existingInstance.EndSpeed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SphereEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SphereEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SphereEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.SphereEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SphereEmitter existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new SphereEmitter();
            existingInstance.Shell = input.ReadBoolean();
            existingInstance.Radiate = input.ReadBoolean();
            existingInstance.Radius = input.ReadSingle();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TangentForceController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TangentForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.TangentForceController>
    {
        protected override Nine.Graphics.ParticleEffects.TangentForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.TangentForceController existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
                existingInstance = new TangentForceController();
            existingInstance.Force = input.ReadSingle();
            existingInstance.Up = input.ReadVector3();
            existingInstance.Center = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Primitives
{
    /// <summary>
    /// Content reader for <c>Box</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoxReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Box>
    {
        protected override Nine.Graphics.Primitives.Box Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Box existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Box(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Cone</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ConeReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Cone>
    {
        protected override Nine.Graphics.Primitives.Cone Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Cone existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Cone(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Cross</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CrossReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Cross>
    {
        protected override Nine.Graphics.Primitives.Cross Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Cross existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Cross(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Cylinder</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CylinderReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Cylinder>
    {
        protected override Nine.Graphics.Primitives.Cylinder Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Cylinder existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Cylinder(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Dome</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DomeReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Dome>
    {
        protected override Nine.Graphics.Primitives.Dome Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Dome existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Dome(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Angle = input.ReadSingle();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DynamicPrimitive</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DynamicPrimitiveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.DynamicPrimitive>
    {
        protected override Nine.Graphics.Primitives.DynamicPrimitive Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.DynamicPrimitive existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DynamicPrimitive(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.DepthBias = input.ReadSingle();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Plane</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PlaneReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Plane>
    {
        protected override Nine.Graphics.Primitives.Plane Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Plane existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Plane(graphicsDevice);
            }
            existingInstance.TessellationX = input.ReadInt32();
            existingInstance.TessellationZ = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Sphere</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SphereReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Sphere>
    {
        protected override Nine.Graphics.Primitives.Sphere Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Sphere existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Sphere(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Teapot</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TeapotReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Teapot>
    {
        protected override Nine.Graphics.Primitives.Teapot Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Teapot existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Teapot(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Torus</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TorusReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Torus>
    {
        protected override Nine.Graphics.Primitives.Torus Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Torus existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Torus(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadString();
            existingInstance.AttachedProperties = input.ReadObject<System.Windows.Markup.AttachableMemberIdentifierCollection>();
            return existingInstance;
        }
    }
}
#endif