//=============================================================================
//
//  Copyright 2010 (c) Engine Nine. All Rights Reserved.
//
//=============================================================================
fragment PointLight;

[parameters]
float3 PointLightPosition = { 0, 0, 0 };
float3 PointLightDiffuseColor = { 1, 1, 1 };
float3 PointLightSpecularColor = { 0, 0, 0 };

float Range = 100;
float Attenuation = 1;

[ps]
__hlsl__
void main(INPUT input, inout OUTPUT output)
{
	float specularPower;
	float3 normal;
	float3 positionToEye;
	float3 diffuse;
    float3 specular;
	float4 positionWorld;

	import(LightDiffuse, diffuse = LightDiffuse);
	import(LightSpecular, specular = LightSpecular);
	import(SpecularPower, specularPower = SpecularPower);	
	import(Normal, normal = Normal);
	import(PositionToEye, positionToEye = PositionToEye);
	import(PositionWorld, positionWorld = PositionWorld);
	
    float3 positionToVertex = PointLightPosition - positionWorld.xyz;
    float3 L = normalize(positionToVertex);
    float dotL = dot(L, normal);
	float dotH = dot(normalize(positionToEye + L), normal);
	float zeroL = step(0, dotL);

	float distanceSq = dot(positionToVertex, positionToVertex);
	float distance = sqrt(distanceSq);

    float fade = max(1 - pow(max(distance / Range, 0.000001), Attenuation), 0);
    
	diffuse += PointLightDiffuseColor * zeroL * dotL * fade;
    specular += PointLightSpecularColor * pow(max(dotH, 0.000001) * zeroL, specularPower) * fade;
    
	export(float3, LightDiffuse, diffuse);
	export(float3, LightSpecular, specular);
}
__hlsl__