//=============================================================================
//
//  Copyright 2010 (c) Engine Nine. All Rights Reserved.
//
//=============================================================================
fragment ShadowMap;


[parameters]
matrix	LightViewProjection;
float 	ShadowIntensity = 0.5;
float	DepthBias = 0.0005f;
float	FarClip;
float2  ShadowMapTexelSize = float2(0.0009765625f, 0.0009765625f); // 1.0f/1024

// Poison filter pseudo random filter positions for PCF with 10 samples
float2 FilterTaps[10] =
{
   // First test, still the best.
   {-0.84052f, -0.073954f},
   {-0.326235f, -0.40583f},
   {-0.698464f, 0.457259f},
   {-0.203356f, 0.6205847f},
   {0.96345f, -0.194353f},
   {0.473434f, -0.480026f},
   {0.519454f, 0.767034f},
   {0.185461f, -0.8945231f},
   {0.507351f, 0.064963f},
   {-0.321932f, 0.5954349f}
};

texture2D ShadowMap;
sampler ShadowMapSampler = sampler_state
{
    Texture = (ShadowMap);
    MipFilter = Point;
    MagFilter = Point;
    MinFilter = Point;
};

[interpolators]
float3 Shadow;

[vs]
__hlsl__
void main(INPUT input, inout OUTPUT output)
{
	float4 positionWorld;	
	import(PositionWorld, positionWorld = PositionWorld);
	
	float4 positionShadow = mul(positionWorld, LightViewProjection);

	float3 shadow;
	shadow.x   	=  positionShadow.x / positionShadow.w / 2.0f + 0.5f;
	shadow.y   	= -positionShadow.y / positionShadow.w / 2.0f + 0.5f;
	shadow.z   	=  positionShadow.z / FarClip;

	output(Shadow, shadow);
}
__hlsl__

[ps]
__hlsl__
void main(INPUT input, inout OUTPUT output)
{
	float3 shadow = input.Shadow;
    float intensity = 0;
	
    if ((saturate(input.Shadow.x) == input.Shadow.x) && (saturate(input.Shadow.y) == input.Shadow.y))
    {
        for (int i=0; i<10; i++)
        {
            intensity += shadow.z > DepthBias + tex2D(ShadowMapSampler, shadow.xy + FilterTaps[i] * ShadowMapTexelSize).x ? 1.0f / 10.0f : 0;
        }
	}
     
    intensity *= ShadowIntensity;
    	
	float4 color;
	import(Color, color = Color);
	
	color.rgb *= (1 - intensity);
	export(float4, Color, color);
}
__hlsl__