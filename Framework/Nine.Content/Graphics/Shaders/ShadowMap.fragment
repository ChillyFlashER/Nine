matrix	LightViewProjection;
float3	ShadowColor = 0.5;
float	DepthBias = 0.005f;
float2  ShadowMapTexelSize;

// Poison filter pseudo random filter positions for PCF
float2 FilterTaps[{$SAMPLECOUNT}] =
{
{$FILTERTAPS}
};

texture2D ShadowMap;
sampler ShadowMapSampler = sampler_state
{
    Texture = (ShadowMap);
};

void VertexShader(float4 positionWorld, out float3 positionShadow)
{
    float4 shadow = mul(positionWorld, LightViewProjection);

    positionShadow.x   	=  shadow.x / shadow.w / 2.0f + 0.5f;
    positionShadow.y   	= -shadow.y / shadow.w / 2.0f + 0.5f;
    positionShadow.z   	=  shadow.z / shadow.w;
}

void PixelShader(float3 positionShadow, out float3 shadow:COLOR0)
{
    float intensity = 0;
    float comparand = saturate(positionShadow.z) - DepthBias;
    
    [unroll]
    for (int i=0; i<{$SAMPLECOUNT}; i++)
    {
        float2 uv = positionShadow.xy + FilterTaps[i] * ShadowMapTexelSize;
        float2 f = frac(uv / ShadowMapTexelSize);
        intensity += comparand > tex2D(ShadowMapSampler, uv).x ? 1.0f / {$SAMPLECOUNT} : 0;
    }

    shadow = lerp(1, ShadowColor, intensity);
}