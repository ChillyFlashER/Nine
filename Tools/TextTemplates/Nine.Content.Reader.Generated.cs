// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------


namespace Nine.Animations
{
    /// <summary>
    /// Content reader for <c>BoneAnimationClip</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BoneAnimationClipReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BoneAnimationClip>
    {
        protected override Nine.Animations.BoneAnimationClip Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BoneAnimationClip existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BoneAnimationClip();
            }
            existingInstance.FramesPerSecond = input.ReadObject<System.Int32>();
            existingInstance.PreferredEnding = input.ReadObject<Nine.Animations.KeyframeEnding>();
            existingInstance.TotalFrames = input.ReadObject<System.Int32>();
            existingInstance.Transforms = input.ReadObject<Microsoft.Xna.Framework.Matrix[][]>();

            return existingInstance;
        }
    }
}

namespace Nine.Graphics
{
    /// <summary>
    /// Content reader for <c>Geometry</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class GeometryReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Geometry>
    {
        protected override Nine.Graphics.Geometry Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Geometry existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new Geometry();
            }
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.BoundingSphere = input.ReadObject<Microsoft.Xna.Framework.BoundingSphere>();
            existingInstance.Indices = input.ReadObject<System.UInt16[]>();
            existingInstance.Positions = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Heightmap</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class HeightmapReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Heightmap>
    {
        protected override Nine.Graphics.Heightmap Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Heightmap existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new Heightmap();
            }
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Height = input.ReadObject<System.Int32>();
            existingInstance.Heights = input.ReadObject<System.Single[]>();
            existingInstance.Normals = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Size = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Step = input.ReadObject<System.Single>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Tangents = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Width = input.ReadObject<System.Int32>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelCollision</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelCollisionReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelCollision>
    {
        protected override Nine.Graphics.ModelCollision Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelCollision existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelCollision();
            }
            existingInstance.CollisionTree = input.ReadObject<Nine.Octree<System.Boolean>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelMeshPartTag</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelMeshPartTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelMeshPartTag>
    {
        protected override Nine.Graphics.ModelMeshPartTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelMeshPartTag existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelMeshPartTag();
            }
            existingInstance.Textures = input.ReadObject<System.Collections.Generic.Dictionary<System.String, Microsoft.Xna.Framework.Graphics.Texture>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelSkinning</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelSkinningReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelSkeletonData>
    {
        protected override Nine.Graphics.ModelSkeletonData Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelSkeletonData existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelSkeletonData();
            }
            existingInstance.InverseAbsoluteBindPose = input.ReadObject<System.Collections.Generic.List<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.SkeletonRoot = input.ReadObject<System.Int32>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelTag</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelTag>
    {
        protected override Nine.Graphics.ModelTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelTag existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelTag();
            }
            existingInstance.Animations = input.ReadObject<System.Collections.Generic.Dictionary<System.String, Nine.Animations.BoneAnimationClip>>();
            existingInstance.Collision = input.ReadObject<Nine.Graphics.ModelCollision>();
            existingInstance.Skeleton = input.ReadObject<Nine.Graphics.ModelSkeletonData>();

            return existingInstance;
        }
    }
}

namespace Nine.Graphics.Effects
{
    /// <summary>
    /// Content reader for <c>DecalEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DecalEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.DecalEffect>
    {
        protected override Nine.Graphics.Effects.DecalEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.DecalEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DecalEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.Rotation = input.ReadObject<System.Single>();
            existingInstance.Scale = input.ReadObject<Microsoft.Xna.Framework.Vector2>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.World = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DirectionalLightEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DirectionalLightEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.DirectionalLightEffect>
    {
        protected override Nine.Graphics.Effects.DirectionalLightEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.DirectionalLightEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DirectionalLightEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.ShaderIndex = input.ReadObject<System.Int32>();
            existingInstance.SkinningEnabled = input.ReadObject<System.Boolean>();
            existingInstance.SpecularPower = input.ReadObject<System.Single>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.World = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SkyBoxEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SkyBoxEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.SkyBoxEffect>
    {
        protected override Nine.Graphics.Effects.SkyBoxEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.SkyBoxEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new SkyBoxEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Color = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.TextureCube>();

            return existingInstance;
        }
    }
}

namespace Nine.Graphics.Effects.Deferred
{
    /// <summary>
    /// Content reader for <c>DeferredAmbientLight</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DeferredAmbientLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.Deferred.DeferredAmbientLight>
    {
        protected override Nine.Graphics.Effects.Deferred.DeferredAmbientLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.Deferred.DeferredAmbientLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DeferredAmbientLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.AmbientLightColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DeferredDirectionalLight</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DeferredDirectionalLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.Deferred.DeferredDirectionalLight>
    {
        protected override Nine.Graphics.Effects.Deferred.DeferredDirectionalLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.Deferred.DeferredDirectionalLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DeferredDirectionalLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.DepthBuffer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.NormalBuffer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DeferredEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DeferredEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.Deferred.DeferredEffect>
    {
        protected override Nine.Graphics.Effects.Deferred.DeferredEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.Deferred.DeferredEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DeferredEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.LightTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.ShaderIndex = input.ReadObject<System.Int32>();
            existingInstance.SkinningEnabled = input.ReadObject<System.Boolean>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.World = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DeferredPointLight</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DeferredPointLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.Deferred.DeferredPointLight>
    {
        protected override Nine.Graphics.Effects.Deferred.DeferredPointLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.Deferred.DeferredPointLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DeferredPointLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.DepthBuffer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.NormalBuffer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DeferredSpotLight</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DeferredSpotLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.Deferred.DeferredSpotLight>
    {
        protected override Nine.Graphics.Effects.Deferred.DeferredSpotLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.Deferred.DeferredSpotLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DeferredSpotLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.DepthBuffer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Falloff = input.ReadObject<System.Single>();
            existingInstance.InnerAngle = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.NormalBuffer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.OuterAngle = input.ReadObject<System.Single>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>GraphicsBufferEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class GraphicsBufferEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.Deferred.GraphicsBufferEffect>
    {
        protected override Nine.Graphics.Effects.Deferred.GraphicsBufferEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.Deferred.GraphicsBufferEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new GraphicsBufferEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.NormalMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMappingEnabled = input.ReadObject<System.Boolean>();
            existingInstance.Projection = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.SkinningEnabled = input.ReadObject<System.Boolean>();
            existingInstance.SpecularPower = input.ReadObject<System.Single>();
            existingInstance.View = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.World = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
}

namespace Nine.Graphics.Effects.EffectParts
{
    /// <summary>
    /// Content reader for <c>AmbientLightEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AmbientLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.AmbientLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.AmbientLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.AmbientLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new AmbientLightEffectPart();
            }
            existingInstance.AmbientLightColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BasicTextureEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BasicTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.BasicTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.BasicTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.BasicTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BasicTextureEffectPart();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BeginLightEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BeginLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.BeginLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.BeginLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.BeginLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BeginLightEffectPart();
            }
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularPower = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorMatrixEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ColorMatrixEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ColorMatrixEffectPart();
            }
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DirectionalLightEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DirectionalLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DirectionalLightEffectPart();
            }
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DualTextureEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DualTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.DualTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.DualTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.DualTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DualTextureEffectPart();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FogEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class FogEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.FogEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.FogEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.FogEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new FogEffectPart();
            }
            existingInstance.FogColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.FogEnd = input.ReadObject<System.Single>();
            existingInstance.FogStart = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>NormalMapEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class NormalMapEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.NormalMapEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.NormalMapEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.NormalMapEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new NormalMapEffectPart();
            }
            existingInstance.NormalMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>OverlayTextureEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class OverlayTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new OverlayTextureEffectPart();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointLightEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class PointLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.PointLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.PointLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.PointLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new PointLightEffectPart();
            }
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ShadowMapEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ShadowMapEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.ShadowMapEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.ShadowMapEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.ShadowMapEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ShadowMapEffectPart();
            }
            existingInstance.DepthBias = input.ReadObject<System.Single>();
            existingInstance.ShadowIntensity = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SkinTransformEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SkinTransformEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SkinTransformEffectPart();
            }
            existingInstance.MaxBones = input.ReadObject<System.Int32>();
            existingInstance.WeightsPerVertex = input.ReadObject<System.Int32>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SplatterTextureEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SplatterTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SplatterTextureEffectPart();
            }
            existingInstance.SplatterTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SplatterTextureScale = input.ReadObject<Microsoft.Xna.Framework.Vector2>();
            existingInstance.TextureW = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureX = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureY = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureZ = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpotLightEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SpotLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SpotLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SpotLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SpotLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SpotLightEffectPart();
            }
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Falloff = input.ReadObject<System.Single>();
            existingInstance.InnerAngle = input.ReadObject<System.Single>();
            existingInstance.OuterAngle = input.ReadObject<System.Single>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TextureTransformEffectPart</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class TextureTransformEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.TextureTransformEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.TextureTransformEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.TextureTransformEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new TextureTransformEffectPart();
            }
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
}

namespace Nine.Graphics.ParticleEffects
{
    /// <summary>
    /// Content reader for <c>AbsorbController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AbsorbControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.AbsorbController>
    {
        protected override Nine.Graphics.ParticleEffects.AbsorbController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.AbsorbController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new AbsorbController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.Force = input.ReadObject<System.Single>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BoxEmitter</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BoxEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.BoxEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.BoxEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.BoxEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BoxEmitter();
            }
            existingInstance.Box = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();
            existingInstance.Transform = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ColorControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ColorController>
    {
        protected override Nine.Graphics.ParticleEffects.ColorController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ColorController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ColorController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.EndColor = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CylinderEmitter</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class CylinderEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.CylinderEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.CylinderEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.CylinderEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new CylinderEmitter();
            }
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Height = input.ReadObject<System.Single>();
            existingInstance.Radiate = input.ReadObject<System.Boolean>();
            existingInstance.Radius = input.ReadObject<System.Single>();
            existingInstance.Shell = input.ReadObject<System.Boolean>();
            existingInstance.Spread = input.ReadObject<System.Single>();
            existingInstance.Up = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FadeController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class FadeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.FadeController>
    {
        protected override Nine.Graphics.ParticleEffects.FadeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.FadeController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new FadeController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ForceController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ForceController>
    {
        protected override Nine.Graphics.ParticleEffects.ForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ForceController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ForceController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.Force = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>LineEmitter</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class LineEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.LineEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.LineEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.LineEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new LineEmitter();
            }
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.LineList = input.ReadObject<System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Vector3>>();
            existingInstance.Spread = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointEmitter</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class PointEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.PointEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.PointEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.PointEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new PointEmitter();
            }
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>RotationController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class RotationControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.RotationController>
    {
        protected override Nine.Graphics.ParticleEffects.RotationController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.RotationController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new RotationController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.EndRotation = input.ReadObject<Nine.Range<System.Single>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SizeController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SizeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SizeController>
    {
        protected override Nine.Graphics.ParticleEffects.SizeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SizeController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SizeController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.EndSize = input.ReadObject<Nine.Range<System.Single>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpeedController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SpeedControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SpeedController>
    {
        protected override Nine.Graphics.ParticleEffects.SpeedController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SpeedController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SpeedController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.EndSpeed = input.ReadObject<Nine.Range<System.Single>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SphereEmitter</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SphereEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SphereEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.SphereEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SphereEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SphereEmitter();
            }
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Radiate = input.ReadObject<System.Boolean>();
            existingInstance.Radius = input.ReadObject<System.Single>();
            existingInstance.Shell = input.ReadObject<System.Boolean>();
            existingInstance.Spread = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TangentForceController</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class TangentForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.TangentForceController>
    {
        protected override Nine.Graphics.ParticleEffects.TangentForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.TangentForceController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new TangentForceController();
            }
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.Force = input.ReadObject<System.Single>();
            existingInstance.Up = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
}

namespace Nine.Graphics.ScreenEffects
{
    /// <summary>
    /// Content reader for <c>AntiAliasEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AntiAliasEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.AntiAliasEffect>
    {
        protected override Nine.Graphics.ScreenEffects.AntiAliasEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.AntiAliasEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new AntiAliasEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.NormalTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Weight = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BlurEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BlurEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.BlurEffect>
    {
        protected override Nine.Graphics.ScreenEffects.BlurEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.BlurEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new BlurEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.BlurAmount = input.ReadObject<System.Single>();
            existingInstance.Direction = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.SampleCount = input.ReadObject<System.Int32>();
            existingInstance.Step = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorMatrixEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ColorMatrixEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.ColorMatrixEffect>
    {
        protected override Nine.Graphics.ScreenEffects.ColorMatrixEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.ColorMatrixEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new ColorMatrixEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DepthOfFieldEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DepthOfFieldEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.DepthOfFieldEffect>
    {
        protected override Nine.Graphics.ScreenEffects.DepthOfFieldEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.DepthOfFieldEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DepthOfFieldEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.BlurTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.DepthTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.FocalDistance = input.ReadObject<System.Single>();
            existingInstance.FocalLength = input.ReadObject<System.Single>();
            existingInstance.FocalPlane = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>EmbossEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class EmbossEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.EmbossEffect>
    {
        protected override Nine.Graphics.ScreenEffects.EmbossEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.EmbossEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new EmbossEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Emboss = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>LuminanceEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class LuminanceEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.LuminanceEffect>
    {
        protected override Nine.Graphics.ScreenEffects.LuminanceEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.LuminanceEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new LuminanceEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>NoiseEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class NoiseEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.NoiseEffect>
    {
        protected override Nine.Graphics.ScreenEffects.NoiseEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.NoiseEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new NoiseEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.NoiseAmount = input.ReadObject<System.Single>();
            existingInstance.Seed = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PixelateEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class PixelateEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.PixelateEffect>
    {
        protected override Nine.Graphics.ScreenEffects.PixelateEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.PixelateEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new PixelateEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.EdgeColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Threshhold = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>RadialBlurEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class RadialBlurEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.RadialBlurEffect>
    {
        protected override Nine.Graphics.ScreenEffects.RadialBlurEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.RadialBlurEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new RadialBlurEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.BlurAmount = input.ReadObject<System.Single>();
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector2>();
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ScaleEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ScaleEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.ScaleEffect>
    {
        protected override Nine.Graphics.ScreenEffects.ScaleEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.ScaleEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new ScaleEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ThresholdEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ThresholdEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.ThresholdEffect>
    {
        protected override Nine.Graphics.ScreenEffects.ThresholdEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.ThresholdEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new ThresholdEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Threshold = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ToneMappingEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ToneMappingEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.ToneMappingEffect>
    {
        protected override Nine.Graphics.ScreenEffects.ToneMappingEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.ToneMappingEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new ToneMappingEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.BloomTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Exposure = input.ReadObject<System.Single>();
            existingInstance.LuminanceTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.MaxLuminance = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>WiggleEffect</c>.
    /// <summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class WiggleEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ScreenEffects.WiggleEffect>
    {
        protected override Nine.Graphics.ScreenEffects.WiggleEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ScreenEffects.WiggleEffect existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new WiggleEffect(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Amplitude = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Repeat = input.ReadObject<System.Single>();
            existingInstance.Speed = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
}
