// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------

#if !TEXT_TEMPLATE
namespace Nine
{
    /// <summary>
    /// Content reader for <c>BounceCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BounceCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.BounceCurve>
    {
        protected override Nine.BounceCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.BounceCurve existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new BounceCurve();
            existingInstance.Strength = input.ReadSingle();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CustomCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CustomCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.CustomCurve>
    {
        protected override Nine.CustomCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.CustomCurve existingInstance)
        {
            existingInstance.Curve = input.ReadObject<Microsoft.Xna.Framework.Curve>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ElasticCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ElasticCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.ElasticCurve>
    {
        protected override Nine.ElasticCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.ElasticCurve existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ElasticCurve();
            existingInstance.Strength = input.ReadSingle();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ExponentialCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ExponentialCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.ExponentialCurve>
    {
        protected override Nine.ExponentialCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.ExponentialCurve existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ExponentialCurve();
            existingInstance.Power = input.ReadSingle();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Group</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class GroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Group>
    {
        protected override Nine.Group Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Group existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Group();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Children.Add(input.ReadObject<System.Object>());
            }
            existingInstance.Animations = input.ReadObject<Nine.Animations.AnimationPlayer>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>LinearCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class LinearCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.LinearCurve>
    {
        protected override Nine.LinearCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.LinearCurve existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new LinearCurve();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Scene</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SceneReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Scene>
    {
        protected override Nine.Scene Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Scene existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Scene();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Children.Add(input.ReadObject<System.Object>());
            }
            existingInstance.Animations = input.ReadObject<Nine.Animations.AnimationPlayer>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SinCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SinCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.SinCurve>
    {
        protected override Nine.SinCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.SinCurve existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SinCurve();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SmoothCurve</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SmoothCurveReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.SmoothCurve>
    {
        protected override Nine.SmoothCurve Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.SmoothCurve existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SmoothCurve();
            return existingInstance;
        }
    }
}
namespace Nine.Animations
{
    /// <summary>
    /// Content reader for <c>AnimationGroup</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AnimationGroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.AnimationGroup>
    {
        protected override Nine.Animations.AnimationGroup Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.AnimationGroup existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new AnimationGroup();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Animations.Add(input.ReadObject<Nine.Animations.IAnimation>());
            }
            existingInstance.Repeat = input.ReadInt32();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>AnimationPlayer</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AnimationPlayerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.AnimationPlayer>
    {
        protected override Nine.Animations.AnimationPlayer Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.AnimationPlayer existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new AnimationPlayer();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Animations.Add(
                        input.ReadObject<System.String>(),
                        input.ReadObject<Nine.Animations.IAnimation>());
            }
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>AnimationSequence</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AnimationSequenceReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.AnimationSequence>
    {
        protected override Nine.Animations.AnimationSequence Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.AnimationSequence existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new AnimationSequence();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Animations.Add(input.ReadObject<Nine.Animations.IAnimation>());
            }
            existingInstance.Repeat = input.ReadInt32();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BooleanAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BooleanAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BooleanAnimation>
    {
        protected override Nine.Animations.BooleanAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BooleanAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new BooleanAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Boolean>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Boolean>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Boolean>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ByteAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ByteAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.ByteAnimation>
    {
        protected override Nine.Animations.ByteAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.ByteAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ByteAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Byte>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Byte>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Byte>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CharAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CharAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.CharAnimation>
    {
        protected override Nine.Animations.CharAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.CharAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new CharAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Char>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Char>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Char>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ColorAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.ColorAnimation>
    {
        protected override Nine.Animations.ColorAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.ColorAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ColorAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Color>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Color>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Color>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DecimalAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DecimalAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.DecimalAnimation>
    {
        protected override Nine.Animations.DecimalAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.DecimalAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DecimalAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Decimal>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Decimal>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Decimal>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DelayAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DelayAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.DelayAnimation>
    {
        protected override Nine.Animations.DelayAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.DelayAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DelayAnimation();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DoubleAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DoubleAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.DoubleAnimation>
    {
        protected override Nine.Animations.DoubleAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.DoubleAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DoubleAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Double>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Double>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Double>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Int16Animation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Int16AnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.Int16Animation>
    {
        protected override Nine.Animations.Int16Animation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.Int16Animation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Int16Animation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Int16>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Int16>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Int16>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Int32Animation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Int32AnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.Int32Animation>
    {
        protected override Nine.Animations.Int32Animation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.Int32Animation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Int32Animation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Int64Animation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Int64AnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.Int64Animation>
    {
        protected override Nine.Animations.Int64Animation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.Int64Animation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Int64Animation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Int64>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Int64>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Int64>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>MatrixAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class MatrixAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.MatrixAnimation>
    {
        protected override Nine.Animations.MatrixAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.MatrixAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new MatrixAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PointAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.PointAnimation>
    {
        protected override Nine.Animations.PointAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.PointAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new PointAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Point>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Point>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Point>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>QuaternionAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class QuaternionAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.QuaternionAnimation>
    {
        protected override Nine.Animations.QuaternionAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.QuaternionAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new QuaternionAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Quaternion>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Quaternion>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Quaternion>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>RectangleAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class RectangleAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.RectangleAnimation>
    {
        protected override Nine.Animations.RectangleAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.RectangleAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new RectangleAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Rectangle>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Rectangle>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Rectangle>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SingleAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SingleAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.SingleAnimation>
    {
        protected override Nine.Animations.SingleAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.SingleAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SingleAnimation();
            existingInstance.From = input.ReadObject<System.Nullable<System.Single>>();
            existingInstance.To = input.ReadObject<System.Nullable<System.Single>>();
            existingInstance.By = input.ReadObject<System.Nullable<System.Single>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TweenAnimation`1</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TweenAnimationReader<T> : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.TweenAnimation<T>>
    {
        protected override Nine.Animations.TweenAnimation<T> Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.TweenAnimation<T> existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new TweenAnimation<T>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Vector2Animation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Vector2AnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.Vector2Animation>
    {
        protected override Nine.Animations.Vector2Animation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.Vector2Animation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Vector2Animation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector2>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector2>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector2>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Vector3Animation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Vector3AnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.Vector3Animation>
    {
        protected override Nine.Animations.Vector3Animation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.Vector3Animation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Vector3Animation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector3>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector3>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector3>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Vector4Animation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class Vector4AnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.Vector4Animation>
    {
        protected override Nine.Animations.Vector4Animation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.Vector4Animation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Vector4Animation();
            existingInstance.From = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector4>>();
            existingInstance.To = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector4>>();
            existingInstance.By = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector4>>();
            existingInstance.Easing = input.ReadObject<Nine.Animations.Easing>();
            existingInstance.Curve = input.ReadObject<Nine.ICurve>();
            existingInstance.Duration = input.ReadObject<System.TimeSpan>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
}
#endif