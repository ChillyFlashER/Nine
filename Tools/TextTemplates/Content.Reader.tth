<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------
<#@ include file="Content.tth" #>
<#
    var assembly = Assembly.LoadFrom(Host.ResolvePath(assemblyFile));
#>
#if !TEXT_TEMPLATE
<#
    foreach (var namespaceGroup in FindContentSerializableTypes(assembly).GroupBy(t => t.Namespace)
                                                                         .OrderBy(g => g.Key))
    {
#>
namespace <#= namespaceGroup.Key #>
{
<#
    foreach (var type in namespaceGroup.OrderBy(t => GetClassName(t)))
    {
        var className = GetClassName(type);
        var classFullName = GetClassFullName(type);
        var members = FindContentSerializableMembers(type).ToArray();
        var notSupportedByWindowsPhone = (className.EndsWith("Effect") && !className.EndsWith("ParticleEffect")) || className.EndsWith("EffectPart") ||
                                        (className.EndsWith("Material") && !className.StartsWith("BasicMaterial")
                                                                        && !className.StartsWith("DualTextureMaterial")
                                                                        && !className.StartsWith("SkinnedMaterial")
                                                                        && !className.StartsWith("EnvironmentMapMaterial")
                                                                        && !className.StartsWith("AlphaTestMaterial")) ||
                                         className.StartsWith("Deferred");
        if (notSupportedByWindowsPhone)
        {
#>
#if !WINDOWS_PHONE
<#
        }
#>
    /// <summary>
    /// Content reader for <c><#= type.Name #></c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class <#= AppendClassName(className, "Reader") #> : Microsoft.Xna.Framework.Content.ContentTypeReader<<#= classFullName #>>
    {
        protected override <#= classFullName #> Read(Microsoft.Xna.Framework.Content.ContentReader input, <#= classFullName #> existingInstance)
        {
            Group.EnsureDefaultServiceProvider(input.ContentManager);
<#
    if (HasDefaultGraphicsDeviceConstructor(type))
    {
#>
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new <#= className #>(graphicsDevice);
            }
<#
    }
    else if (HasDefaultServiceProviderConstructor(type))
    {
#>
            if (existingInstance == null)
                existingInstance = new <#= className #>(input.ContentManager.ServiceProvider);
<#
    }
    else if (HasDefaultConstructor(type))
    {
#>
            if (existingInstance == null)
                existingInstance = new <#= className #>();
<#
    }
    foreach (var member in members)
    {
        var memberType = GetMemberType(member);
        var memberTypeName = GetMemberTypeName(member);
        var primitiveTypeName = GetPrimitiveTypeName(GetMemberType(member));
        var isSharedResource = IsMemberSharedResource(member);

        if (primitiveTypeName != null)
        {
#>
            existingInstance.<#= member.Name #> = input.Read<#= primitiveTypeName #>();
<#
        }
        else if (isSharedResource)
        {
#>
            existingInstance.<#= member.Name #> = input.ReadString();
<#
        }
        else if (IsCollection(memberType) && !CanSet(member) && !HasContentSerializerAttribute(member))
        {
#>
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; ++i)
                    existingInstance.<#= member.Name #>.Add(input.ReadObject<<#= GetClassFullName(GetCollectionType(memberType)) #>>());
            }
<#
        }
        else if (IsDictionary(memberType) && !CanSet(member) && !HasContentSerializerAttribute(member))
        {
            var dictionaryType = GetDictionaryType(memberType);
#>
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; ++i)
                    existingInstance.<#= member.Name #>.Add(
                        input.ReadObject<<#= GetClassFullName(dictionaryType[0]) #>>(),
                        input.ReadObject<<#= GetClassFullName(dictionaryType[1]) #>>());
            }
<#
        }
        else
        {
#>
            existingInstance.<#= member.Name #> = input.ReadObject<<#= memberTypeName #>>();
<#
        }
    }
#>
            return existingInstance;
        }
    }
<#
        if (notSupportedByWindowsPhone)
        {
#>
#endif
<#
        }
    }
#>
}
<#
    }
#>
#endif