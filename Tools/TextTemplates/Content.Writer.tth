<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------
<#@ include file="Content.tth" #>
<#
    var assembly = Assembly.LoadFrom(Host.ResolvePath(assemblyFile));  
    var phoneAssemblyFile = assemblyFile.Replace("x86", "Windows Phone");
    var phoneAssembly = System.IO.File.Exists(phoneAssemblyFile) ? Assembly.LoadFrom(Host.ResolvePath(phoneAssemblyFile)) : null;
#>
#if !TEXT_TEMPLATE
<#
    var phoneTypes = phoneAssembly != null ? FindContentSerializableTypes(phoneAssembly) : Enumerable.Empty<Type>();
    foreach (var namespaceGroup in FindContentSerializableTypes(assembly).GroupBy(t => GetContentPipelineNamespace(t))
                                                                         .OrderBy(g => g.Key))
    {
#>
namespace <#= namespaceGroup.Key #>
{
<#
    foreach (var type in namespaceGroup.OrderBy(t => GetClassName(t)))
    {
        var className = GetClassName(type);
        var classFullName = GetClassFullName(type);
        var members = FindContentSerializableMembers(type).ToArray();
        var phoneType = phoneTypes.Where(t => t.Name == type.Name).FirstOrDefault();
        var phoneMembers = phoneType != null ? FindContentSerializableMembers(phoneType).ToArray() : Enumerable.Empty<MemberInfo>();
#>
    /// <summary>
    /// Content writer for <c><#= type.Name #></c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Writer.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter]
    partial class <#= AppendClassName(className, "Writer") #> : Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentTypeWriter<<#= classFullName #>>
    {
        protected override void Write(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter output, <#= classFullName #> value)
        {
<#
    foreach (var member in members)
    {
        var memberType = GetMemberType(member);
        var memberTypeName = GetMemberTypeName(member);
        var primitiveTypeName = GetPrimitiveTypeName(GetMemberType(member));
        var isSharedResource = IsMemberSharedResource(member);  
        var supportedByPhone = phoneMembers.Any(m => m.Name == member.Name);
        if (!supportedByPhone)
        {
#>
            if (output.TargetPlatform != Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.WindowsPhone)
<#
        }

        if (primitiveTypeName != null)
        {
#>
            output.Write(value.<#= member.Name #>);
<#
        }
        else if (isSharedResource)
        {
#>
            output.Write(value.<#= member.Name #> ?? "");
<#
        }
        else if (IsCollection(memberType) && !CanSet(member) && !HasContentSerializerAttribute(member))
        {
#>
            {
                output.Write(value.<#= member.Name #>.Count);
                for (var i = 0; i < value.<#= member.Name #>.Count; ++i)
                    output.WriteObject(value.<#= member.Name #>[i]);
            }
<#
        }
        else if (IsDictionary(memberType) && !CanSet(member) && !HasContentSerializerAttribute(member))
        {
#>
            {
                output.Write(value.<#= member.Name #>.Count);
                foreach (var pair in value.<#= member.Name #>)
                {
                    output.WriteObject(pair.Key);
                    output.WriteObject(pair.Value);
                }
            }
<#
        }
        else if (memberType.IsGenericType && memberType.GetGenericTypeDefinition() == typeof(Nullable<>))
        {
#>
            output.WriteObject(value.<#= member.Name #>);
<#
        }
        else
        {
#>
            WriteObject(output, value, "<#= member.Name #>", value.<#= member.Name #>);
<#
        }
    }
#>
        }
        
        private void WriteObject(Microsoft.Xna.Framework.Content.Pipeline.Serialization.Compiler.ContentWriter output, System.Object parent, string member, System.Object value)
        {
            var propertyInstance = new Nine.Content.Pipeline.Xaml.PropertyInstance(parent, member);
            var serializationData = Nine.Content.Pipeline.Xaml.XamlSerializer.SerializationData;
            if (serializationData.ContainsKey(propertyInstance))
                output.WriteObject(serializationData[propertyInstance]);
            else
                output.WriteObject(value);
        }

        public override string GetRuntimeReader(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform targetPlatform)
        {
<#
            if (phoneType == null)
            {
#>
            if (targetPlatform == Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.WindowsPhone)
                return "Nine.Content.NullReader, Nine, Version=1.4.0.0, Culture=neutral, PublicKeyToken=ed8336b5652212a9";        
<#
            }
#>
            return "<#= GetContentReaderAssemblyQualifiedName(type) #>";
        }

        public override string GetRuntimeType(Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform targetPlatform)
        {
<#
            if (phoneType == null)
            {
#>
            if (targetPlatform == Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform.WindowsPhone)
                return "System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, publicKeyToken=b77a5c561934e089";
<#
            }
#>
            return "<#= GetContentRuntimeTypeAssemblyQualifiedName(type) #>";
        }
    }
<#
    }
#>
}
<#
    }
#>
#endif