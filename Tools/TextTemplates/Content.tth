<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.Xna.Framework" #>
<#@ assembly name="Microsoft.Xna.Framework.Graphics" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Xna.Framework" #>
<#@ import namespace="Microsoft.Xna.Framework.Content" #>
<#@ import namespace="Microsoft.Xna.Framework.Graphics" #>
<#@ import namespace="System.Windows.Forms" #>
<#+
        class KnownContentTypes
        {
            public static List<string> ExcludedTypes = new List<string>();
            public static Dictionary<string, string> NamespaceMapping = new Dictionary<string, string>();
            public static Dictionary<string, string> TypeMapping = new Dictionary<string, string>();
            public static Dictionary<string, string> TypeConverterMapping = new Dictionary<string, string>();
            public static Dictionary<Type, string> PrimitiveTypes = new Dictionary<Type, string>();

            static KnownContentTypes()
            {
                NamespaceMapping.Add("Microsoft.Xna.Framework", "Microsoft.Xna.Framework.Content.Pipeline");
                NamespaceMapping.Add("Nine", "Nine.Content.Pipeline");

                ExcludedTypes.Add("Microsoft.Xna.Framework.Graphics.EffectTechnique");
                
                PrimitiveTypes.Add(typeof(char), "Char");
                PrimitiveTypes.Add(typeof(bool), "Boolean");
                PrimitiveTypes.Add(typeof(int), "Int32");
                PrimitiveTypes.Add(typeof(long), "Int64");
                PrimitiveTypes.Add(typeof(short), "Int16");
                PrimitiveTypes.Add(typeof(uint), "UInt32");
                PrimitiveTypes.Add(typeof(ulong), "UInt64");
                PrimitiveTypes.Add(typeof(ushort), "UInt16");
                PrimitiveTypes.Add(typeof(byte), "Byte");
                PrimitiveTypes.Add(typeof(sbyte), "SByte");
                PrimitiveTypes.Add(typeof(float), "Single");
                PrimitiveTypes.Add(typeof(double), "Double");
                PrimitiveTypes.Add(typeof(decimal), "Decimal");
                PrimitiveTypes.Add(typeof(Color), "Color");
                PrimitiveTypes.Add(typeof(Vector2), "Vector2");
                PrimitiveTypes.Add(typeof(Vector3), "Vector3");
                PrimitiveTypes.Add(typeof(Vector4), "Vector4");
                PrimitiveTypes.Add(typeof(Matrix), "Matrix");
                PrimitiveTypes.Add(typeof(Quaternion), "Quaternion");
                
                TypeMapping.Add("Microsoft.Xna.Framework.Curve", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Curve>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.BlendState", "Microsoft.Xna.Framework.Graphics.BlendState");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.SamplerState", "Microsoft.Xna.Framework.Graphics.SamplerState");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.Texture1D", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture1DContent>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.Texture2D", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture2DContent>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.Texture3D", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture3DContent>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.TextureCube", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureCubeContent>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.Texture", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.Model", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Processors.ModelContent>");
                TypeMapping.Add("Microsoft.Xna.Framework.Graphics.Effect", "Nine.Content.Pipeline.ContentReference<Microsoft.Xna.Framework.Content.Pipeline.Processors.CompiledEffectContent>");                
                TypeMapping.Add("Nine.Graphics.ParticleEffects.ParticleEffect", "Nine.Content.Pipeline.ContentReference<Nine.Content.Pipeline.Graphics.ParticleEffects.ParticleEffectContent>");
                TypeMapping.Add("Nine.Graphics.ParticleEffects.ParticleEffectCollection", "System.Collections.Generic.List<Nine.Content.Pipeline.Graphics.ParticleEffects.ParticleEffectContent>");
                TypeMapping.Add("Nine.Graphics.ScreenEffects.ScreenEffect", "Nine.Content.Pipeline.ContentReference<Nine.Content.Pipeline.Graphics.ScreenEffects.ScreenEffectContent>");
                TypeMapping.Add("Nine.Graphics.Heightmap", "Nine.Content.Pipeline.ContentReference<Nine.Graphics.Heightmap>");
                TypeMapping.Add("Nine.Graphics.TextureList", "Nine.Content.Pipeline.ContentReference<Nine.Content.Pipeline.Graphics.TextureListContent>");
                TypeMapping.Add("Nine.Graphics.Effects.LinkedEffectPart", "Nine.Content.Pipeline.Graphics.Effects.LinkedEffectPartContent");
                TypeMapping.Add("Nine.Graphics.ObjectModel.Scene", "Nine.Content.Pipeline.ContentReference<Nine.Content.Pipeline.Graphics.ObjectModel.SceneContent>");
                TypeMapping.Add("Nine.Graphics.ObjectModel.Transformable", "System.Object");
                TypeMapping.Add("Nine.Animations.TweenAnimation`1[[Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553]]", "Nine.Content.Pipeline.Animations.TweenAnimationContent<Microsoft.Xna.Framework.Vector3>");                
                TypeMapping.Add("Nine.Animations.TweenAnimation`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]", "Nine.Content.Pipeline.Animations.TweenAnimationContent<System.Single>");                

                TypeConverterMapping.Add("Nine.ICurve", "Nine.Content.Pipeline.Design.CurveConverter");
                TypeConverterMapping.Add("Microsoft.Xna.Framework.Graphics.BlendState", "Nine.Content.Pipeline.Design.BlendStateConverter");
            }
        }

        IEnumerable<Type> FindContentSerializableTypes(Assembly assembly)
        {
            return from type in assembly.GetTypes()
                   where !HasNotContentSerializableAttribute(type) && HasContentSerializableAttribute(type) && !type.IsAbstract && !type.IsInterface
                   select type;
        }

        IEnumerable<MemberInfo> FindContentSerializableMembers(Type type)
        {
            var result = (from field in type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                    where IsContentSerializable(field)
                    select field).Cast<MemberInfo>().Concat(
                        from publicProperty in type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                        where IsContentSerializable(publicProperty)
                        select publicProperty).ToArray();
            
            // Make sure attached properties are the last to serialize
            return result.Where(m => m.Name != "AttachedProperties").Concat(result.Where(m => m.Name == "AttachedProperties"));
        }

        bool HasContentSerializableType(Type type)
        {
            if (type == null || type.IsAbstract || type.IsInterface)
                return false;
            //if (type.BaseType == typeof(Effect) && type.IsPublic && HasDefaultPublicGraphicsDeviceConstructor(type))
            //    return true;
            return MemberHasContentSerializerAttribute(type);
        }

        bool HasContentSerializableAttribute(Type type)
        {
            if (type == null || type.IsInterface)
                return false;
            return type.GetCustomAttributes(true).Count(a => a.GetType().FullName == "Nine.ContentSerializableAttribute") > 0;
        }

        bool HasNotContentSerializableAttribute(Type type)
        {
            if (type == null || type.IsInterface)
                return false;
            return type.GetCustomAttributes(false).Count(a => a.GetType().FullName == "Nine.NotContentSerializableAttribute") > 0;
        }

        bool IsContentSerializable(Type type)
        {
            if (type == null || string.IsNullOrEmpty(type.FullName))
                return false;
            if (KnownContentTypes.ExcludedTypes.Contains(type.FullName))
                return false;
            if (type.IsValueType || type.IsEnum || type == typeof(string) || type == typeof(object) || type.IsPrimitive || type.IsInterface || type.IsAbstract)
                return true;
            if (type.IsArray)
                return IsContentSerializable(type.GetElementType());
            return IsKnownType(type) || MemberHasContentSerializerAttribute(type) || HasContentSerializableAttribute(type);
        }

        bool IsContentSerializable(FieldInfo field)
        {
            if (field == null || HasContentSerializerIgnoreAttribute(field))
                return false;
            if (HasContentSerializerAttribute(field))
                return true;
            return field.IsPublic && IsContentSerializable(field.FieldType);
        }

        bool IsContentSerializable(PropertyInfo property)
        {
            if (property == null || HasContentSerializerIgnoreAttribute(property))
                return false;
            if (HasContentSerializerAttribute(property))
                return true;
            if (property.GetIndexParameters().Length > 0)
                return false;
            if (property.GetGetMethod() != null)
            {
                if (property.GetSetMethod() != null)
                    return IsContentSerializable(property.PropertyType);
                return IsCollection(property.PropertyType) || IsDictionary(property.PropertyType);
            }
            return false;
        }

        bool CanSet(MemberInfo member)
        {
            return member is FieldInfo ||
                 ((member is PropertyInfo) && ((PropertyInfo)member).GetSetMethod() != null);
        }

        bool MemberHasContentSerializerAttribute(Type type)
        {
            return type.FindMembers(MemberTypes.Property | MemberTypes.Field,
                                    BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,
                   (member, e) => member.GetCustomAttributes(typeof(ContentSerializerAttribute), false).Length > 0, null).Length > 0;
        }

        bool HasContentSerializerAttribute(MemberInfo member)
        {
            return member.IsDefined(typeof(ContentSerializerAttribute), true);
        }

        bool HasContentSerializerIgnoreAttribute(MemberInfo member)
        {
            return member.IsDefined(typeof(ContentSerializerIgnoreAttribute), false);
        }

        bool IsKnownType(Type type)
        {
            return KnownContentTypes.TypeMapping.ContainsKey(type.FullName);
        }

        string GetKnownContentType(Type type)
        {
            return KnownContentTypes.TypeMapping[type.FullName];
        }

        bool IsCollection(Type type)
        {
            return !IsDictionary(type) &&
                   !(typeof(Array).IsAssignableFrom(type)) && !type.Name.Contains("ReadOnly") &&
                     type.FindInterfaces((t, o) => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(ICollection<>), null).Length > 0;
        }

        Type GetCollectionType(Type type)
        {
            var i = type.FindInterfaces((t, o) => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(ICollection<>), null).FirstOrDefault();
            if (i == null)
                return null;
            return i.GetGenericArguments()[0];
        }

        bool IsDictionary(Type type)
        {
            return FindDictionaryInterface(type) != null;
        }

        Type[] GetDictionaryType(Type type)
        {
            var i = FindDictionaryInterface(type);
            if (i == null)
                return null;
            return i.GetGenericArguments();
        }

        Type FindDictionaryInterface(Type type)
        {
            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IDictionary<,>))
                return type;
            return type.FindInterfaces((t, o) => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(IDictionary<,>), null).FirstOrDefault();
        }

        string GetContentPipelineNamespace(Type type)
        {
            var name = type.Namespace;
            foreach (var pair in KnownContentTypes.NamespaceMapping)
                name = name.Replace(pair.Key, pair.Value);
            return name;
        }

        string GetClassFullName(Type type)
        {
            var count = 0;
            var name = type.Name;
            var index = name.IndexOf('`');
            if (index >= 0)
            {
                name = name.Remove(index, 1);
                count = Convert.ToInt32(name[index].ToString());
                name = name.Remove(index, 1);
            }
            if (type.IsGenericTypeDefinition)
            {
                if (count == 1)
                {
                    name = name + "<T>";
                }
                else if (count > 1)
                {
                    name += "<";
                    for (var i = 0; i < count; i++)
                    {
                        name += "T" + (i + 1);
                        if (i != count - 1)
                            name += ", ";
                    }
                    name += ">";
                }
            }
            else if (type.IsGenericType)
            {
                name += "<";
                for (var i = 0; i < count; i++)
                {
                    name += GetClassFullName(type.GetGenericArguments()[i]);
                    if (i != count - 1)
                        name += ", ";
                }
                name += ">";
            }
            return type.IsGenericParameter ? name : type.Namespace + "." + name;
        }

        string GetClassName(Type type)
        {
            var className = GetClassFullName(type);
            var generic = className.IndexOf('<');
            return generic > 0 ? className.Substring(0, generic).Split('.').Last() + className.Substring(generic, className.Length - generic)
                               : className.Split('.').Last();
        }
        
        string GetContentClassFullName(Type type)
        {
            return GetContentClassFullName(type, true);
        }

        string GetContentClassFullName(Type type, bool isField)
        {
            if (type.IsGenericParameter)
                return type.Name;
            if (type.IsValueType || type.IsEnum || type.IsPrimitive || type == typeof(string))
                return GetClassFullName(type);
            if (isField && IsKnownType(type))
                return GetKnownContentType(type);
            if (isField && IsDictionary(type))
                return "System.Collections.Generic.Dictionary<" + GetContentClassFullName(GetDictionaryType(type)[0]) + ", "
                                                                + GetContentClassFullName(GetDictionaryType(type)[1]) + ">";
            if (isField && IsCollection(type))
                return "System.Collections.Generic.List<" + GetContentClassFullName(GetCollectionType(type)) + ">";
            if (isField && type.IsArray)
                return GetContentClassFullName(type.GetElementType()) + "[]";
            if (type.IsInterface || type.IsAbstract)
                return "System.Object";
            if (isField && !(!HasNotContentSerializableAttribute(type) && (HasContentSerializableType(type) || HasContentSerializableAttribute(type))))
                return GetClassFullName(type);

            var count = 0;
            var name = type.FullName;
            var index = name.IndexOf('`');
            if (index >= 0)
            {
                name = name.Remove(index, 1);
                count = Convert.ToInt32(name[index].ToString());
                name = name.Remove(index, 1);
            }
            if (!(type.IsGenericType && !type.IsGenericTypeDefinition) && (!isField || (!IsCollection(type) && !IsDictionary(type))))
                name = name + "Content";
            if (type.IsGenericTypeDefinition)
            {
                if (count == 1)
                {
                    name = name + "<T>";
                }
                else if (count > 1)
                {
                    name += "<";
                    for (var i = 0; i < count; i++)
                    {
                        name += "T" + (i + 1);
                        if (i != count - 1)
                            name += ", ";
                    }
                    name += ">";
                }
            }
            else if (type.IsGenericType)
            {
                name += "<";
                for (var i = 0; i < count; i++)
                {
                    name += GetContentClassFullName(type.GetGenericArguments()[i]);
                    if (i != count - 1)
                        name += ", ";
                }
                name += ">";
            }
            return name.Replace(type.Namespace, GetContentPipelineNamespace(type));
        }

        string GetContentClassName(Type type)
        {
            var className = GetContentClassFullName(type, false);
            var generic = className.IndexOf('<');
            return generic > 0 ? className.Substring(0, generic).Split('.').Last() + className.Substring(generic, className.Length - generic)
                               : className.Split('.').Last();
        }

        string GetContentClassConstructorName(Type type)
        {
            var name = type.Name;
            var index = name.IndexOf('`');
            if (index >= 0)
            {
                name = name.Remove(index, 2);
            }
            return name + "Content";
        }

        string AppendClassName(string className, string append)
        {
            var generic = className.IndexOf('<');
            if (generic < 0)
                generic = className.IndexOf('`');
            return generic > 0 ? className.Substring(0, generic) + append + className.Substring(generic, className.Length - generic)
                               : className + append;
        }

        Type GetMemberType(MemberInfo member)
        {
            if (member is PropertyInfo)
                return ((PropertyInfo)member).PropertyType;
            if (member is FieldInfo)
                return ((FieldInfo)member).FieldType;
            return null;
        }

        string GetMemberTypeName(MemberInfo member)
        {
            return GetClassFullName(GetMemberType(member));
        }

        string GetMemberContentTypeName(MemberInfo member)
        {
            return GetContentClassFullName(GetMemberType(member));
        }        

        string GetMemberFieldName(MemberInfo member)
        {
            var attrib = member.GetCustomAttributes(typeof(ContentSerializerAttribute), false).OfType<ContentSerializerAttribute>().FirstOrDefault();
            if (attrib != null && !string.IsNullOrEmpty(attrib.ElementName))
                return attrib.ElementName;
            return member.Name;
        }

        bool IsMemberSharedResource(MemberInfo member)
        {
            var attrib = member.GetCustomAttributes(typeof(ContentSerializerAttribute), false).OfType<ContentSerializerAttribute>().FirstOrDefault();
            return attrib != null && attrib.SharedResource;
        }

        bool CanSetMember(MemberInfo member)
        {
            return true;
            //return member
        }

        object GetValue(MemberInfo member, object obj)
        {
            if (member is PropertyInfo)
                return ((PropertyInfo)member).GetValue(obj, null);
            if (member is FieldInfo)
                return ((FieldInfo)member).GetValue(obj);
            return null;
        }

        object TryGetDefaultValue(Type declaringType, MemberInfo member)
        {
            if (member == null)
                return null;
            var type = GetMemberType(member);
            if (type == null)
                return null;
            if (declaringType.IsGenericTypeDefinition)
            {
                declaringType = declaringType.MakeGenericType(typeof(int));
                member = declaringType.GetMember(member.Name)[0];
            }
            object obj = null;
            if (HasDefaultGraphicsDeviceConstructor(declaringType))
            {
                try
                {
                    var cons = declaringType.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null,
                                                         new[] { typeof(GraphicsDevice) }, null);
                    obj = cons.Invoke(new object[1] { CreateDummyGraphicsDevice() });
                }
                catch { }
            }
            else if (HasDefaultConstructor(declaringType))
            {
                try
                {
                    var cons = declaringType.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null,
                                                         new Type[0], null);
                    obj = cons.Invoke(new object[0]);
                }
                catch { }
            }
            if (obj == null)
                return null;
            try
            {
                return GetValue(member, obj);
            }
            catch 
            {
                return null;
            }
        }

        string TryGetDefaultValueString(Type declaringType, MemberInfo member)
        {
            try
            {
                var type = GetMemberType(member);
                if (type == typeof(string) || (TypeDescriptor.GetConverter(type).CanConvertFrom(typeof(string)) &&
                                               TypeDescriptor.GetConverter(type).CanConvertTo(typeof(string)) && !type.IsGenericType))
                {
                    return TypeDescriptor.GetConverter(type).ConvertToInvariantString(TryGetDefaultValue(declaringType, member));
                }
                return null;
            }
            catch
            {
                return null;
            }
        }

        bool HasDefaultConstructor(Type type)
        {
            return type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic,
                                       null, new Type[0], null) != null;
        }

        bool HasDefaultPublicConstructor(Type type)
        {
            return type.GetConstructor(BindingFlags.Instance | BindingFlags.Public,
                                       null, new Type[0], null) != null;
        }

        bool HasDefaultGraphicsDeviceConstructor(Type type)
        {
            return type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic, 
                                       null, new Type[] { typeof(GraphicsDevice) }, null) != null;
        }

        bool HasDefaultPublicGraphicsDeviceConstructor(Type type)
        {
            return type.GetConstructor(BindingFlags.Instance | BindingFlags.Public,
                                       null, new Type[] { typeof(GraphicsDevice) }, null) != null;
        }

        string GetPrimitiveTypeName(Type type)
        {
            if (KnownContentTypes.PrimitiveTypes.ContainsKey(type))
                return KnownContentTypes.PrimitiveTypes[type];
            return null;
        }

        string GetTypeConverter(MemberInfo member)
        {
            try
            {
                var type = GetMemberType(member);
                if (KnownContentTypes.TypeConverterMapping.ContainsKey(type.FullName))
                    return KnownContentTypes.TypeConverterMapping[type.FullName];
                return null;
            }
            catch
            {
                return null;
            }
        }

        GraphicsDevice CreateDummyGraphicsDevice()
        {
            if (device == null)
            {
                // Create graphics device
                Form dummy = new Form();

                PresentationParameters parameters = new PresentationParameters();
                parameters.BackBufferWidth = 1;
                parameters.BackBufferHeight = 1;
                parameters.DeviceWindowHandle = dummy.Handle;

                GraphicsAdapter.UseNullDevice = true;
                device = new GraphicsDevice(GraphicsAdapter.DefaultAdapter, GraphicsProfile.HiDef, parameters);
            }
            return device;
        }
        static GraphicsDevice device;

        string GetContentReaderAssemblyQualifiedName(Type type)
        {
            var list = type.AssemblyQualifiedName.Split(',').ToList();
            if (type.IsGenericType && type.IsGenericTypeDefinition)
                list[0] += "[\" + " + string.Join(" + ", type.GetGenericArguments().Select(t => "string.Format(\"[{0}]\", typeof(" + t.Name + ").AssemblyQualifiedName)")) + " + \"]";
            list[0] = AppendClassName(list[0], "Reader");
            return string.Join(",", list);
        }

        string GetContentRuntimeTypeAssemblyQualifiedName(Type type)
        {
            var list = type.AssemblyQualifiedName.Split(',').ToList();
            if (type.IsGenericType && type.IsGenericTypeDefinition)
                list[0] += "[\" + " + string.Join(" + ", type.GetGenericArguments().Select(t => "string.Format(\"[{0}]\", typeof(" + t.Name + ").AssemblyQualifiedName)")) + " + \"]";
            return string.Join(",", list);
        }
        
        IEnumerable<Type> FindEffectInstanceTypes(Assembly assembly)
        {
            foreach (var t in from type in assembly.GetTypes()
                              where type.BaseType == typeof(Effect) && HasDefaultPublicGraphicsDeviceConstructor(type) &&
                                    type.Name == "DecalEffect"
                              select type)
            {
                yield return t;
            }

            //yield return typeof(BasicEffect);
            yield return typeof(SkinnedEffect);
            yield return typeof(EnvironmentMapEffect);
            yield return typeof(DualTextureEffect);
            yield return typeof(AlphaTestEffect);
        }
#>