// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------


#if !TEXT_TEMPLATE
namespace Nine.Graphics
{
    /// <summary>
    /// Effect instance for <c>AlphaTestEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class AlphaTestEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying AlphaTestEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Microsoft.Xna.Framework.Graphics.AlphaTestEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Alpha 
        { 
            get { return _Alpha; }
            set { _Alpha = value; dirtyFlag |= AlphaDirtyFlag; }
        }
        private System.Single _Alpha;
        const uint AlphaDirtyFlag = 1 << 0;
        static AlphaTestEffectInstance AlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.CompareFunction AlphaFunction 
        { 
            get { return _AlphaFunction; }
            set { _AlphaFunction = value; dirtyFlag |= AlphaFunctionDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.CompareFunction _AlphaFunction;
        const uint AlphaFunctionDirtyFlag = 1 << 1;
        static AlphaTestEffectInstance AlphaFunctionLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 2;
        static AlphaTestEffectInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 FogColor 
        { 
            get { return _FogColor; }
            set { _FogColor = value; dirtyFlag |= FogColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _FogColor;
        const uint FogColorDirtyFlag = 1 << 3;
        static AlphaTestEffectInstance FogColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean FogEnabled 
        { 
            get { return _FogEnabled; }
            set { _FogEnabled = value; dirtyFlag |= FogEnabledDirtyFlag; }
        }
        private System.Boolean _FogEnabled;
        const uint FogEnabledDirtyFlag = 1 << 4;
        static AlphaTestEffectInstance FogEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogEnd 
        { 
            get { return _FogEnd; }
            set { _FogEnd = value; dirtyFlag |= FogEndDirtyFlag; }
        }
        private System.Single _FogEnd;
        const uint FogEndDirtyFlag = 1 << 5;
        static AlphaTestEffectInstance FogEndLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogStart 
        { 
            get { return _FogStart; }
            set { _FogStart = value; dirtyFlag |= FogStartDirtyFlag; }
        }
        private System.Single _FogStart;
        const uint FogStartDirtyFlag = 1 << 6;
        static AlphaTestEffectInstance FogStartLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 ReferenceAlpha 
        { 
            get { return _ReferenceAlpha; }
            set { _ReferenceAlpha = value; dirtyFlag |= ReferenceAlphaDirtyFlag; }
        }
        private System.Int32 _ReferenceAlpha;
        const uint ReferenceAlphaDirtyFlag = 1 << 7;
        static AlphaTestEffectInstance ReferenceAlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 8;
        static AlphaTestEffectInstance TextureLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean VertexColorEnabled 
        { 
            get { return _VertexColorEnabled; }
            set { _VertexColorEnabled = value; dirtyFlag |= VertexColorEnabledDirtyFlag; }
        }
        private System.Boolean _VertexColorEnabled;
        const uint VertexColorEnabledDirtyFlag = 1 << 9;
        static AlphaTestEffectInstance VertexColorEnabledLastModifiedBy = null;

        private AlphaTestEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>AlphaTestEffectInstance</c>.
        /// </summary>
        public AlphaTestEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Microsoft.Xna.Framework.Graphics.AlphaTestEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>AlphaTestEffectInstance</c>.
        /// </summary>
        public AlphaTestEffectInstance(Microsoft.Xna.Framework.Graphics.AlphaTestEffect effect)
        {
            this.effect = effect;
            this._Alpha = effect.Alpha;
            this._AlphaFunction = effect.AlphaFunction;
            this._DiffuseColor = effect.DiffuseColor;
            this._FogColor = effect.FogColor;
            this._FogEnabled = effect.FogEnabled;
            this._FogEnd = effect.FogEnd;
            this._FogStart = effect.FogStart;
            this._ReferenceAlpha = effect.ReferenceAlpha;
            this._Texture = effect.Texture;
            this._VertexColorEnabled = effect.VertexColorEnabled;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying AlphaTestEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AlphaDirtyFlag) != 0 ||
                (AlphaLastModifiedBy != null && AlphaLastModifiedBy != this))
            {
                this.effect.Alpha = this.Alpha;
                AlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & AlphaFunctionDirtyFlag) != 0 ||
                (AlphaFunctionLastModifiedBy != null && AlphaFunctionLastModifiedBy != this))
            {
                this.effect.AlphaFunction = this.AlphaFunction;
                AlphaFunctionLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogColorDirtyFlag) != 0 ||
                (FogColorLastModifiedBy != null && FogColorLastModifiedBy != this))
            {
                this.effect.FogColor = this.FogColor;
                FogColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEnabledDirtyFlag) != 0 ||
                (FogEnabledLastModifiedBy != null && FogEnabledLastModifiedBy != this))
            {
                this.effect.FogEnabled = this.FogEnabled;
                FogEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEndDirtyFlag) != 0 ||
                (FogEndLastModifiedBy != null && FogEndLastModifiedBy != this))
            {
                this.effect.FogEnd = this.FogEnd;
                FogEndLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogStartDirtyFlag) != 0 ||
                (FogStartLastModifiedBy != null && FogStartLastModifiedBy != this))
            {
                this.effect.FogStart = this.FogStart;
                FogStartLastModifiedBy = this;
            }
            if ((this.dirtyFlag & ReferenceAlphaDirtyFlag) != 0 ||
                (ReferenceAlphaLastModifiedBy != null && ReferenceAlphaLastModifiedBy != this))
            {
                this.effect.ReferenceAlpha = this.ReferenceAlpha;
                ReferenceAlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            if ((this.dirtyFlag & VertexColorEnabledDirtyFlag) != 0 ||
                (VertexColorEnabledLastModifiedBy != null && VertexColorEnabledLastModifiedBy != this))
            {
                this.effect.VertexColorEnabled = this.VertexColorEnabled;
                VertexColorEnabledLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of AlphaTestEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new AlphaTestEffectInstance();
            cloned.effect = this.effect;
            cloned._Alpha = this._Alpha;
            cloned._AlphaFunction = this._AlphaFunction;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._FogColor = this._FogColor;
            cloned._FogEnabled = this._FogEnabled;
            cloned._FogEnd = this._FogEnd;
            cloned._FogStart = this._FogStart;
            cloned._ReferenceAlpha = this._ReferenceAlpha;
            cloned._Texture = this._Texture;
            cloned._VertexColorEnabled = this._VertexColorEnabled;
            return cloned;
        }
    }
    /// <summary>
    /// Effect instance for <c>BasicEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class BasicEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying BasicEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Microsoft.Xna.Framework.Graphics.BasicEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Alpha 
        { 
            get { return _Alpha; }
            set { _Alpha = value; dirtyFlag |= AlphaDirtyFlag; }
        }
        private System.Single _Alpha;
        const uint AlphaDirtyFlag = 1 << 0;
        static BasicEffectInstance AlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 AmbientLightColor 
        { 
            get { return _AmbientLightColor; }
            set { _AmbientLightColor = value; dirtyFlag |= AmbientLightColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _AmbientLightColor;
        const uint AmbientLightColorDirtyFlag = 1 << 1;
        static BasicEffectInstance AmbientLightColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 2;
        static BasicEffectInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 EmissiveColor 
        { 
            get { return _EmissiveColor; }
            set { _EmissiveColor = value; dirtyFlag |= EmissiveColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _EmissiveColor;
        const uint EmissiveColorDirtyFlag = 1 << 3;
        static BasicEffectInstance EmissiveColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 FogColor 
        { 
            get { return _FogColor; }
            set { _FogColor = value; dirtyFlag |= FogColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _FogColor;
        const uint FogColorDirtyFlag = 1 << 4;
        static BasicEffectInstance FogColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean FogEnabled 
        { 
            get { return _FogEnabled; }
            set { _FogEnabled = value; dirtyFlag |= FogEnabledDirtyFlag; }
        }
        private System.Boolean _FogEnabled;
        const uint FogEnabledDirtyFlag = 1 << 5;
        static BasicEffectInstance FogEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogEnd 
        { 
            get { return _FogEnd; }
            set { _FogEnd = value; dirtyFlag |= FogEndDirtyFlag; }
        }
        private System.Single _FogEnd;
        const uint FogEndDirtyFlag = 1 << 6;
        static BasicEffectInstance FogEndLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogStart 
        { 
            get { return _FogStart; }
            set { _FogStart = value; dirtyFlag |= FogStartDirtyFlag; }
        }
        private System.Single _FogStart;
        const uint FogStartDirtyFlag = 1 << 7;
        static BasicEffectInstance FogStartLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean LightingEnabled 
        { 
            get { return _LightingEnabled; }
            set { _LightingEnabled = value; dirtyFlag |= LightingEnabledDirtyFlag; }
        }
        private System.Boolean _LightingEnabled;
        const uint LightingEnabledDirtyFlag = 1 << 8;
        static BasicEffectInstance LightingEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean PreferPerPixelLighting 
        { 
            get { return _PreferPerPixelLighting; }
            set { _PreferPerPixelLighting = value; dirtyFlag |= PreferPerPixelLightingDirtyFlag; }
        }
        private System.Boolean _PreferPerPixelLighting;
        const uint PreferPerPixelLightingDirtyFlag = 1 << 9;
        static BasicEffectInstance PreferPerPixelLightingLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 SpecularColor 
        { 
            get { return _SpecularColor; }
            set { _SpecularColor = value; dirtyFlag |= SpecularColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _SpecularColor;
        const uint SpecularColorDirtyFlag = 1 << 10;
        static BasicEffectInstance SpecularColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single SpecularPower 
        { 
            get { return _SpecularPower; }
            set { _SpecularPower = value; dirtyFlag |= SpecularPowerDirtyFlag; }
        }
        private System.Single _SpecularPower;
        const uint SpecularPowerDirtyFlag = 1 << 11;
        static BasicEffectInstance SpecularPowerLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 12;
        static BasicEffectInstance TextureLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean TextureEnabled 
        { 
            get { return _TextureEnabled; }
            set { _TextureEnabled = value; dirtyFlag |= TextureEnabledDirtyFlag; }
        }
        private System.Boolean _TextureEnabled;
        const uint TextureEnabledDirtyFlag = 1 << 13;
        static BasicEffectInstance TextureEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean VertexColorEnabled 
        { 
            get { return _VertexColorEnabled; }
            set { _VertexColorEnabled = value; dirtyFlag |= VertexColorEnabledDirtyFlag; }
        }
        private System.Boolean _VertexColorEnabled;
        const uint VertexColorEnabledDirtyFlag = 1 << 14;
        static BasicEffectInstance VertexColorEnabledLastModifiedBy = null;

        private BasicEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>BasicEffectInstance</c>.
        /// </summary>
        public BasicEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Microsoft.Xna.Framework.Graphics.BasicEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>BasicEffectInstance</c>.
        /// </summary>
        public BasicEffectInstance(Microsoft.Xna.Framework.Graphics.BasicEffect effect)
        {
            this.effect = effect;
            this._Alpha = effect.Alpha;
            this._AmbientLightColor = effect.AmbientLightColor;
            this._DiffuseColor = effect.DiffuseColor;
            this._EmissiveColor = effect.EmissiveColor;
            this._FogColor = effect.FogColor;
            this._FogEnabled = effect.FogEnabled;
            this._FogEnd = effect.FogEnd;
            this._FogStart = effect.FogStart;
            this._LightingEnabled = effect.LightingEnabled;
            this._PreferPerPixelLighting = effect.PreferPerPixelLighting;
            this._SpecularColor = effect.SpecularColor;
            this._SpecularPower = effect.SpecularPower;
            this._Texture = effect.Texture;
            this._TextureEnabled = effect.TextureEnabled;
            this._VertexColorEnabled = effect.VertexColorEnabled;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying BasicEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AlphaDirtyFlag) != 0 ||
                (AlphaLastModifiedBy != null && AlphaLastModifiedBy != this))
            {
                this.effect.Alpha = this.Alpha;
                AlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & AmbientLightColorDirtyFlag) != 0 ||
                (AmbientLightColorLastModifiedBy != null && AmbientLightColorLastModifiedBy != this))
            {
                this.effect.AmbientLightColor = this.AmbientLightColor;
                AmbientLightColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EmissiveColorDirtyFlag) != 0 ||
                (EmissiveColorLastModifiedBy != null && EmissiveColorLastModifiedBy != this))
            {
                this.effect.EmissiveColor = this.EmissiveColor;
                EmissiveColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogColorDirtyFlag) != 0 ||
                (FogColorLastModifiedBy != null && FogColorLastModifiedBy != this))
            {
                this.effect.FogColor = this.FogColor;
                FogColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEnabledDirtyFlag) != 0 ||
                (FogEnabledLastModifiedBy != null && FogEnabledLastModifiedBy != this))
            {
                this.effect.FogEnabled = this.FogEnabled;
                FogEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEndDirtyFlag) != 0 ||
                (FogEndLastModifiedBy != null && FogEndLastModifiedBy != this))
            {
                this.effect.FogEnd = this.FogEnd;
                FogEndLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogStartDirtyFlag) != 0 ||
                (FogStartLastModifiedBy != null && FogStartLastModifiedBy != this))
            {
                this.effect.FogStart = this.FogStart;
                FogStartLastModifiedBy = this;
            }
            if ((this.dirtyFlag & LightingEnabledDirtyFlag) != 0 ||
                (LightingEnabledLastModifiedBy != null && LightingEnabledLastModifiedBy != this))
            {
                this.effect.LightingEnabled = this.LightingEnabled;
                LightingEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & PreferPerPixelLightingDirtyFlag) != 0 ||
                (PreferPerPixelLightingLastModifiedBy != null && PreferPerPixelLightingLastModifiedBy != this))
            {
                this.effect.PreferPerPixelLighting = this.PreferPerPixelLighting;
                PreferPerPixelLightingLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularColorDirtyFlag) != 0 ||
                (SpecularColorLastModifiedBy != null && SpecularColorLastModifiedBy != this))
            {
                this.effect.SpecularColor = this.SpecularColor;
                SpecularColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularPowerDirtyFlag) != 0 ||
                (SpecularPowerLastModifiedBy != null && SpecularPowerLastModifiedBy != this))
            {
                this.effect.SpecularPower = this.SpecularPower;
                SpecularPowerLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureEnabledDirtyFlag) != 0 ||
                (TextureEnabledLastModifiedBy != null && TextureEnabledLastModifiedBy != this))
            {
                this.effect.TextureEnabled = this.TextureEnabled;
                TextureEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & VertexColorEnabledDirtyFlag) != 0 ||
                (VertexColorEnabledLastModifiedBy != null && VertexColorEnabledLastModifiedBy != this))
            {
                this.effect.VertexColorEnabled = this.VertexColorEnabled;
                VertexColorEnabledLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of BasicEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new BasicEffectInstance();
            cloned.effect = this.effect;
            cloned._Alpha = this._Alpha;
            cloned._AmbientLightColor = this._AmbientLightColor;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._EmissiveColor = this._EmissiveColor;
            cloned._FogColor = this._FogColor;
            cloned._FogEnabled = this._FogEnabled;
            cloned._FogEnd = this._FogEnd;
            cloned._FogStart = this._FogStart;
            cloned._LightingEnabled = this._LightingEnabled;
            cloned._PreferPerPixelLighting = this._PreferPerPixelLighting;
            cloned._SpecularColor = this._SpecularColor;
            cloned._SpecularPower = this._SpecularPower;
            cloned._Texture = this._Texture;
            cloned._TextureEnabled = this._TextureEnabled;
            cloned._VertexColorEnabled = this._VertexColorEnabled;
            return cloned;
        }
    }
    /// <summary>
    /// Effect instance for <c>DualTextureEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DualTextureEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DualTextureEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Microsoft.Xna.Framework.Graphics.DualTextureEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Alpha 
        { 
            get { return _Alpha; }
            set { _Alpha = value; dirtyFlag |= AlphaDirtyFlag; }
        }
        private System.Single _Alpha;
        const uint AlphaDirtyFlag = 1 << 0;
        static DualTextureEffectInstance AlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 1;
        static DualTextureEffectInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 FogColor 
        { 
            get { return _FogColor; }
            set { _FogColor = value; dirtyFlag |= FogColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _FogColor;
        const uint FogColorDirtyFlag = 1 << 2;
        static DualTextureEffectInstance FogColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean FogEnabled 
        { 
            get { return _FogEnabled; }
            set { _FogEnabled = value; dirtyFlag |= FogEnabledDirtyFlag; }
        }
        private System.Boolean _FogEnabled;
        const uint FogEnabledDirtyFlag = 1 << 3;
        static DualTextureEffectInstance FogEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogEnd 
        { 
            get { return _FogEnd; }
            set { _FogEnd = value; dirtyFlag |= FogEndDirtyFlag; }
        }
        private System.Single _FogEnd;
        const uint FogEndDirtyFlag = 1 << 4;
        static DualTextureEffectInstance FogEndLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogStart 
        { 
            get { return _FogStart; }
            set { _FogStart = value; dirtyFlag |= FogStartDirtyFlag; }
        }
        private System.Single _FogStart;
        const uint FogStartDirtyFlag = 1 << 5;
        static DualTextureEffectInstance FogStartLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 6;
        static DualTextureEffectInstance TextureLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture2 
        { 
            get { return _Texture2; }
            set { _Texture2 = value; dirtyFlag |= Texture2DirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture2;
        const uint Texture2DirtyFlag = 1 << 7;
        static DualTextureEffectInstance Texture2LastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean VertexColorEnabled 
        { 
            get { return _VertexColorEnabled; }
            set { _VertexColorEnabled = value; dirtyFlag |= VertexColorEnabledDirtyFlag; }
        }
        private System.Boolean _VertexColorEnabled;
        const uint VertexColorEnabledDirtyFlag = 1 << 8;
        static DualTextureEffectInstance VertexColorEnabledLastModifiedBy = null;

        private DualTextureEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DualTextureEffectInstance</c>.
        /// </summary>
        public DualTextureEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Microsoft.Xna.Framework.Graphics.DualTextureEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DualTextureEffectInstance</c>.
        /// </summary>
        public DualTextureEffectInstance(Microsoft.Xna.Framework.Graphics.DualTextureEffect effect)
        {
            this.effect = effect;
            this._Alpha = effect.Alpha;
            this._DiffuseColor = effect.DiffuseColor;
            this._FogColor = effect.FogColor;
            this._FogEnabled = effect.FogEnabled;
            this._FogEnd = effect.FogEnd;
            this._FogStart = effect.FogStart;
            this._Texture = effect.Texture;
            this._Texture2 = effect.Texture2;
            this._VertexColorEnabled = effect.VertexColorEnabled;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DualTextureEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AlphaDirtyFlag) != 0 ||
                (AlphaLastModifiedBy != null && AlphaLastModifiedBy != this))
            {
                this.effect.Alpha = this.Alpha;
                AlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogColorDirtyFlag) != 0 ||
                (FogColorLastModifiedBy != null && FogColorLastModifiedBy != this))
            {
                this.effect.FogColor = this.FogColor;
                FogColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEnabledDirtyFlag) != 0 ||
                (FogEnabledLastModifiedBy != null && FogEnabledLastModifiedBy != this))
            {
                this.effect.FogEnabled = this.FogEnabled;
                FogEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEndDirtyFlag) != 0 ||
                (FogEndLastModifiedBy != null && FogEndLastModifiedBy != this))
            {
                this.effect.FogEnd = this.FogEnd;
                FogEndLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogStartDirtyFlag) != 0 ||
                (FogStartLastModifiedBy != null && FogStartLastModifiedBy != this))
            {
                this.effect.FogStart = this.FogStart;
                FogStartLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            if ((this.dirtyFlag & Texture2DirtyFlag) != 0 ||
                (Texture2LastModifiedBy != null && Texture2LastModifiedBy != this))
            {
                this.effect.Texture2 = this.Texture2;
                Texture2LastModifiedBy = this;
            }
            if ((this.dirtyFlag & VertexColorEnabledDirtyFlag) != 0 ||
                (VertexColorEnabledLastModifiedBy != null && VertexColorEnabledLastModifiedBy != this))
            {
                this.effect.VertexColorEnabled = this.VertexColorEnabled;
                VertexColorEnabledLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DualTextureEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DualTextureEffectInstance();
            cloned.effect = this.effect;
            cloned._Alpha = this._Alpha;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._FogColor = this._FogColor;
            cloned._FogEnabled = this._FogEnabled;
            cloned._FogEnd = this._FogEnd;
            cloned._FogStart = this._FogStart;
            cloned._Texture = this._Texture;
            cloned._Texture2 = this._Texture2;
            cloned._VertexColorEnabled = this._VertexColorEnabled;
            return cloned;
        }
    }
    /// <summary>
    /// Effect instance for <c>EnvironmentMapEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class EnvironmentMapEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying EnvironmentMapEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Alpha 
        { 
            get { return _Alpha; }
            set { _Alpha = value; dirtyFlag |= AlphaDirtyFlag; }
        }
        private System.Single _Alpha;
        const uint AlphaDirtyFlag = 1 << 0;
        static EnvironmentMapEffectInstance AlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 AmbientLightColor 
        { 
            get { return _AmbientLightColor; }
            set { _AmbientLightColor = value; dirtyFlag |= AmbientLightColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _AmbientLightColor;
        const uint AmbientLightColorDirtyFlag = 1 << 1;
        static EnvironmentMapEffectInstance AmbientLightColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 2;
        static EnvironmentMapEffectInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 EmissiveColor 
        { 
            get { return _EmissiveColor; }
            set { _EmissiveColor = value; dirtyFlag |= EmissiveColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _EmissiveColor;
        const uint EmissiveColorDirtyFlag = 1 << 3;
        static EnvironmentMapEffectInstance EmissiveColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.TextureCube EnvironmentMap 
        { 
            get { return _EnvironmentMap; }
            set { _EnvironmentMap = value; dirtyFlag |= EnvironmentMapDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.TextureCube _EnvironmentMap;
        const uint EnvironmentMapDirtyFlag = 1 << 4;
        static EnvironmentMapEffectInstance EnvironmentMapLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single EnvironmentMapAmount 
        { 
            get { return _EnvironmentMapAmount; }
            set { _EnvironmentMapAmount = value; dirtyFlag |= EnvironmentMapAmountDirtyFlag; }
        }
        private System.Single _EnvironmentMapAmount;
        const uint EnvironmentMapAmountDirtyFlag = 1 << 5;
        static EnvironmentMapEffectInstance EnvironmentMapAmountLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 EnvironmentMapSpecular 
        { 
            get { return _EnvironmentMapSpecular; }
            set { _EnvironmentMapSpecular = value; dirtyFlag |= EnvironmentMapSpecularDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _EnvironmentMapSpecular;
        const uint EnvironmentMapSpecularDirtyFlag = 1 << 6;
        static EnvironmentMapEffectInstance EnvironmentMapSpecularLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 FogColor 
        { 
            get { return _FogColor; }
            set { _FogColor = value; dirtyFlag |= FogColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _FogColor;
        const uint FogColorDirtyFlag = 1 << 7;
        static EnvironmentMapEffectInstance FogColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean FogEnabled 
        { 
            get { return _FogEnabled; }
            set { _FogEnabled = value; dirtyFlag |= FogEnabledDirtyFlag; }
        }
        private System.Boolean _FogEnabled;
        const uint FogEnabledDirtyFlag = 1 << 8;
        static EnvironmentMapEffectInstance FogEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogEnd 
        { 
            get { return _FogEnd; }
            set { _FogEnd = value; dirtyFlag |= FogEndDirtyFlag; }
        }
        private System.Single _FogEnd;
        const uint FogEndDirtyFlag = 1 << 9;
        static EnvironmentMapEffectInstance FogEndLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogStart 
        { 
            get { return _FogStart; }
            set { _FogStart = value; dirtyFlag |= FogStartDirtyFlag; }
        }
        private System.Single _FogStart;
        const uint FogStartDirtyFlag = 1 << 10;
        static EnvironmentMapEffectInstance FogStartLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FresnelFactor 
        { 
            get { return _FresnelFactor; }
            set { _FresnelFactor = value; dirtyFlag |= FresnelFactorDirtyFlag; }
        }
        private System.Single _FresnelFactor;
        const uint FresnelFactorDirtyFlag = 1 << 11;
        static EnvironmentMapEffectInstance FresnelFactorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 12;
        static EnvironmentMapEffectInstance TextureLastModifiedBy = null;

        private EnvironmentMapEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>EnvironmentMapEffectInstance</c>.
        /// </summary>
        public EnvironmentMapEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>EnvironmentMapEffectInstance</c>.
        /// </summary>
        public EnvironmentMapEffectInstance(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect effect)
        {
            this.effect = effect;
            this._Alpha = effect.Alpha;
            this._AmbientLightColor = effect.AmbientLightColor;
            this._DiffuseColor = effect.DiffuseColor;
            this._EmissiveColor = effect.EmissiveColor;
            this._EnvironmentMap = effect.EnvironmentMap;
            this._EnvironmentMapAmount = effect.EnvironmentMapAmount;
            this._EnvironmentMapSpecular = effect.EnvironmentMapSpecular;
            this._FogColor = effect.FogColor;
            this._FogEnabled = effect.FogEnabled;
            this._FogEnd = effect.FogEnd;
            this._FogStart = effect.FogStart;
            this._FresnelFactor = effect.FresnelFactor;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying EnvironmentMapEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AlphaDirtyFlag) != 0 ||
                (AlphaLastModifiedBy != null && AlphaLastModifiedBy != this))
            {
                this.effect.Alpha = this.Alpha;
                AlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & AmbientLightColorDirtyFlag) != 0 ||
                (AmbientLightColorLastModifiedBy != null && AmbientLightColorLastModifiedBy != this))
            {
                this.effect.AmbientLightColor = this.AmbientLightColor;
                AmbientLightColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EmissiveColorDirtyFlag) != 0 ||
                (EmissiveColorLastModifiedBy != null && EmissiveColorLastModifiedBy != this))
            {
                this.effect.EmissiveColor = this.EmissiveColor;
                EmissiveColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EnvironmentMapDirtyFlag) != 0 ||
                (EnvironmentMapLastModifiedBy != null && EnvironmentMapLastModifiedBy != this))
            {
                this.effect.EnvironmentMap = this.EnvironmentMap;
                EnvironmentMapLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EnvironmentMapAmountDirtyFlag) != 0 ||
                (EnvironmentMapAmountLastModifiedBy != null && EnvironmentMapAmountLastModifiedBy != this))
            {
                this.effect.EnvironmentMapAmount = this.EnvironmentMapAmount;
                EnvironmentMapAmountLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EnvironmentMapSpecularDirtyFlag) != 0 ||
                (EnvironmentMapSpecularLastModifiedBy != null && EnvironmentMapSpecularLastModifiedBy != this))
            {
                this.effect.EnvironmentMapSpecular = this.EnvironmentMapSpecular;
                EnvironmentMapSpecularLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogColorDirtyFlag) != 0 ||
                (FogColorLastModifiedBy != null && FogColorLastModifiedBy != this))
            {
                this.effect.FogColor = this.FogColor;
                FogColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEnabledDirtyFlag) != 0 ||
                (FogEnabledLastModifiedBy != null && FogEnabledLastModifiedBy != this))
            {
                this.effect.FogEnabled = this.FogEnabled;
                FogEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEndDirtyFlag) != 0 ||
                (FogEndLastModifiedBy != null && FogEndLastModifiedBy != this))
            {
                this.effect.FogEnd = this.FogEnd;
                FogEndLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogStartDirtyFlag) != 0 ||
                (FogStartLastModifiedBy != null && FogStartLastModifiedBy != this))
            {
                this.effect.FogStart = this.FogStart;
                FogStartLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FresnelFactorDirtyFlag) != 0 ||
                (FresnelFactorLastModifiedBy != null && FresnelFactorLastModifiedBy != this))
            {
                this.effect.FresnelFactor = this.FresnelFactor;
                FresnelFactorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of EnvironmentMapEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new EnvironmentMapEffectInstance();
            cloned.effect = this.effect;
            cloned._Alpha = this._Alpha;
            cloned._AmbientLightColor = this._AmbientLightColor;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._EmissiveColor = this._EmissiveColor;
            cloned._EnvironmentMap = this._EnvironmentMap;
            cloned._EnvironmentMapAmount = this._EnvironmentMapAmount;
            cloned._EnvironmentMapSpecular = this._EnvironmentMapSpecular;
            cloned._FogColor = this._FogColor;
            cloned._FogEnabled = this._FogEnabled;
            cloned._FogEnd = this._FogEnd;
            cloned._FogStart = this._FogStart;
            cloned._FresnelFactor = this._FresnelFactor;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
    /// <summary>
    /// Effect instance for <c>SkinnedEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class SkinnedEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying SkinnedEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Microsoft.Xna.Framework.Graphics.SkinnedEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Alpha 
        { 
            get { return _Alpha; }
            set { _Alpha = value; dirtyFlag |= AlphaDirtyFlag; }
        }
        private System.Single _Alpha;
        const uint AlphaDirtyFlag = 1 << 0;
        static SkinnedEffectInstance AlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 AmbientLightColor 
        { 
            get { return _AmbientLightColor; }
            set { _AmbientLightColor = value; dirtyFlag |= AmbientLightColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _AmbientLightColor;
        const uint AmbientLightColorDirtyFlag = 1 << 1;
        static SkinnedEffectInstance AmbientLightColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 2;
        static SkinnedEffectInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 EmissiveColor 
        { 
            get { return _EmissiveColor; }
            set { _EmissiveColor = value; dirtyFlag |= EmissiveColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _EmissiveColor;
        const uint EmissiveColorDirtyFlag = 1 << 3;
        static SkinnedEffectInstance EmissiveColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 FogColor 
        { 
            get { return _FogColor; }
            set { _FogColor = value; dirtyFlag |= FogColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _FogColor;
        const uint FogColorDirtyFlag = 1 << 4;
        static SkinnedEffectInstance FogColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean FogEnabled 
        { 
            get { return _FogEnabled; }
            set { _FogEnabled = value; dirtyFlag |= FogEnabledDirtyFlag; }
        }
        private System.Boolean _FogEnabled;
        const uint FogEnabledDirtyFlag = 1 << 5;
        static SkinnedEffectInstance FogEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogEnd 
        { 
            get { return _FogEnd; }
            set { _FogEnd = value; dirtyFlag |= FogEndDirtyFlag; }
        }
        private System.Single _FogEnd;
        const uint FogEndDirtyFlag = 1 << 6;
        static SkinnedEffectInstance FogEndLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single FogStart 
        { 
            get { return _FogStart; }
            set { _FogStart = value; dirtyFlag |= FogStartDirtyFlag; }
        }
        private System.Single _FogStart;
        const uint FogStartDirtyFlag = 1 << 7;
        static SkinnedEffectInstance FogStartLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean PreferPerPixelLighting 
        { 
            get { return _PreferPerPixelLighting; }
            set { _PreferPerPixelLighting = value; dirtyFlag |= PreferPerPixelLightingDirtyFlag; }
        }
        private System.Boolean _PreferPerPixelLighting;
        const uint PreferPerPixelLightingDirtyFlag = 1 << 8;
        static SkinnedEffectInstance PreferPerPixelLightingLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 SpecularColor 
        { 
            get { return _SpecularColor; }
            set { _SpecularColor = value; dirtyFlag |= SpecularColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _SpecularColor;
        const uint SpecularColorDirtyFlag = 1 << 9;
        static SkinnedEffectInstance SpecularColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single SpecularPower 
        { 
            get { return _SpecularPower; }
            set { _SpecularPower = value; dirtyFlag |= SpecularPowerDirtyFlag; }
        }
        private System.Single _SpecularPower;
        const uint SpecularPowerDirtyFlag = 1 << 10;
        static SkinnedEffectInstance SpecularPowerLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 11;
        static SkinnedEffectInstance TextureLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Int32 WeightsPerVertex 
        { 
            get { return _WeightsPerVertex; }
            set { _WeightsPerVertex = value; dirtyFlag |= WeightsPerVertexDirtyFlag; }
        }
        private System.Int32 _WeightsPerVertex;
        const uint WeightsPerVertexDirtyFlag = 1 << 12;
        static SkinnedEffectInstance WeightsPerVertexLastModifiedBy = null;

        private SkinnedEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>SkinnedEffectInstance</c>.
        /// </summary>
        public SkinnedEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Microsoft.Xna.Framework.Graphics.SkinnedEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>SkinnedEffectInstance</c>.
        /// </summary>
        public SkinnedEffectInstance(Microsoft.Xna.Framework.Graphics.SkinnedEffect effect)
        {
            this.effect = effect;
            this._Alpha = effect.Alpha;
            this._AmbientLightColor = effect.AmbientLightColor;
            this._DiffuseColor = effect.DiffuseColor;
            this._EmissiveColor = effect.EmissiveColor;
            this._FogColor = effect.FogColor;
            this._FogEnabled = effect.FogEnabled;
            this._FogEnd = effect.FogEnd;
            this._FogStart = effect.FogStart;
            this._PreferPerPixelLighting = effect.PreferPerPixelLighting;
            this._SpecularColor = effect.SpecularColor;
            this._SpecularPower = effect.SpecularPower;
            this._Texture = effect.Texture;
            this._WeightsPerVertex = effect.WeightsPerVertex;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying SkinnedEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AlphaDirtyFlag) != 0 ||
                (AlphaLastModifiedBy != null && AlphaLastModifiedBy != this))
            {
                this.effect.Alpha = this.Alpha;
                AlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & AmbientLightColorDirtyFlag) != 0 ||
                (AmbientLightColorLastModifiedBy != null && AmbientLightColorLastModifiedBy != this))
            {
                this.effect.AmbientLightColor = this.AmbientLightColor;
                AmbientLightColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EmissiveColorDirtyFlag) != 0 ||
                (EmissiveColorLastModifiedBy != null && EmissiveColorLastModifiedBy != this))
            {
                this.effect.EmissiveColor = this.EmissiveColor;
                EmissiveColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogColorDirtyFlag) != 0 ||
                (FogColorLastModifiedBy != null && FogColorLastModifiedBy != this))
            {
                this.effect.FogColor = this.FogColor;
                FogColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEnabledDirtyFlag) != 0 ||
                (FogEnabledLastModifiedBy != null && FogEnabledLastModifiedBy != this))
            {
                this.effect.FogEnabled = this.FogEnabled;
                FogEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogEndDirtyFlag) != 0 ||
                (FogEndLastModifiedBy != null && FogEndLastModifiedBy != this))
            {
                this.effect.FogEnd = this.FogEnd;
                FogEndLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FogStartDirtyFlag) != 0 ||
                (FogStartLastModifiedBy != null && FogStartLastModifiedBy != this))
            {
                this.effect.FogStart = this.FogStart;
                FogStartLastModifiedBy = this;
            }
            if ((this.dirtyFlag & PreferPerPixelLightingDirtyFlag) != 0 ||
                (PreferPerPixelLightingLastModifiedBy != null && PreferPerPixelLightingLastModifiedBy != this))
            {
                this.effect.PreferPerPixelLighting = this.PreferPerPixelLighting;
                PreferPerPixelLightingLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularColorDirtyFlag) != 0 ||
                (SpecularColorLastModifiedBy != null && SpecularColorLastModifiedBy != this))
            {
                this.effect.SpecularColor = this.SpecularColor;
                SpecularColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularPowerDirtyFlag) != 0 ||
                (SpecularPowerLastModifiedBy != null && SpecularPowerLastModifiedBy != this))
            {
                this.effect.SpecularPower = this.SpecularPower;
                SpecularPowerLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            if ((this.dirtyFlag & WeightsPerVertexDirtyFlag) != 0 ||
                (WeightsPerVertexLastModifiedBy != null && WeightsPerVertexLastModifiedBy != this))
            {
                this.effect.WeightsPerVertex = this.WeightsPerVertex;
                WeightsPerVertexLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of SkinnedEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new SkinnedEffectInstance();
            cloned.effect = this.effect;
            cloned._Alpha = this._Alpha;
            cloned._AmbientLightColor = this._AmbientLightColor;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._EmissiveColor = this._EmissiveColor;
            cloned._FogColor = this._FogColor;
            cloned._FogEnabled = this._FogEnabled;
            cloned._FogEnd = this._FogEnd;
            cloned._FogStart = this._FogStart;
            cloned._PreferPerPixelLighting = this._PreferPerPixelLighting;
            cloned._SpecularColor = this._SpecularColor;
            cloned._SpecularPower = this._SpecularPower;
            cloned._Texture = this._Texture;
            cloned._WeightsPerVertex = this._WeightsPerVertex;
            return cloned;
        }
    }
}
namespace Nine.Graphics.Effects
{
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>AmbientLightEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class AmbientLightEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying AmbientLightEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.AmbientLightEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean SkinningEnabled 
        { 
            get { return _SkinningEnabled; }
            set { _SkinningEnabled = value; dirtyFlag |= SkinningEnabledDirtyFlag; }
        }
        private System.Boolean _SkinningEnabled;
        const uint SkinningEnabledDirtyFlag = 1 << 0;
        static AmbientLightEffectInstance SkinningEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 1;
        static AmbientLightEffectInstance TextureLastModifiedBy = null;

        private AmbientLightEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>AmbientLightEffectInstance</c>.
        /// </summary>
        public AmbientLightEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.AmbientLightEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>AmbientLightEffectInstance</c>.
        /// </summary>
        public AmbientLightEffectInstance(Nine.Graphics.Effects.AmbientLightEffect effect)
        {
            this.effect = effect;
            this._SkinningEnabled = effect.SkinningEnabled;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying AmbientLightEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & SkinningEnabledDirtyFlag) != 0 ||
                (SkinningEnabledLastModifiedBy != null && SkinningEnabledLastModifiedBy != this))
            {
                this.effect.SkinningEnabled = this.SkinningEnabled;
                SkinningEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of AmbientLightEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new AmbientLightEffectInstance();
            cloned.effect = this.effect;
            cloned._SkinningEnabled = this._SkinningEnabled;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DecalEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DecalEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DecalEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.DecalEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Alpha 
        { 
            get { return _Alpha; }
            set { _Alpha = value; dirtyFlag |= AlphaDirtyFlag; }
        }
        private System.Single _Alpha;
        const uint AlphaDirtyFlag = 1 << 0;
        static DecalEffectInstance AlphaLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 Position 
        { 
            get { return _Position; }
            set { _Position = value; dirtyFlag |= PositionDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _Position;
        const uint PositionDirtyFlag = 1 << 1;
        static DecalEffectInstance PositionLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Rotation 
        { 
            get { return _Rotation; }
            set { _Rotation = value; dirtyFlag |= RotationDirtyFlag; }
        }
        private System.Single _Rotation;
        const uint RotationDirtyFlag = 1 << 2;
        static DecalEffectInstance RotationLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector2 Scale 
        { 
            get { return _Scale; }
            set { _Scale = value; dirtyFlag |= ScaleDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector2 _Scale;
        const uint ScaleDirtyFlag = 1 << 3;
        static DecalEffectInstance ScaleLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 4;
        static DecalEffectInstance TextureLastModifiedBy = null;

        private DecalEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DecalEffectInstance</c>.
        /// </summary>
        public DecalEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.DecalEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DecalEffectInstance</c>.
        /// </summary>
        public DecalEffectInstance(Nine.Graphics.Effects.DecalEffect effect)
        {
            this.effect = effect;
            this._Alpha = effect.Alpha;
            this._Position = effect.Position;
            this._Rotation = effect.Rotation;
            this._Scale = effect.Scale;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DecalEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AlphaDirtyFlag) != 0 ||
                (AlphaLastModifiedBy != null && AlphaLastModifiedBy != this))
            {
                this.effect.Alpha = this.Alpha;
                AlphaLastModifiedBy = this;
            }
            if ((this.dirtyFlag & PositionDirtyFlag) != 0 ||
                (PositionLastModifiedBy != null && PositionLastModifiedBy != this))
            {
                this.effect.Position = this.Position;
                PositionLastModifiedBy = this;
            }
            if ((this.dirtyFlag & RotationDirtyFlag) != 0 ||
                (RotationLastModifiedBy != null && RotationLastModifiedBy != this))
            {
                this.effect.Rotation = this.Rotation;
                RotationLastModifiedBy = this;
            }
            if ((this.dirtyFlag & ScaleDirtyFlag) != 0 ||
                (ScaleLastModifiedBy != null && ScaleLastModifiedBy != this))
            {
                this.effect.Scale = this.Scale;
                ScaleLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DecalEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DecalEffectInstance();
            cloned.effect = this.effect;
            cloned._Alpha = this._Alpha;
            cloned._Position = this._Position;
            cloned._Rotation = this._Rotation;
            cloned._Scale = this._Scale;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DirectionalLightEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DirectionalLightEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DirectionalLightEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.DirectionalLightEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean SkinningEnabled 
        { 
            get { return _SkinningEnabled; }
            set { _SkinningEnabled = value; dirtyFlag |= SkinningEnabledDirtyFlag; }
        }
        private System.Boolean _SkinningEnabled;
        const uint SkinningEnabledDirtyFlag = 1 << 0;
        static DirectionalLightEffectInstance SkinningEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single SpecularPower 
        { 
            get { return _SpecularPower; }
            set { _SpecularPower = value; dirtyFlag |= SpecularPowerDirtyFlag; }
        }
        private System.Single _SpecularPower;
        const uint SpecularPowerDirtyFlag = 1 << 1;
        static DirectionalLightEffectInstance SpecularPowerLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 2;
        static DirectionalLightEffectInstance TextureLastModifiedBy = null;

        private DirectionalLightEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DirectionalLightEffectInstance</c>.
        /// </summary>
        public DirectionalLightEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.DirectionalLightEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DirectionalLightEffectInstance</c>.
        /// </summary>
        public DirectionalLightEffectInstance(Nine.Graphics.Effects.DirectionalLightEffect effect)
        {
            this.effect = effect;
            this._SkinningEnabled = effect.SkinningEnabled;
            this._SpecularPower = effect.SpecularPower;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DirectionalLightEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & SkinningEnabledDirtyFlag) != 0 ||
                (SkinningEnabledLastModifiedBy != null && SkinningEnabledLastModifiedBy != this))
            {
                this.effect.SkinningEnabled = this.SkinningEnabled;
                SkinningEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularPowerDirtyFlag) != 0 ||
                (SpecularPowerLastModifiedBy != null && SpecularPowerLastModifiedBy != this))
            {
                this.effect.SpecularPower = this.SpecularPower;
                SpecularPowerLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DirectionalLightEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DirectionalLightEffectInstance();
            cloned.effect = this.effect;
            cloned._SkinningEnabled = this._SkinningEnabled;
            cloned._SpecularPower = this._SpecularPower;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>PointLightEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class PointLightEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying PointLightEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.PointLightEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean SkinningEnabled 
        { 
            get { return _SkinningEnabled; }
            set { _SkinningEnabled = value; dirtyFlag |= SkinningEnabledDirtyFlag; }
        }
        private System.Boolean _SkinningEnabled;
        const uint SkinningEnabledDirtyFlag = 1 << 0;
        static PointLightEffectInstance SkinningEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single SpecularPower 
        { 
            get { return _SpecularPower; }
            set { _SpecularPower = value; dirtyFlag |= SpecularPowerDirtyFlag; }
        }
        private System.Single _SpecularPower;
        const uint SpecularPowerDirtyFlag = 1 << 1;
        static PointLightEffectInstance SpecularPowerLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 2;
        static PointLightEffectInstance TextureLastModifiedBy = null;

        private PointLightEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>PointLightEffectInstance</c>.
        /// </summary>
        public PointLightEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.PointLightEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>PointLightEffectInstance</c>.
        /// </summary>
        public PointLightEffectInstance(Nine.Graphics.Effects.PointLightEffect effect)
        {
            this.effect = effect;
            this._SkinningEnabled = effect.SkinningEnabled;
            this._SpecularPower = effect.SpecularPower;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying PointLightEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & SkinningEnabledDirtyFlag) != 0 ||
                (SkinningEnabledLastModifiedBy != null && SkinningEnabledLastModifiedBy != this))
            {
                this.effect.SkinningEnabled = this.SkinningEnabled;
                SkinningEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularPowerDirtyFlag) != 0 ||
                (SpecularPowerLastModifiedBy != null && SpecularPowerLastModifiedBy != this))
            {
                this.effect.SpecularPower = this.SpecularPower;
                SpecularPowerLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of PointLightEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new PointLightEffectInstance();
            cloned.effect = this.effect;
            cloned._SkinningEnabled = this._SkinningEnabled;
            cloned._SpecularPower = this._SpecularPower;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>SkyBoxEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class SkyBoxEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying SkyBoxEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.SkyBoxEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 Color 
        { 
            get { return _Color; }
            set { _Color = value; dirtyFlag |= ColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _Color;
        const uint ColorDirtyFlag = 1 << 0;
        static SkyBoxEffectInstance ColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.TextureCube Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.TextureCube _Texture;
        const uint TextureDirtyFlag = 1 << 1;
        static SkyBoxEffectInstance TextureLastModifiedBy = null;

        private SkyBoxEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>SkyBoxEffectInstance</c>.
        /// </summary>
        public SkyBoxEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.SkyBoxEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>SkyBoxEffectInstance</c>.
        /// </summary>
        public SkyBoxEffectInstance(Nine.Graphics.Effects.SkyBoxEffect effect)
        {
            this.effect = effect;
            this._Color = effect.Color;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying SkyBoxEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & ColorDirtyFlag) != 0 ||
                (ColorLastModifiedBy != null && ColorLastModifiedBy != this))
            {
                this.effect.Color = this.Color;
                ColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of SkyBoxEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new SkyBoxEffectInstance();
            cloned.effect = this.effect;
            cloned._Color = this._Color;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>SpotLightEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class SpotLightEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying SpotLightEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.SpotLightEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean SkinningEnabled 
        { 
            get { return _SkinningEnabled; }
            set { _SkinningEnabled = value; dirtyFlag |= SkinningEnabledDirtyFlag; }
        }
        private System.Boolean _SkinningEnabled;
        const uint SkinningEnabledDirtyFlag = 1 << 0;
        static SpotLightEffectInstance SkinningEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single SpecularPower 
        { 
            get { return _SpecularPower; }
            set { _SpecularPower = value; dirtyFlag |= SpecularPowerDirtyFlag; }
        }
        private System.Single _SpecularPower;
        const uint SpecularPowerDirtyFlag = 1 << 1;
        static SpotLightEffectInstance SpecularPowerLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 2;
        static SpotLightEffectInstance TextureLastModifiedBy = null;

        private SpotLightEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>SpotLightEffectInstance</c>.
        /// </summary>
        public SpotLightEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.SpotLightEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>SpotLightEffectInstance</c>.
        /// </summary>
        public SpotLightEffectInstance(Nine.Graphics.Effects.SpotLightEffect effect)
        {
            this.effect = effect;
            this._SkinningEnabled = effect.SkinningEnabled;
            this._SpecularPower = effect.SpecularPower;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying SpotLightEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & SkinningEnabledDirtyFlag) != 0 ||
                (SkinningEnabledLastModifiedBy != null && SkinningEnabledLastModifiedBy != this))
            {
                this.effect.SkinningEnabled = this.SkinningEnabled;
                SkinningEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularPowerDirtyFlag) != 0 ||
                (SpecularPowerLastModifiedBy != null && SpecularPowerLastModifiedBy != this))
            {
                this.effect.SpecularPower = this.SpecularPower;
                SpecularPowerLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of SpotLightEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new SpotLightEffectInstance();
            cloned.effect = this.effect;
            cloned._SkinningEnabled = this._SkinningEnabled;
            cloned._SpecularPower = this._SpecularPower;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
}
namespace Nine.Graphics.Effects.Deferred
{
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DeferredAmbientLight</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DeferredAmbientLightInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DeferredAmbientLightInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.Deferred.DeferredAmbientLight effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 AmbientLightColor 
        { 
            get { return _AmbientLightColor; }
            set { _AmbientLightColor = value; dirtyFlag |= AmbientLightColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _AmbientLightColor;
        const uint AmbientLightColorDirtyFlag = 1 << 0;
        static DeferredAmbientLightInstance AmbientLightColorLastModifiedBy = null;

        private DeferredAmbientLightInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DeferredAmbientLightInstance</c>.
        /// </summary>
        public DeferredAmbientLightInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.Deferred.DeferredAmbientLight>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DeferredAmbientLightInstance</c>.
        /// </summary>
        public DeferredAmbientLightInstance(Nine.Graphics.Effects.Deferred.DeferredAmbientLight effect)
        {
            this.effect = effect;
            this._AmbientLightColor = effect.AmbientLightColor;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DeferredAmbientLightInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AmbientLightColorDirtyFlag) != 0 ||
                (AmbientLightColorLastModifiedBy != null && AmbientLightColorLastModifiedBy != this))
            {
                this.effect.AmbientLightColor = this.AmbientLightColor;
                AmbientLightColorLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DeferredAmbientLightInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DeferredAmbientLightInstance();
            cloned.effect = this.effect;
            cloned._AmbientLightColor = this._AmbientLightColor;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DeferredDirectionalLight</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DeferredDirectionalLightInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DeferredDirectionalLightInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.Deferred.DeferredDirectionalLight effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D DepthBuffer 
        { 
            get { return _DepthBuffer; }
            set { _DepthBuffer = value; dirtyFlag |= DepthBufferDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _DepthBuffer;
        const uint DepthBufferDirtyFlag = 1 << 0;
        static DeferredDirectionalLightInstance DepthBufferLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 1;
        static DeferredDirectionalLightInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 Direction 
        { 
            get { return _Direction; }
            set { _Direction = value; dirtyFlag |= DirectionDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _Direction;
        const uint DirectionDirtyFlag = 1 << 2;
        static DeferredDirectionalLightInstance DirectionLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D NormalBuffer 
        { 
            get { return _NormalBuffer; }
            set { _NormalBuffer = value; dirtyFlag |= NormalBufferDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _NormalBuffer;
        const uint NormalBufferDirtyFlag = 1 << 3;
        static DeferredDirectionalLightInstance NormalBufferLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 SpecularColor 
        { 
            get { return _SpecularColor; }
            set { _SpecularColor = value; dirtyFlag |= SpecularColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _SpecularColor;
        const uint SpecularColorDirtyFlag = 1 << 4;
        static DeferredDirectionalLightInstance SpecularColorLastModifiedBy = null;

        private DeferredDirectionalLightInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DeferredDirectionalLightInstance</c>.
        /// </summary>
        public DeferredDirectionalLightInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.Deferred.DeferredDirectionalLight>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DeferredDirectionalLightInstance</c>.
        /// </summary>
        public DeferredDirectionalLightInstance(Nine.Graphics.Effects.Deferred.DeferredDirectionalLight effect)
        {
            this.effect = effect;
            this._DepthBuffer = effect.DepthBuffer;
            this._DiffuseColor = effect.DiffuseColor;
            this._Direction = effect.Direction;
            this._NormalBuffer = effect.NormalBuffer;
            this._SpecularColor = effect.SpecularColor;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DeferredDirectionalLightInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & DepthBufferDirtyFlag) != 0 ||
                (DepthBufferLastModifiedBy != null && DepthBufferLastModifiedBy != this))
            {
                this.effect.DepthBuffer = this.DepthBuffer;
                DepthBufferLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DirectionDirtyFlag) != 0 ||
                (DirectionLastModifiedBy != null && DirectionLastModifiedBy != this))
            {
                this.effect.Direction = this.Direction;
                DirectionLastModifiedBy = this;
            }
            if ((this.dirtyFlag & NormalBufferDirtyFlag) != 0 ||
                (NormalBufferLastModifiedBy != null && NormalBufferLastModifiedBy != this))
            {
                this.effect.NormalBuffer = this.NormalBuffer;
                NormalBufferLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularColorDirtyFlag) != 0 ||
                (SpecularColorLastModifiedBy != null && SpecularColorLastModifiedBy != this))
            {
                this.effect.SpecularColor = this.SpecularColor;
                SpecularColorLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DeferredDirectionalLightInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DeferredDirectionalLightInstance();
            cloned.effect = this.effect;
            cloned._DepthBuffer = this._DepthBuffer;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._Direction = this._Direction;
            cloned._NormalBuffer = this._NormalBuffer;
            cloned._SpecularColor = this._SpecularColor;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DeferredEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DeferredEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DeferredEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.Deferred.DeferredEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 0;
        static DeferredEffectInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 EmissiveColor 
        { 
            get { return _EmissiveColor; }
            set { _EmissiveColor = value; dirtyFlag |= EmissiveColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _EmissiveColor;
        const uint EmissiveColorDirtyFlag = 1 << 1;
        static DeferredEffectInstance EmissiveColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D LightTexture 
        { 
            get { return _LightTexture; }
            set { _LightTexture = value; dirtyFlag |= LightTextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _LightTexture;
        const uint LightTextureDirtyFlag = 1 << 2;
        static DeferredEffectInstance LightTextureLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean SkinningEnabled 
        { 
            get { return _SkinningEnabled; }
            set { _SkinningEnabled = value; dirtyFlag |= SkinningEnabledDirtyFlag; }
        }
        private System.Boolean _SkinningEnabled;
        const uint SkinningEnabledDirtyFlag = 1 << 3;
        static DeferredEffectInstance SkinningEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 SpecularColor 
        { 
            get { return _SpecularColor; }
            set { _SpecularColor = value; dirtyFlag |= SpecularColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _SpecularColor;
        const uint SpecularColorDirtyFlag = 1 << 4;
        static DeferredEffectInstance SpecularColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D Texture 
        { 
            get { return _Texture; }
            set { _Texture = value; dirtyFlag |= TextureDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _Texture;
        const uint TextureDirtyFlag = 1 << 5;
        static DeferredEffectInstance TextureLastModifiedBy = null;

        private DeferredEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DeferredEffectInstance</c>.
        /// </summary>
        public DeferredEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.Deferred.DeferredEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DeferredEffectInstance</c>.
        /// </summary>
        public DeferredEffectInstance(Nine.Graphics.Effects.Deferred.DeferredEffect effect)
        {
            this.effect = effect;
            this._DiffuseColor = effect.DiffuseColor;
            this._EmissiveColor = effect.EmissiveColor;
            this._LightTexture = effect.LightTexture;
            this._SkinningEnabled = effect.SkinningEnabled;
            this._SpecularColor = effect.SpecularColor;
            this._Texture = effect.Texture;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DeferredEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & EmissiveColorDirtyFlag) != 0 ||
                (EmissiveColorLastModifiedBy != null && EmissiveColorLastModifiedBy != this))
            {
                this.effect.EmissiveColor = this.EmissiveColor;
                EmissiveColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & LightTextureDirtyFlag) != 0 ||
                (LightTextureLastModifiedBy != null && LightTextureLastModifiedBy != this))
            {
                this.effect.LightTexture = this.LightTexture;
                LightTextureLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SkinningEnabledDirtyFlag) != 0 ||
                (SkinningEnabledLastModifiedBy != null && SkinningEnabledLastModifiedBy != this))
            {
                this.effect.SkinningEnabled = this.SkinningEnabled;
                SkinningEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularColorDirtyFlag) != 0 ||
                (SpecularColorLastModifiedBy != null && SpecularColorLastModifiedBy != this))
            {
                this.effect.SpecularColor = this.SpecularColor;
                SpecularColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & TextureDirtyFlag) != 0 ||
                (TextureLastModifiedBy != null && TextureLastModifiedBy != this))
            {
                this.effect.Texture = this.Texture;
                TextureLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DeferredEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DeferredEffectInstance();
            cloned.effect = this.effect;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._EmissiveColor = this._EmissiveColor;
            cloned._LightTexture = this._LightTexture;
            cloned._SkinningEnabled = this._SkinningEnabled;
            cloned._SpecularColor = this._SpecularColor;
            cloned._Texture = this._Texture;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DeferredPointLight</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DeferredPointLightInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DeferredPointLightInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.Deferred.DeferredPointLight effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Attenuation 
        { 
            get { return _Attenuation; }
            set { _Attenuation = value; dirtyFlag |= AttenuationDirtyFlag; }
        }
        private System.Single _Attenuation;
        const uint AttenuationDirtyFlag = 1 << 0;
        static DeferredPointLightInstance AttenuationLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D DepthBuffer 
        { 
            get { return _DepthBuffer; }
            set { _DepthBuffer = value; dirtyFlag |= DepthBufferDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _DepthBuffer;
        const uint DepthBufferDirtyFlag = 1 << 1;
        static DeferredPointLightInstance DepthBufferLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 2;
        static DeferredPointLightInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D NormalBuffer 
        { 
            get { return _NormalBuffer; }
            set { _NormalBuffer = value; dirtyFlag |= NormalBufferDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _NormalBuffer;
        const uint NormalBufferDirtyFlag = 1 << 3;
        static DeferredPointLightInstance NormalBufferLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 Position 
        { 
            get { return _Position; }
            set { _Position = value; dirtyFlag |= PositionDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _Position;
        const uint PositionDirtyFlag = 1 << 4;
        static DeferredPointLightInstance PositionLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Range 
        { 
            get { return _Range; }
            set { _Range = value; dirtyFlag |= RangeDirtyFlag; }
        }
        private System.Single _Range;
        const uint RangeDirtyFlag = 1 << 5;
        static DeferredPointLightInstance RangeLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 SpecularColor 
        { 
            get { return _SpecularColor; }
            set { _SpecularColor = value; dirtyFlag |= SpecularColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _SpecularColor;
        const uint SpecularColorDirtyFlag = 1 << 6;
        static DeferredPointLightInstance SpecularColorLastModifiedBy = null;

        private DeferredPointLightInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DeferredPointLightInstance</c>.
        /// </summary>
        public DeferredPointLightInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.Deferred.DeferredPointLight>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DeferredPointLightInstance</c>.
        /// </summary>
        public DeferredPointLightInstance(Nine.Graphics.Effects.Deferred.DeferredPointLight effect)
        {
            this.effect = effect;
            this._Attenuation = effect.Attenuation;
            this._DepthBuffer = effect.DepthBuffer;
            this._DiffuseColor = effect.DiffuseColor;
            this._NormalBuffer = effect.NormalBuffer;
            this._Position = effect.Position;
            this._Range = effect.Range;
            this._SpecularColor = effect.SpecularColor;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DeferredPointLightInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AttenuationDirtyFlag) != 0 ||
                (AttenuationLastModifiedBy != null && AttenuationLastModifiedBy != this))
            {
                this.effect.Attenuation = this.Attenuation;
                AttenuationLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DepthBufferDirtyFlag) != 0 ||
                (DepthBufferLastModifiedBy != null && DepthBufferLastModifiedBy != this))
            {
                this.effect.DepthBuffer = this.DepthBuffer;
                DepthBufferLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & NormalBufferDirtyFlag) != 0 ||
                (NormalBufferLastModifiedBy != null && NormalBufferLastModifiedBy != this))
            {
                this.effect.NormalBuffer = this.NormalBuffer;
                NormalBufferLastModifiedBy = this;
            }
            if ((this.dirtyFlag & PositionDirtyFlag) != 0 ||
                (PositionLastModifiedBy != null && PositionLastModifiedBy != this))
            {
                this.effect.Position = this.Position;
                PositionLastModifiedBy = this;
            }
            if ((this.dirtyFlag & RangeDirtyFlag) != 0 ||
                (RangeLastModifiedBy != null && RangeLastModifiedBy != this))
            {
                this.effect.Range = this.Range;
                RangeLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularColorDirtyFlag) != 0 ||
                (SpecularColorLastModifiedBy != null && SpecularColorLastModifiedBy != this))
            {
                this.effect.SpecularColor = this.SpecularColor;
                SpecularColorLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DeferredPointLightInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DeferredPointLightInstance();
            cloned.effect = this.effect;
            cloned._Attenuation = this._Attenuation;
            cloned._DepthBuffer = this._DepthBuffer;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._NormalBuffer = this._NormalBuffer;
            cloned._Position = this._Position;
            cloned._Range = this._Range;
            cloned._SpecularColor = this._SpecularColor;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>DeferredSpotLight</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class DeferredSpotLightInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying DeferredSpotLightInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.Deferred.DeferredSpotLight effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Attenuation 
        { 
            get { return _Attenuation; }
            set { _Attenuation = value; dirtyFlag |= AttenuationDirtyFlag; }
        }
        private System.Single _Attenuation;
        const uint AttenuationDirtyFlag = 1 << 0;
        static DeferredSpotLightInstance AttenuationLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D DepthBuffer 
        { 
            get { return _DepthBuffer; }
            set { _DepthBuffer = value; dirtyFlag |= DepthBufferDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _DepthBuffer;
        const uint DepthBufferDirtyFlag = 1 << 1;
        static DeferredSpotLightInstance DepthBufferLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 DiffuseColor 
        { 
            get { return _DiffuseColor; }
            set { _DiffuseColor = value; dirtyFlag |= DiffuseColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _DiffuseColor;
        const uint DiffuseColorDirtyFlag = 1 << 2;
        static DeferredSpotLightInstance DiffuseColorLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 Direction 
        { 
            get { return _Direction; }
            set { _Direction = value; dirtyFlag |= DirectionDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _Direction;
        const uint DirectionDirtyFlag = 1 << 3;
        static DeferredSpotLightInstance DirectionLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Falloff 
        { 
            get { return _Falloff; }
            set { _Falloff = value; dirtyFlag |= FalloffDirtyFlag; }
        }
        private System.Single _Falloff;
        const uint FalloffDirtyFlag = 1 << 4;
        static DeferredSpotLightInstance FalloffLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single InnerAngle 
        { 
            get { return _InnerAngle; }
            set { _InnerAngle = value; dirtyFlag |= InnerAngleDirtyFlag; }
        }
        private System.Single _InnerAngle;
        const uint InnerAngleDirtyFlag = 1 << 5;
        static DeferredSpotLightInstance InnerAngleLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D NormalBuffer 
        { 
            get { return _NormalBuffer; }
            set { _NormalBuffer = value; dirtyFlag |= NormalBufferDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _NormalBuffer;
        const uint NormalBufferDirtyFlag = 1 << 6;
        static DeferredSpotLightInstance NormalBufferLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single OuterAngle 
        { 
            get { return _OuterAngle; }
            set { _OuterAngle = value; dirtyFlag |= OuterAngleDirtyFlag; }
        }
        private System.Single _OuterAngle;
        const uint OuterAngleDirtyFlag = 1 << 7;
        static DeferredSpotLightInstance OuterAngleLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 Position 
        { 
            get { return _Position; }
            set { _Position = value; dirtyFlag |= PositionDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _Position;
        const uint PositionDirtyFlag = 1 << 8;
        static DeferredSpotLightInstance PositionLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single Range 
        { 
            get { return _Range; }
            set { _Range = value; dirtyFlag |= RangeDirtyFlag; }
        }
        private System.Single _Range;
        const uint RangeDirtyFlag = 1 << 9;
        static DeferredSpotLightInstance RangeLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Vector3 SpecularColor 
        { 
            get { return _SpecularColor; }
            set { _SpecularColor = value; dirtyFlag |= SpecularColorDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Vector3 _SpecularColor;
        const uint SpecularColorDirtyFlag = 1 << 10;
        static DeferredSpotLightInstance SpecularColorLastModifiedBy = null;

        private DeferredSpotLightInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>DeferredSpotLightInstance</c>.
        /// </summary>
        public DeferredSpotLightInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.Deferred.DeferredSpotLight>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>DeferredSpotLightInstance</c>.
        /// </summary>
        public DeferredSpotLightInstance(Nine.Graphics.Effects.Deferred.DeferredSpotLight effect)
        {
            this.effect = effect;
            this._Attenuation = effect.Attenuation;
            this._DepthBuffer = effect.DepthBuffer;
            this._DiffuseColor = effect.DiffuseColor;
            this._Direction = effect.Direction;
            this._Falloff = effect.Falloff;
            this._InnerAngle = effect.InnerAngle;
            this._NormalBuffer = effect.NormalBuffer;
            this._OuterAngle = effect.OuterAngle;
            this._Position = effect.Position;
            this._Range = effect.Range;
            this._SpecularColor = effect.SpecularColor;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying DeferredSpotLightInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & AttenuationDirtyFlag) != 0 ||
                (AttenuationLastModifiedBy != null && AttenuationLastModifiedBy != this))
            {
                this.effect.Attenuation = this.Attenuation;
                AttenuationLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DepthBufferDirtyFlag) != 0 ||
                (DepthBufferLastModifiedBy != null && DepthBufferLastModifiedBy != this))
            {
                this.effect.DepthBuffer = this.DepthBuffer;
                DepthBufferLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DiffuseColorDirtyFlag) != 0 ||
                (DiffuseColorLastModifiedBy != null && DiffuseColorLastModifiedBy != this))
            {
                this.effect.DiffuseColor = this.DiffuseColor;
                DiffuseColorLastModifiedBy = this;
            }
            if ((this.dirtyFlag & DirectionDirtyFlag) != 0 ||
                (DirectionLastModifiedBy != null && DirectionLastModifiedBy != this))
            {
                this.effect.Direction = this.Direction;
                DirectionLastModifiedBy = this;
            }
            if ((this.dirtyFlag & FalloffDirtyFlag) != 0 ||
                (FalloffLastModifiedBy != null && FalloffLastModifiedBy != this))
            {
                this.effect.Falloff = this.Falloff;
                FalloffLastModifiedBy = this;
            }
            if ((this.dirtyFlag & InnerAngleDirtyFlag) != 0 ||
                (InnerAngleLastModifiedBy != null && InnerAngleLastModifiedBy != this))
            {
                this.effect.InnerAngle = this.InnerAngle;
                InnerAngleLastModifiedBy = this;
            }
            if ((this.dirtyFlag & NormalBufferDirtyFlag) != 0 ||
                (NormalBufferLastModifiedBy != null && NormalBufferLastModifiedBy != this))
            {
                this.effect.NormalBuffer = this.NormalBuffer;
                NormalBufferLastModifiedBy = this;
            }
            if ((this.dirtyFlag & OuterAngleDirtyFlag) != 0 ||
                (OuterAngleLastModifiedBy != null && OuterAngleLastModifiedBy != this))
            {
                this.effect.OuterAngle = this.OuterAngle;
                OuterAngleLastModifiedBy = this;
            }
            if ((this.dirtyFlag & PositionDirtyFlag) != 0 ||
                (PositionLastModifiedBy != null && PositionLastModifiedBy != this))
            {
                this.effect.Position = this.Position;
                PositionLastModifiedBy = this;
            }
            if ((this.dirtyFlag & RangeDirtyFlag) != 0 ||
                (RangeLastModifiedBy != null && RangeLastModifiedBy != this))
            {
                this.effect.Range = this.Range;
                RangeLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularColorDirtyFlag) != 0 ||
                (SpecularColorLastModifiedBy != null && SpecularColorLastModifiedBy != this))
            {
                this.effect.SpecularColor = this.SpecularColor;
                SpecularColorLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of DeferredSpotLightInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new DeferredSpotLightInstance();
            cloned.effect = this.effect;
            cloned._Attenuation = this._Attenuation;
            cloned._DepthBuffer = this._DepthBuffer;
            cloned._DiffuseColor = this._DiffuseColor;
            cloned._Direction = this._Direction;
            cloned._Falloff = this._Falloff;
            cloned._InnerAngle = this._InnerAngle;
            cloned._NormalBuffer = this._NormalBuffer;
            cloned._OuterAngle = this._OuterAngle;
            cloned._Position = this._Position;
            cloned._Range = this._Range;
            cloned._SpecularColor = this._SpecularColor;
            return cloned;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Effect instance for <c>GraphicsBufferEffect</c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("EffectInstance.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class GraphicsBufferEffectInstance : Nine.Graphics.IEffectInstance
    {        
        /// <summary>
        /// Gets the underlying GraphicsBufferEffectInstance.
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        Nine.Graphics.Effects.Deferred.GraphicsBufferEffect effect;
		uint dirtyFlag = 0;
        /// <summary>
        /// 
        /// </summary>
        public Microsoft.Xna.Framework.Graphics.Texture2D NormalMap 
        { 
            get { return _NormalMap; }
            set { _NormalMap = value; dirtyFlag |= NormalMapDirtyFlag; }
        }
        private Microsoft.Xna.Framework.Graphics.Texture2D _NormalMap;
        const uint NormalMapDirtyFlag = 1 << 0;
        static GraphicsBufferEffectInstance NormalMapLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean NormalMappingEnabled 
        { 
            get { return _NormalMappingEnabled; }
            set { _NormalMappingEnabled = value; dirtyFlag |= NormalMappingEnabledDirtyFlag; }
        }
        private System.Boolean _NormalMappingEnabled;
        const uint NormalMappingEnabledDirtyFlag = 1 << 1;
        static GraphicsBufferEffectInstance NormalMappingEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Boolean SkinningEnabled 
        { 
            get { return _SkinningEnabled; }
            set { _SkinningEnabled = value; dirtyFlag |= SkinningEnabledDirtyFlag; }
        }
        private System.Boolean _SkinningEnabled;
        const uint SkinningEnabledDirtyFlag = 1 << 2;
        static GraphicsBufferEffectInstance SkinningEnabledLastModifiedBy = null;
        /// <summary>
        /// 
        /// </summary>
        public System.Single SpecularPower 
        { 
            get { return _SpecularPower; }
            set { _SpecularPower = value; dirtyFlag |= SpecularPowerDirtyFlag; }
        }
        private System.Single _SpecularPower;
        const uint SpecularPowerDirtyFlag = 1 << 3;
        static GraphicsBufferEffectInstance SpecularPowerLastModifiedBy = null;

        private GraphicsBufferEffectInstance() { }

        /// <summary>
        /// Initializes a new instance of <c>GraphicsBufferEffectInstance</c>.
        /// </summary>
        public GraphicsBufferEffectInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<Nine.Graphics.Effects.Deferred.GraphicsBufferEffect>.GetInstance(graphics))
        {
            
        }

        /// <summary>
        /// Initializes a new instance of <c>GraphicsBufferEffectInstance</c>.
        /// </summary>
        public GraphicsBufferEffectInstance(Nine.Graphics.Effects.Deferred.GraphicsBufferEffect effect)
        {
            this.effect = effect;
            this._NormalMap = effect.NormalMap;
            this._NormalMappingEnabled = effect.NormalMappingEnabled;
            this._SkinningEnabled = effect.SkinningEnabled;
            this._SpecularPower = effect.SpecularPower;
        }
        
        /// <summary>
        /// Applys the parameter values to the underlying GraphicsBufferEffectInstance.
        /// </summary>
        public void Apply()
        {
            if ((this.dirtyFlag & NormalMapDirtyFlag) != 0 ||
                (NormalMapLastModifiedBy != null && NormalMapLastModifiedBy != this))
            {
                this.effect.NormalMap = this.NormalMap;
                NormalMapLastModifiedBy = this;
            }
            if ((this.dirtyFlag & NormalMappingEnabledDirtyFlag) != 0 ||
                (NormalMappingEnabledLastModifiedBy != null && NormalMappingEnabledLastModifiedBy != this))
            {
                this.effect.NormalMappingEnabled = this.NormalMappingEnabled;
                NormalMappingEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SkinningEnabledDirtyFlag) != 0 ||
                (SkinningEnabledLastModifiedBy != null && SkinningEnabledLastModifiedBy != this))
            {
                this.effect.SkinningEnabled = this.SkinningEnabled;
                SkinningEnabledLastModifiedBy = this;
            }
            if ((this.dirtyFlag & SpecularPowerDirtyFlag) != 0 ||
                (SpecularPowerLastModifiedBy != null && SpecularPowerLastModifiedBy != this))
            {
                this.effect.SpecularPower = this.SpecularPower;
                SpecularPowerLastModifiedBy = this;
            }
            this.dirtyFlag = 0;
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of GraphicsBufferEffectInstance.
        /// </summary>
        public IEffectInstance Clone()
        {
            var cloned = new GraphicsBufferEffectInstance();
            cloned.effect = this.effect;
            cloned._NormalMap = this._NormalMap;
            cloned._NormalMappingEnabled = this._NormalMappingEnabled;
            cloned._SkinningEnabled = this._SkinningEnabled;
            cloned._SpecularPower = this._SpecularPower;
            return cloned;
        }
    }
#endif
}
#endif