<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------
<#@ include file="Content.tth" #>
<#@ include file="Document.tth" #>
<#
    var assembly = Assembly.LoadFrom(Host.ResolvePath(assemblyFile));
    var assemblyDoc = OpenAssemblyXmlDocument(Host.ResolvePath(assemblyDocumentFile));
#>
#if !TEXT_TEMPLATE
<#
    foreach (var namespaceGroup in FindContentSerializableTypes(assembly).GroupBy(t => GetContentPipelineNamespace(t))
                                                                         .OrderBy(g => g.Key))
    {
#>
namespace <#= namespaceGroup.Key #>
{
<#
    foreach (var type in namespaceGroup.OrderBy(t => GetContentClassConstructorName(t)))
    {
        var className = GetContentClassName(type);
        var classConstructorName = GetContentClassConstructorName(type);
        var members = FindContentSerializableMembers(type).OrderBy(m => GetMemberFieldName(m)).ToArray();
#>
    /// <summary>
    /// Content model for <c><#= type.Name #></c>.
    /// <#= GetSummary(assemblyDoc, type.FullName) #>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Model.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    [Microsoft.Xna.Framework.Content.ContentSerializerRuntimeType("<#= type.FullName #>, <#= assembly.GetName().Name #>")]
<#
        if (members.Any(m => m.Name == "Name"))
        {
#>
    [System.Windows.Markup.RuntimeNameProperty("Name")]
<#
        }
#>
    public partial class <#= className #> : System.Xaml.IAttachedPropertyStore
    {
<#
    foreach (var member in members)
    {
        var defaultValue = TryGetDefaultValue(type, member);
        var defaultValueString = TryGetDefaultValueString(type, member);
        var hasDefaultValue = !string.IsNullOrEmpty(defaultValueString);
        var memberTypeName = GetMemberContentTypeName(member);
        var memberName = GetMemberFieldName(member);
        var typeConverter = GetTypeConverter(member);
#>
        /// <summary>
        /// <#= GetSummary(assemblyDoc, member.Name).Replace("Gets or sets", "Gets").Replace("Gets", "Gets or sets") #>
        /// </summary>
<# if (hasDefaultValue) { #>
        [System.ComponentModel.DefaultValue("<#= defaultValueString #>")]
<# } #>
<# if (typeConverter != null) { #>
        [System.ComponentModel.TypeConverter(typeof(<#= typeConverter #>))]
<# } #>
        [Microsoft.Xna.Framework.Content.ContentSerializer(Optional = true)]
        public virtual <#= memberTypeName #> <#= memberName #> { get; <# if (!CanSetMember(member)) { #> internal <# } #>set; }

<#
    }
#>
        /// <summary>
        /// Initializes a new instance of <c><#= classConstructorName #></c>.
        /// </summary>
        public <#= classConstructorName #>()
        {
<#
    foreach (var member in members)
    {
        var defaultValue = TryGetDefaultValue(type, member);
        var defaultValueString = TryGetDefaultValueString(type, member);
        var hasDefaultValue = !string.IsNullOrEmpty(defaultValueString);
        var memberType = GetMemberType(member);
        var memberTypeName = GetMemberContentTypeName(member);
        var memberName = GetMemberFieldName(member);        
        if (hasDefaultValue)
        {
#>
            <#= memberName #> = (<#= memberTypeName #>)System.ComponentModel.TypeDescriptor.GetConverter(typeof(<#= memberTypeName #>)).ConvertFromInvariantString("<#= defaultValueString #>");
<#
        }
        else if (IsCollection(memberType) || IsDictionary(memberType) || (HasDefaultPublicConstructor(memberType) && defaultValue != null))
        {
#>
            <#= memberName #> = new <#= memberTypeName #>();
<#
        }
        else if (memberType == typeof(Matrix))
        {
#>
            <#= memberName #> = new <#= memberTypeName #>(<#= ((Matrix)defaultValue).M11#>f, <#= ((Matrix)defaultValue).M12#>f, <#= ((Matrix)defaultValue).M13#>f, <#= ((Matrix)defaultValue).M14#>f, <#= ((Matrix)defaultValue).M21#>f, <#= ((Matrix)defaultValue).M22#>f, <#= ((Matrix)defaultValue).M23#>f, <#= ((Matrix)defaultValue).M24#>f,<#= ((Matrix)defaultValue).M31#>f, <#= ((Matrix)defaultValue).M32#>f, <#= ((Matrix)defaultValue).M33#>f, <#= ((Matrix)defaultValue).M34#>f, <#= ((Matrix)defaultValue).M41#>f, <#= ((Matrix)defaultValue).M42#>f, <#= ((Matrix)defaultValue).M43#>f, <#= ((Matrix)defaultValue).M44#>f);
<#
        }
        else if (memberType.IsGenericType && memberType.GetGenericTypeDefinition().FullName.StartsWith("Nine.Range"))
        {
            var min = "";
            var max = "";
            var innerType = memberType.GetGenericArguments()[0];
            if (defaultValue.ToString().Contains("~"))
            {
                var minMax = defaultValue.ToString().Split('~');
                min = minMax[0];
                max = minMax[1];
            }
            else
            {
                min = max = defaultValue.ToString();
            }
#>
            <#= memberName #> = new <#= memberTypeName #>(
                (<#= innerType.FullName #>)System.ComponentModel.TypeDescriptor.GetConverter(typeof(<#= innerType.FullName #>)).ConvertFromInvariantString("<#= min.Trim() #>"),
                (<#= innerType.FullName #>)System.ComponentModel.TypeDescriptor.GetConverter(typeof(<#= innerType.FullName #>)).ConvertFromInvariantString("<#= max.Trim() #>"));
<#
        }
    }
#>
            OnCreate();
        }

        partial void OnCreate();

        #region IAttachedPropertyStore
        System.Collections.Generic.IDictionary<System.Xaml.AttachableMemberIdentifier, object> attachedProperties = new System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, object>();

        void System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair<System.Xaml.AttachableMemberIdentifier, object>[] array, int index)
        {
            attachedProperties.CopyTo(array, index);
        }

        int System.Xaml.IAttachedPropertyStore.PropertyCount
        {
            get { return attachedProperties.Count; }
        }

        bool System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier)
        {
            return attachedProperties.Remove(attachableMemberIdentifier);
        }

        void System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier, object value)
        {
            attachedProperties[attachableMemberIdentifier] = value;
        }

        bool System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier attachableMemberIdentifier, out object value)
        {
            return attachedProperties.TryGetValue(attachableMemberIdentifier, out value);
        }
        #endregion
    }
<#
    }
#>
}
<#
    }
#>
#endif