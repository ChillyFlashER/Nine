<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------
<#@ include file="Content.tth" #>
<#@ include file="Document.tth" #>
<#
    var assembly = Assembly.LoadFrom(Host.ResolvePath(assemblyFile));
    var assemblyDoc = OpenAssemblyXmlDocument(Host.ResolvePath(assemblyDocumentFile));
#>
#if !TEXT_TEMPLATE
<#
    foreach (var namespaceGroup in FindEffectInstanceTypes(assembly).GroupBy(t => t.Namespace.IndexOf("Microsoft") >= 0 ? "Nine.Graphics.Effects" : t.Namespace)
                                                                    .OrderBy(g => g.Key))
    {
#>
namespace <#= namespaceGroup.Key #>
{
<#
    foreach (var type in namespaceGroup.OrderBy(t => GetClassName(t)))
    {
        var className = GetClassName(type).Replace("Effect", "Material");
        var classConstructorName = className;
        var classModifier = type.IsPublic ? "public" : "internal";
        var members = FindContentSerializableMembers(type).Where(m =>
                            !(m.Name == "World" || m.Name == "View" || m.Name == "Projection" || m.Name == "Tag" ||
                              m.Name == "Name" || m.Name == "AmbientLightColor" || m.Name.StartsWith("Fog")))
                                                          .OrderBy(m => m.Name).ToArray();
        var implementedInterfaces = type.GetInterfaces().Where(i => i.IsPublic && i.Name != "IEffectMatrices" && i.Name != "IEffectLights" 
                                                                               && i.Name != "IDisposable" && i.Name != "IUpdateable"
                                                                               && i.Name != "IDeferredLight")
                                                        .Select(i => GetClassFullName(i)).ToArray();
        var implementedInterfaceNames = implementedInterfaces.Length > 0 ? ", " + string.Join(", ", implementedInterfaces) : "";
        
        var notSupportedByWindowsPhone = !className.StartsWith("BasicMaterial")
                                      && !className.StartsWith("DualTextureMaterial")
                                      && !className.StartsWith("SkinnedMaterial")
                                      && !className.StartsWith("EnvironmentMapMaterial")
                                      && !className.StartsWith("AlphaTestMaterial");
        if (notSupportedByWindowsPhone)
        {
#>
#if !WINDOWS_PHONE
<#
        }
#>
    /// <summary>
    /// Effect instance for <c><#= type.Name #></c>.
    /// </summary>
    [Nine.ContentSerializable()]
    [System.CodeDom.Compiler.GeneratedCode("Materials.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    public partial class <#= className #> : Nine.Graphics.Effects.Material
    {        
        /// <summary>
        /// Gets the underlying <#= className #>.
        /// </summary>
        public override Microsoft.Xna.Framework.Graphics.Effect Effect { get { return effect; } }
        <#= GetClassFullName(type) #> effect;
<#
    foreach (var member in members)
    {
        var memberTypeName = GetMemberTypeName(member);
#>
        /// <summary>
        /// <#= GetSummary(assemblyDoc, member.Name).Replace("Gets or sets", "Gets").Replace("Gets", "Gets or sets") #>
        /// </summary>
        public <#= memberTypeName #> <#= member.Name #> { get; set; }
<#
    }
#>

        private <#= classConstructorName #>() { }

        /// <summary>
        /// Initializes a new instance of <c><#= classConstructorName #></c>.
        /// </summary>
        public <#= classConstructorName #>(Microsoft.Xna.Framework.Graphics.GraphicsDevice graphics)
            : this(Nine.Graphics.GraphicsResources<<#= GetClassFullName(type) #>>.GetInstance(graphics))
        {

        }

        /// <summary>
        /// Initializes a new instance of <c><#= classConstructorName #></c>.
        /// </summary>
        <#= classModifier #> <#= classConstructorName #>(<#= GetClassFullName(type) #> effect)
        {
            this.effect = effect;
<#
    foreach (var member in members)
    {
        var memberType = GetMemberType(member);
        var memberTypeName = GetMemberTypeName(member);
#>
            this.<#= member.Name #> = effect.<#= member.Name #>;
<#
    }
#>

            OnCreate();
        }
        
        partial void OnApply();
        partial void OnCreate();
        partial void OnClone(<#= className #> cloned);

        /// <summary>
        /// Applys the parameter values to the underlying <#= className #>.
        /// </summary>
        public override void Apply()
        {
<#
    foreach (var member in members)
    {
        var memberType = GetMemberType(member);
        var memberTypeName = GetMemberTypeName(member);
#>
            if (this.effect.<#= member.Name#> != this.<#= member.Name#>)
                this.effect.<#= member.Name #> = this.<#= member.Name #>;
<#
    }
#>      
        }
        
        /// <summary>
        /// Clones the parameter values to a new instance of <#= className #>.
        /// </summary>
        public override Nine.Graphics.Effects.Material Clone()
        {
            var cloned = new <#= className #>();
            cloned.effect = this.effect;
            cloned.DepthAlphaEnabled = this.DepthAlphaEnabled;
<#
    foreach (var member in members)
    {
#>
            cloned.<#= member.Name #> = this.<#= member.Name #>;
<#
    }
#>
            OnClone(cloned);
            return cloned;
        }
    }
<#
        if (notSupportedByWindowsPhone)
        {
#>
#endif
<#
        }
    }
#>
}
<#
    }
#>
#endif