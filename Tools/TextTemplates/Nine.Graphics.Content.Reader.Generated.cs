// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------

#if !TEXT_TEMPLATE
namespace Nine.Animations
{
    /// <summary>
    /// Content reader for <c>BoneAnimationClip</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BoneAnimationClipReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BoneAnimationClip>
    {
        protected override Nine.Animations.BoneAnimationClip Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BoneAnimationClip existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BoneAnimationClip();
            }
            existingInstance.FramesPerSecond = input.ReadObject<System.Int32>();
            existingInstance.TotalFrames = input.ReadObject<System.Int32>();
            existingInstance.PreferredEnding = input.ReadObject<Nine.Animations.KeyframeEnding>();
            existingInstance.Transforms = input.ReadObject<Microsoft.Xna.Framework.Matrix[][]>();

            return existingInstance;
        }
    }
}
namespace Nine.Graphics
{
    /// <summary>
    /// Content reader for <c>Geometry</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class GeometryReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Geometry>
    {
        protected override Nine.Graphics.Geometry Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Geometry existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new Geometry();
            }
            existingInstance.BoundingSphere = input.ReadObject<Microsoft.Xna.Framework.BoundingSphere>();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Positions = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Indices = input.ReadObject<System.UInt16[]>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelCollision</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelCollisionReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelCollision>
    {
        protected override Nine.Graphics.ModelCollision Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelCollision existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelCollision();
            }
            existingInstance.CollisionTree = input.ReadObject<Nine.Octree<System.Boolean>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelMeshPartTag</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelMeshPartTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelMeshPartTag>
    {
        protected override Nine.Graphics.ModelMeshPartTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelMeshPartTag existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelMeshPartTag();
            }
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Textures = input.ReadObject<System.Collections.Generic.Dictionary<Nine.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.Texture>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelSkeletonData</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelSkeletonDataReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelSkeletonData>
    {
        protected override Nine.Graphics.ModelSkeletonData Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelSkeletonData existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelSkeletonData();
            }
            existingInstance.InverseAbsoluteBindPose = new System.Collections.Generic.List<Microsoft.Xna.Framework.Matrix>();
            foreach (var item in input.ReadObject<System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Matrix>>())
                existingInstance.InverseAbsoluteBindPose.Add(item);
            existingInstance.SkeletonRoot = input.ReadObject<System.Int32>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelTag</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ModelTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelTag>
    {
        protected override Nine.Graphics.ModelTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelTag existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ModelTag();
            }
            existingInstance.Skeleton = input.ReadObject<Nine.Graphics.ModelSkeletonData>();
            existingInstance.Collision = input.ReadObject<Nine.Graphics.ModelCollision>();
            existingInstance.Animations = input.ReadObject<System.Collections.Generic.Dictionary<System.String, Nine.Animations.BoneAnimationClip>>();

            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Effects
{
    /// <summary>
    /// Content reader for <c>AlphaTestMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AlphaTestMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.AlphaTestMaterial>
    {
        protected override Nine.Graphics.Effects.AlphaTestMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.AlphaTestMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new AlphaTestMaterial(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.AlphaFunction = input.ReadObject<Microsoft.Xna.Framework.Graphics.CompareFunction>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.ReferenceAlpha = input.ReadObject<System.Int32>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.VertexColorEnabled = input.ReadObject<System.Boolean>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BasicMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BasicMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.BasicMaterial>
    {
        protected override Nine.Graphics.Effects.BasicMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.BasicMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new BasicMaterial(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.LightingEnabled = input.ReadObject<System.Boolean>();
            existingInstance.PreferPerPixelLighting = input.ReadObject<System.Boolean>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularPower = input.ReadObject<System.Single>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureEnabled = input.ReadObject<System.Boolean>();
            existingInstance.VertexColorEnabled = input.ReadObject<System.Boolean>();
            existingInstance.IsTransparent = input.ReadObject<System.Boolean>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>CustomMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class CustomMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.CustomMaterial>
    {
        protected override Nine.Graphics.Effects.CustomMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.CustomMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new CustomMaterial();
            }
            existingInstance.IsTransparent = input.ReadObject<System.Boolean>();
            existingInstance.EffectSerializer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Effect>();
            existingInstance.ParametersSerializer = input.ReadObject<System.Collections.Generic.Dictionary<System.String, System.Object>>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>DualTextureMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DualTextureMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.DualTextureMaterial>
    {
        protected override Nine.Graphics.Effects.DualTextureMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.DualTextureMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DualTextureMaterial(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Texture2 = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.VertexColorEnabled = input.ReadObject<System.Boolean>();
            existingInstance.IsTransparent = input.ReadObject<System.Boolean>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>EnvironmentMapMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class EnvironmentMapMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EnvironmentMapMaterial>
    {
        protected override Nine.Graphics.Effects.EnvironmentMapMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EnvironmentMapMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new EnvironmentMapMaterial(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EnvironmentMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.TextureCube>();
            existingInstance.EnvironmentMapAmount = input.ReadObject<System.Single>();
            existingInstance.EnvironmentMapSpecular = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.FresnelFactor = input.ReadObject<System.Single>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadObject<System.Boolean>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>LinkedMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class LinkedMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.LinkedMaterial>
    {
        protected override Nine.Graphics.Effects.LinkedMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.LinkedMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new LinkedMaterial();
            }
            existingInstance.IsTransparent = input.ReadObject<System.Boolean>();
            existingInstance.EffectSerializer = input.ReadObject<Microsoft.Xna.Framework.Graphics.Effect>();
            existingInstance.EffectPartsSerializer = input.ReadObject<Nine.Graphics.Effects.LinkedEffectPart[]>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>SkinnedMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SkinnedMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.SkinnedMaterial>
    {
        protected override Nine.Graphics.Effects.SkinnedMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.SkinnedMaterial existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new SkinnedMaterial(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.PreferPerPixelLighting = input.ReadObject<System.Boolean>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularPower = input.ReadObject<System.Single>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.WeightsPerVertex = input.ReadObject<System.Int32>();
            existingInstance.IsTransparent = input.ReadObject<System.Boolean>();
            existingInstance.SkinningEnabled = input.ReadObject<System.Boolean>();
            existingInstance.DepthAlphaEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Effects.EffectParts
{
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>AmbientLightEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AmbientLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.AmbientLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.AmbientLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.AmbientLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new AmbientLightEffectPart();
            }
            existingInstance.AmbientLightColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>BasicTextureEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BasicTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.BasicTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.BasicTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.BasicTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BasicTextureEffectPart();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>BeginLightEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BeginLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.BeginLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.BeginLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.BeginLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BeginLightEffectPart();
            }
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularPower = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ColorMatrixEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ColorMatrixEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ColorMatrixEffectPart();
            }
            existingInstance.ColorMatrix = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DeferredLightsEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DeferredLightsEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.DeferredLightsEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.DeferredLightsEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.DeferredLightsEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DeferredLightsEffectPart();
            }
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.EmissiveColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DetailTextureEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DetailTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.DetailTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.DetailTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.DetailTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DetailTextureEffectPart();
            }
            existingInstance.DetailTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.DetailTextureScale = input.ReadObject<Microsoft.Xna.Framework.Vector2>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DirectionalLightEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DirectionalLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DirectionalLightEffectPart();
            }
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DualTextureEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DualTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.DualTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.DualTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.DualTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DualTextureEffectPart();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>EmissiveMapEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class EmissiveMapEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.EmissiveMapEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.EmissiveMapEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.EmissiveMapEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new EmissiveMapEffectPart();
            }
            existingInstance.EmissiveMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>FogEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class FogEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.FogEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.FogEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.FogEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new FogEffectPart();
            }
            existingInstance.FogColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.FogStart = input.ReadObject<System.Single>();
            existingInstance.FogEnd = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>NormalMapEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class NormalMapEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.NormalMapEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.NormalMapEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.NormalMapEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new NormalMapEffectPart();
            }
            existingInstance.NormalMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>OverlayTextureEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class OverlayTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new OverlayTextureEffectPart();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>PointLightEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class PointLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.PointLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.PointLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.PointLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new PointLightEffectPart();
            }
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.Attenuation = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ShadowMapEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ShadowMapEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.ShadowMapEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.ShadowMapEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.ShadowMapEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ShadowMapEffectPart();
            }
            existingInstance.ShadowIntensity = input.ReadObject<System.Single>();
            existingInstance.DepthBias = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>SkinTransformEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SkinTransformEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SkinTransformEffectPart();
            }
            existingInstance.MaxBones = input.ReadObject<System.Int32>();
            existingInstance.WeightsPerVertex = input.ReadObject<System.Int32>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>SpecularMapEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SpecularMapEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SpecularMapEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SpecularMapEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SpecularMapEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SpecularMapEffectPart();
            }
            existingInstance.SpecularMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>SplatterTextureEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SplatterTextureEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SplatterTextureEffectPart();
            }
            existingInstance.TextureX = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureY = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureZ = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.TextureW = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMapX = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMapY = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMapZ = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMapW = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SplatterTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SplatterTextureScale = input.ReadObject<Microsoft.Xna.Framework.Vector2>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>SpotLightEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SpotLightEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.SpotLightEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.SpotLightEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.SpotLightEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SpotLightEffectPart();
            }
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.InnerAngle = input.ReadObject<System.Single>();
            existingInstance.OuterAngle = input.ReadObject<System.Single>();
            existingInstance.Falloff = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>TextureTransformEffectPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class TextureTransformEffectPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Effects.EffectParts.TextureTransformEffectPart>
    {
        protected override Nine.Graphics.Effects.EffectParts.TextureTransformEffectPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Effects.EffectParts.TextureTransformEffectPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new TextureTransformEffectPart();
            }
            existingInstance.TextureTransform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
#endif
}
namespace Nine.Graphics.ObjectModel
{
    /// <summary>
    /// Content reader for <c>AmbientLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AmbientLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.AmbientLight>
    {
        protected override Nine.Graphics.ObjectModel.AmbientLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.AmbientLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new AmbientLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.AmbientLightColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.CastShadow = input.ReadObject<System.Boolean>();
            existingInstance.Order = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DirectionalLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DirectionalLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DirectionalLight>
    {
        protected override Nine.Graphics.ObjectModel.DirectionalLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DirectionalLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DirectionalLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.CastShadow = input.ReadObject<System.Boolean>();
            existingInstance.Order = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DisplayObject</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DisplayObjectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DisplayObject>
    {
        protected override Nine.Graphics.ObjectModel.DisplayObject Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DisplayObject existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DisplayObject();
            }
            existingInstance.Children = input.ReadObject<System.Collections.Generic.IList<System.Object>>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DrawableModel</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DrawableModelReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DrawableModel>
    {
        protected override Nine.Graphics.ObjectModel.DrawableModel Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DrawableModel existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DrawableModel();
            }
            existingInstance.Model = input.ReadObject<Microsoft.Xna.Framework.Graphics.Model>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Effects.Material>();
            existingInstance.OverrideModelTextures = input.ReadObject<System.Boolean>();
            existingInstance.OverrideModelColors = input.ReadObject<System.Boolean>();
            existingInstance.Alpha = input.ReadObject<System.Single>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Visible = input.ReadObject<System.Boolean>();
            existingInstance.LightingEnabled = input.ReadObject<System.Boolean>();
            existingInstance.MultiPassLightingEnabled = input.ReadObject<System.Boolean>();
            existingInstance.MaxAffectingLights = input.ReadObject<System.Int32>();
            existingInstance.CastShadow = input.ReadObject<System.Boolean>();
            existingInstance.ReceiveShadow = input.ReadObject<System.Boolean>();
            existingInstance.MaxReceivedShadows = input.ReadObject<System.Int32>();
            existingInstance.MultiPassShadowEnabled = input.ReadObject<System.Boolean>();
            existingInstance.modelPartsSerializer = input.ReadObject<Nine.Graphics.ObjectModel.DrawableModelPart[]>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DrawableModelPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DrawableModelPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DrawableModelPart>
    {
        protected override Nine.Graphics.ObjectModel.DrawableModelPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DrawableModelPart existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DrawableModelPart();
            }
            existingInstance.Visible = input.ReadObject<System.Boolean>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Effects.Material>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DrawableParticleEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DrawableParticleEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DrawableParticleEffect>
    {
        protected override Nine.Graphics.ObjectModel.DrawableParticleEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DrawableParticleEffect existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new DrawableParticleEffect();
            }
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.ParticleEffect = input.ReadObject<Nine.Graphics.ParticleEffects.ParticleEffect>();
            existingInstance.Visible = input.ReadObject<System.Boolean>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DrawableSurface</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DrawableSurfaceReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DrawableSurface>
    {
        protected override Nine.Graphics.ObjectModel.DrawableSurface Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DrawableSurface existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new DrawableSurface(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.PatchSegmentCount = input.ReadObject<System.Int32>();
            existingInstance.TextureTransform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();
            existingInstance.Heightmap = input.ReadObject<Nine.Graphics.Heightmap>();
            existingInstance.VertexTypeSerializer = input.ReadObject<System.String>();
            existingInstance.LevelOfDetailStart = input.ReadObject<System.Single>();
            existingInstance.LevelOfDetailEnd = input.ReadObject<System.Single>();
            existingInstance.LevelOfDetailEnabled = input.ReadObject<System.Boolean>();
            existingInstance.Visible = input.ReadObject<System.Boolean>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Effects.Material>();
            existingInstance.LightingEnabled = input.ReadObject<System.Boolean>();
            existingInstance.CastShadow = input.ReadObject<System.Boolean>();
            existingInstance.ReceiveShadow = input.ReadObject<System.Boolean>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DrawableSurfacePatch</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class DrawableSurfacePatchReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DrawableSurfacePatch>
    {
        protected override Nine.Graphics.ObjectModel.DrawableSurfacePatch Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DrawableSurfacePatch existingInstance)
        {
            existingInstance.Visible = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Fog</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class FogReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.Fog>
    {
        protected override Nine.Graphics.ObjectModel.Fog Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.Fog existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new Fog();
            }
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.FogStart = input.ReadObject<System.Single>();
            existingInstance.FogEnd = input.ReadObject<System.Single>();
            existingInstance.FogColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.FogEnabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class PointLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.PointLight>
    {
        protected override Nine.Graphics.ObjectModel.PointLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.PointLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new PointLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.CastShadow = input.ReadObject<System.Boolean>();
            existingInstance.Order = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SkyBox</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SkyBoxReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.SkyBox>
    {
        protected override Nine.Graphics.ObjectModel.SkyBox Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.SkyBox existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SkyBox();
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.TextureCube>();
            existingInstance.Visible = input.ReadObject<System.Boolean>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpotLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SpotLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.SpotLight>
    {
        protected override Nine.Graphics.ObjectModel.SpotLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.SpotLight existingInstance)
        {
            if (existingInstance == null)
            {
                var graphicsDeviceService = (Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                      typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService));
                existingInstance = new SpotLight(graphicsDeviceService.GraphicsDevice);
            }
            existingInstance.SpecularColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.DiffuseColor = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Range = input.ReadObject<System.Single>();
            existingInstance.Attenuation = input.ReadObject<System.Single>();
            existingInstance.InnerAngle = input.ReadObject<System.Single>();
            existingInstance.OuterAngle = input.ReadObject<System.Single>();
            existingInstance.Falloff = input.ReadObject<System.Single>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();
            existingInstance.CastShadow = input.ReadObject<System.Boolean>();
            existingInstance.Order = input.ReadObject<System.Single>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Transform = input.ReadObject<Microsoft.Xna.Framework.Matrix>();

            return existingInstance;
        }
    }
}
namespace Nine.Graphics.ParticleEffects
{
    /// <summary>
    /// Content reader for <c>AbsorbController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class AbsorbControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.AbsorbController>
    {
        protected override Nine.Graphics.ParticleEffects.AbsorbController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.AbsorbController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new AbsorbController();
            }
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Force = input.ReadObject<System.Single>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BoxEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class BoxEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.BoxEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.BoxEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.BoxEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new BoxEmitter();
            }
            existingInstance.Transform = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Box = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ColorControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ColorController>
    {
        protected override Nine.Graphics.ParticleEffects.ColorController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ColorController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ColorController();
            }
            existingInstance.EndColor = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CylinderEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class CylinderEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.CylinderEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.CylinderEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.CylinderEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new CylinderEmitter();
            }
            existingInstance.Shell = input.ReadObject<System.Boolean>();
            existingInstance.Radiate = input.ReadObject<System.Boolean>();
            existingInstance.Height = input.ReadObject<System.Single>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Up = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Radius = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FadeController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class FadeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.FadeController>
    {
        protected override Nine.Graphics.ParticleEffects.FadeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.FadeController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new FadeController();
            }
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ForceController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class ForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ForceController>
    {
        protected override Nine.Graphics.ParticleEffects.ForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ForceController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new ForceController();
            }
            existingInstance.Force = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>LineEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class LineEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.LineEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.LineEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.LineEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new LineEmitter();
            }
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();
            existingInstance.LineList = input.ReadObject<System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Vector3>>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class PointEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.PointEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.PointEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.PointEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new PointEmitter();
            }
            existingInstance.Position = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>RotationController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class RotationControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.RotationController>
    {
        protected override Nine.Graphics.ParticleEffects.RotationController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.RotationController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new RotationController();
            }
            existingInstance.EndRotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SizeController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SizeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SizeController>
    {
        protected override Nine.Graphics.ParticleEffects.SizeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SizeController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SizeController();
            }
            existingInstance.EndSize = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpeedController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SpeedControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SpeedController>
    {
        protected override Nine.Graphics.ParticleEffects.SpeedController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SpeedController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SpeedController();
            }
            existingInstance.EndSpeed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SphereEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class SphereEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SphereEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.SphereEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SphereEmitter existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new SphereEmitter();
            }
            existingInstance.Shell = input.ReadObject<System.Boolean>();
            existingInstance.Radiate = input.ReadObject<System.Boolean>();
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Radius = input.ReadObject<System.Single>();
            existingInstance.Direction = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Spread = input.ReadObject<System.Single>();

            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TangentForceController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    class TangentForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.TangentForceController>
    {
        protected override Nine.Graphics.ParticleEffects.TangentForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.TangentForceController existingInstance)
        {
            if (existingInstance == null)
            {
                existingInstance = new TangentForceController();
            }
            existingInstance.Force = input.ReadObject<System.Single>();
            existingInstance.Up = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Center = input.ReadObject<Microsoft.Xna.Framework.Vector3>();
            existingInstance.Enabled = input.ReadObject<System.Boolean>();

            return existingInstance;
        }
    }
}
#endif