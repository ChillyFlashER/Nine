// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------

#if !TEXT_TEMPLATE
namespace Nine.Animations
{
    /// <summary>
    /// Content reader for <c>BoneAnimationClip</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoneAnimationClipReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.BoneAnimationClip>
    {
        protected override Nine.Animations.BoneAnimationClip Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.BoneAnimationClip existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new BoneAnimationClip();
            existingInstance.FramesPerSecond = input.ReadInt32();
            existingInstance.TotalFrames = input.ReadInt32();
            existingInstance.PreferredEnding = input.ReadObject<Nine.Animations.KeyframeEnding>();
            existingInstance.Transforms = input.ReadObject<Microsoft.Xna.Framework.Matrix[][]>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpriteAnimation</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpriteAnimationReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Animations.SpriteAnimation>
    {
        protected override Nine.Animations.SpriteAnimation Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Animations.SpriteAnimation existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SpriteAnimation();
            existingInstance.TextureList = input.ReadObject<Nine.Graphics.TextureList>();
            existingInstance.TargetProperty = input.ReadObject<System.String>();
            existingInstance.BeginFrame = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.EndFrame = input.ReadObject<System.Nullable<System.Int32>>();
            existingInstance.FramesPerSecond = input.ReadSingle();
            existingInstance.Ending = input.ReadObject<Nine.Animations.KeyframeEnding>();
            existingInstance.BeginTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.EndTime = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.Speed = input.ReadSingle();
            existingInstance.AutoReverse = input.ReadBoolean();
            existingInstance.StartupDirection = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Direction = input.ReadObject<Nine.Animations.AnimationDirection>();
            existingInstance.Repeat = input.ReadSingle();
            existingInstance.Position = input.ReadObject<System.TimeSpan>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics
{
    /// <summary>
    /// Content reader for <c>Geometry</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class GeometryReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Geometry>
    {
        protected override Nine.Graphics.Geometry Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Geometry existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Geometry();
            existingInstance.BoundingSphere = input.ReadObject<Microsoft.Xna.Framework.BoundingSphere>();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Positions = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Indices = input.ReadObject<System.UInt16[]>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelCollision</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelCollisionReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelCollision>
    {
        protected override Nine.Graphics.ModelCollision Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelCollision existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ModelCollision();
            existingInstance.CollisionTree = input.ReadObject<Nine.Octree<System.Boolean>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelMeshPartTag</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelMeshPartTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelMeshPartTag>
    {
        protected override Nine.Graphics.ModelMeshPartTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelMeshPartTag existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ModelMeshPartTag();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Textures = input.ReadObject<System.Collections.Generic.Dictionary<Nine.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.Texture>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelSkeletonData</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelSkeletonDataReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelSkeletonData>
    {
        protected override Nine.Graphics.ModelSkeletonData Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelSkeletonData existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ModelSkeletonData();
            existingInstance.InverseAbsoluteBindPose = input.ReadObject<System.Collections.Generic.List<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.SkeletonRoot = input.ReadInt32();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelTag</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelTagReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ModelTag>
    {
        protected override Nine.Graphics.ModelTag Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ModelTag existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ModelTag();
            existingInstance.Skeleton = input.ReadObject<Nine.Graphics.ModelSkeletonData>();
            existingInstance.Collision = input.ReadObject<Nine.Graphics.ModelCollision>();
            existingInstance.Animations = input.ReadObject<System.Collections.Generic.Dictionary<System.String, Nine.Animations.BoneAnimationClip>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Scene</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SceneReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Scene>
    {
        protected override Nine.Graphics.Scene Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Scene existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Scene(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Children.Add(input.ReadObject<System.Object>());
            }
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.TransformBindings.Add(input.ReadObject<Nine.Graphics.ObjectModel.TransformBinding>());
            }
            existingInstance.Animations = input.ReadObject<Nine.Animations.AnimationPlayer>();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.DetailLevels.Add(input.ReadObject<System.Object>());
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Cameras
{
    /// <summary>
    /// Content reader for <c>Camera</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CameraReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Cameras.Camera>
    {
        protected override Nine.Graphics.Cameras.Camera Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Cameras.Camera existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Camera(graphicsDevice);
            }
            existingInstance.NearPlane = input.ReadSingle();
            existingInstance.FarPlane = input.ReadSingle();
            existingInstance.FieldOfView = input.ReadSingle();
            existingInstance.Viewport = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Graphics.Viewport>>();
            existingInstance.ViewportScale = input.ReadObject<Nine.BoundingRectangle>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Drawing
{
    /// <summary>
    /// Content reader for <c>DrawingPass</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DrawingPassReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Drawing.DrawingPass>
    {
        protected override Nine.Graphics.Drawing.DrawingPass Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Drawing.DrawingPass existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DrawingPass();
            existingInstance.SortEnabled = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.DefaultMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialUsage = input.ReadObject<Nine.Graphics.Materials.MaterialUsage>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PassGroup</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PassGroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Drawing.PassGroup>
    {
        protected override Nine.Graphics.Drawing.PassGroup Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Drawing.PassGroup existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new PassGroup();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Passes.Add(input.ReadObject<Nine.Graphics.Drawing.Pass>());
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Materials
{
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>AdoptionMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AdoptionMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.AdoptionMaterial>
    {
        protected override Nine.Graphics.Materials.AdoptionMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.AdoptionMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new AdoptionMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>AlphaTestMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AlphaTestMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.AlphaTestMaterial>
    {
        protected override Nine.Graphics.Materials.AlphaTestMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.AlphaTestMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new AlphaTestMaterial(graphicsDevice);
            }
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.ReferenceAlpha = input.ReadInt32();
            existingInstance.AlphaFunction = input.ReadObject<Microsoft.Xna.Framework.Graphics.CompareFunction>();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>AntiAliasMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AntiAliasMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.AntiAliasMaterial>
    {
        protected override Nine.Graphics.Materials.AntiAliasMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.AntiAliasMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new AntiAliasMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>BasicMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BasicMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.BasicMaterial>
    {
        protected override Nine.Graphics.Materials.BasicMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.BasicMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new BasicMaterial(graphicsDevice);
            }
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.SpecularPower = input.ReadSingle();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.LightingEnabled = input.ReadBoolean();
            existingInstance.PreferPerPixelLighting = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>BlurMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BlurMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.BlurMaterial>
    {
        protected override Nine.Graphics.Materials.BlurMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.BlurMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new BlurMaterial(graphicsDevice);
            }
            existingInstance.BlurAmount = input.ReadSingle();
            existingInstance.Direction = input.ReadSingle();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ClearMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ClearMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.ClearMaterial>
    {
        protected override Nine.Graphics.Materials.ClearMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.ClearMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ClearMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ColorMatrixMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ColorMatrixMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.ColorMatrixMaterial>
    {
        protected override Nine.Graphics.Materials.ColorMatrixMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.ColorMatrixMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ColorMatrixMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>CustomMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CustomMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.CustomMaterialPart>
    {
        protected override Nine.Graphics.Materials.CustomMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.CustomMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new CustomMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.DefaultShaderCode = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DecalMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DecalMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DecalMaterial>
    {
        protected override Nine.Graphics.Materials.DecalMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DecalMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DecalMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DeferredAmbientLightMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DeferredAmbientLightMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DeferredAmbientLightMaterial>
    {
        protected override Nine.Graphics.Materials.DeferredAmbientLightMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DeferredAmbientLightMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DeferredAmbientLightMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DeferredDirectionalLightMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DeferredDirectionalLightMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DeferredDirectionalLightMaterial>
    {
        protected override Nine.Graphics.Materials.DeferredDirectionalLightMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DeferredDirectionalLightMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DeferredDirectionalLightMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DeferredMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DeferredMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DeferredMaterial>
    {
        protected override Nine.Graphics.Materials.DeferredMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DeferredMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DeferredMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DeferredPointLightMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DeferredPointLightMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DeferredPointLightMaterial>
    {
        protected override Nine.Graphics.Materials.DeferredPointLightMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DeferredPointLightMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DeferredPointLightMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DeferredSpotLightMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DeferredSpotLightMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DeferredSpotLightMaterial>
    {
        protected override Nine.Graphics.Materials.DeferredSpotLightMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DeferredSpotLightMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DeferredSpotLightMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DepthMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DepthMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DepthMaterial>
    {
        protected override Nine.Graphics.Materials.DepthMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DepthMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DepthMaterial(graphicsDevice);
            }
            existingInstance.SkinningEnabled = input.ReadBoolean();
            existingInstance.TextureEnabled = input.ReadBoolean();
            existingInstance.ReferenceAlpha = input.ReadInt32();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DepthOfFieldMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DepthOfFieldMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DepthOfFieldMaterial>
    {
        protected override Nine.Graphics.Materials.DepthOfFieldMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DepthOfFieldMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DepthOfFieldMaterial(graphicsDevice);
            }
            existingInstance.FocalLength = input.ReadSingle();
            existingInstance.FocalPlane = input.ReadSingle();
            existingInstance.FocalDistance = input.ReadSingle();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>DualTextureMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DualTextureMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.DualTextureMaterial>
    {
        protected override Nine.Graphics.Materials.DualTextureMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.DualTextureMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DualTextureMaterial(graphicsDevice);
            }
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.Texture2 = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.PreferPerPixelLighting = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>EmbossMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class EmbossMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.EmbossMaterial>
    {
        protected override Nine.Graphics.Materials.EmbossMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.EmbossMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new EmbossMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>EnvironmentMapMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class EnvironmentMapMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.EnvironmentMapMaterial>
    {
        protected override Nine.Graphics.Materials.EnvironmentMapMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.EnvironmentMapMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new EnvironmentMapMaterial(graphicsDevice);
            }
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.FresnelFactor = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.EnvironmentMapAmount = input.ReadSingle();
            existingInstance.EnvironmentMapSpecular = input.ReadVector3();
            existingInstance.EnvironmentMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.TextureCube>();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>GraphicsBufferMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class GraphicsBufferMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.GraphicsBufferMaterial>
    {
        protected override Nine.Graphics.Materials.GraphicsBufferMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.GraphicsBufferMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new GraphicsBufferMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>LuminanceMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class LuminanceMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.LuminanceMaterial>
    {
        protected override Nine.Graphics.Materials.LuminanceMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.LuminanceMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new LuminanceMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>MaterialLevelOfDetail</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class MaterialLevelOfDetailReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialLevelOfDetail>
    {
        protected override Nine.Graphics.Materials.MaterialLevelOfDetail Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialLevelOfDetail existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new MaterialLevelOfDetail();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.MaterialLevels.Add(input.ReadObject<Nine.Graphics.Materials.Material>());
            }
            existingInstance.LevelOfDetailStart = input.ReadSingle();
            existingInstance.LevelOfDetailEnd = input.ReadSingle();
            existingInstance.MaterialQuality = input.ReadSingle();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>MaterialPaintGroup</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class MaterialPaintGroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialPaintGroup>
    {
        protected override Nine.Graphics.Materials.MaterialPaintGroup Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialPaintGroup existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new MaterialPaintGroup();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.MaterialParts.Add(input.ReadObject<Nine.Graphics.Materials.MaterialPart>());
            }
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>NoiseMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class NoiseMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.NoiseMaterial>
    {
        protected override Nine.Graphics.Materials.NoiseMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.NoiseMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new NoiseMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>PixelateMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PixelateMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.PixelateMaterial>
    {
        protected override Nine.Graphics.Materials.PixelateMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.PixelateMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new PixelateMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>RadialBlurMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class RadialBlurMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.RadialBlurMaterial>
    {
        protected override Nine.Graphics.Materials.RadialBlurMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.RadialBlurMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new RadialBlurMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ScaleMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ScaleMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.ScaleMaterial>
    {
        protected override Nine.Graphics.Materials.ScaleMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.ScaleMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ScaleMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ShadowMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ShadowMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.ShadowMaterial>
    {
        protected override Nine.Graphics.Materials.ShadowMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.ShadowMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ShadowMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>SkinnedMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SkinnedMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.SkinnedMaterial>
    {
        protected override Nine.Graphics.Materials.SkinnedMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.SkinnedMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new SkinnedMaterial(graphicsDevice);
            }
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.SpecularPower = input.ReadSingle();
            existingInstance.WeightsPerVertex = input.ReadInt32();
            existingInstance.PreferPerPixelLighting = input.ReadBoolean();
            existingInstance.SkinningEnabled = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ThresholdMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ThresholdMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.ThresholdMaterial>
    {
        protected override Nine.Graphics.Materials.ThresholdMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.ThresholdMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ThresholdMaterial(graphicsDevice);
            }
            existingInstance.Threshold = input.ReadSingle();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>ToneMappingMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ToneMappingMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.ToneMappingMaterial>
    {
        protected override Nine.Graphics.Materials.ToneMappingMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.ToneMappingMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ToneMappingMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>VertexPassThroughMaterial</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class VertexPassThroughMaterialReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.VertexPassThroughMaterial>
    {
        protected override Nine.Graphics.Materials.VertexPassThroughMaterial Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.VertexPassThroughMaterial existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new VertexPassThroughMaterial(graphicsDevice);
            }
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.IsTransparent = input.ReadBoolean();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.TwoSided = input.ReadBoolean();
            existingInstance.NextMaterial = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
}
namespace Nine.Graphics.Materials.MaterialParts
{
    /// <summary>
    /// Content reader for <c>AlphaTestMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AlphaTestMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.AlphaTestMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.AlphaTestMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.AlphaTestMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new AlphaTestMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.AlphaFunction = input.ReadObject<Microsoft.Xna.Framework.Graphics.CompareFunction>();
            existingInstance.ReferenceAlpha = input.ReadInt32();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>AmbientLightMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AmbientLightMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.AmbientLightMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.AmbientLightMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.AmbientLightMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new AmbientLightMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BeginLightMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BeginLightMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.BeginLightMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.BeginLightMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.BeginLightMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new BeginLightMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BeginPaintGroupMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BeginPaintGroupMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.BeginPaintGroupMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.BeginPaintGroupMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.BeginPaintGroupMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new BeginPaintGroupMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorMatrixMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ColorMatrixMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.ColorMatrixMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.ColorMatrixMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.ColorMatrixMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ColorMatrixMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.ColorMatrix = input.ReadMatrix();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DetailMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DetailMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.DetailMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.DetailMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.DetailMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DetailMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.DetailTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.DetailTextureScale = input.ReadVector2();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DiffuseMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DiffuseMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.DiffuseMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DiffuseMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.VertexColorEnabled = input.ReadBoolean();
            existingInstance.DiffuseColorEnabled = input.ReadBoolean();
            existingInstance.TextureEnabled = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.OverlayColor = input.ReadVector3();
            existingInstance.TextureAlphaUsage = input.ReadObject<Nine.Graphics.Materials.MaterialParts.TextureAlphaUsage>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DirectionalLightMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DirectionalLightMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.DirectionalLightMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.DirectionalLightMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.DirectionalLightMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DirectionalLightMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DualTextureMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DualTextureMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.DualTextureMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.DualTextureMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.DualTextureMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DualTextureMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Texture2 = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>EmissiveMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class EmissiveMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.EmissiveMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new EmissiveMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.EmissiveMapEnabled = input.ReadBoolean();
            existingInstance.EmissiveColorEnabled = input.ReadBoolean();
            existingInstance.EmissiveMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.EmissiveColor = input.ReadVector3();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>EndLightMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class EndLightMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.EndLightMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.EndLightMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.EndLightMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new EndLightMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>EndPaintGroupMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class EndPaintGroupMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.EndPaintGroupMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.EndPaintGroupMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.EndPaintGroupMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new EndPaintGroupMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FogMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FogMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.FogMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.FogMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.FogMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new FogMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>InstancedMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class InstancedMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.InstancedMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.InstancedMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.InstancedMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new InstancedMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>NormalMapMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class NormalMapMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.NormalMapMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.NormalMapMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.NormalMapMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new NormalMapMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.NormalMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ShadowMapMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ShadowMapMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.ShadowMapMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ShadowMapMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.ShadowColor = input.ReadVector3();
            existingInstance.DepthBias = input.ReadSingle();
            existingInstance.LightViewProjection = input.ReadMatrix();
            existingInstance.ShadowMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SampleCount = input.ReadInt32();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SkinnedMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SkinnedMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.SkinnedMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SkinnedMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.MaxBones = input.ReadInt32();
            existingInstance.WeightsPerVertex = input.ReadInt32();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpecularMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpecularMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.SpecularMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SpecularMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.SpecularMapEnabled = input.ReadBoolean();
            existingInstance.SpecularColorEnabled = input.ReadBoolean();
            existingInstance.SpecularMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.SpecularPower = input.ReadSingle();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TangentTransformMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TangentTransformMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.TangentTransformMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.TangentTransformMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.TangentTransformMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new TangentTransformMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TextureTransformMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TextureTransformMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.TextureTransformMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.TextureTransformMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.TextureTransformMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new TextureTransformMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.TextureTransform = input.ReadMatrix();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>VertexTransformMaterialPart</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class VertexTransformMaterialPartReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Materials.MaterialParts.VertexTransformMaterialPart>
    {
        protected override Nine.Graphics.Materials.MaterialParts.VertexTransformMaterialPart Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Materials.MaterialParts.VertexTransformMaterialPart existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new VertexTransformMaterialPart();
            existingInstance.ParameterSuffix = input.ReadObject<System.String>();
            existingInstance.Name = input.ReadObject<System.String>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.ObjectModel
{
    /// <summary>
    /// Content reader for <c>AmbientLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AmbientLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.AmbientLight>
    {
        protected override Nine.Graphics.ObjectModel.AmbientLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.AmbientLight existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new AmbientLight(graphicsDevice);
            }
            existingInstance.AmbientLightColor = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Order = input.ReadSingle();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Decal</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DecalReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.Decal>
    {
        protected override Nine.Graphics.ObjectModel.Decal Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.Decal existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Decal(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.IsDynamic = input.ReadBoolean();
            existingInstance.Alpha = input.ReadSingle();
            existingInstance.Color = input.ReadVector3();
            existingInstance.Size = input.ReadVector3();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.DepthBias = input.ReadSingle();
            existingInstance.LightingEnabled = input.ReadBoolean();
            existingInstance.NormalMappingEnabled = input.ReadBoolean();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.NormalMap = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Duration = input.ReadObject<System.Nullable<System.TimeSpan>>();
            existingInstance.FadeDuration = input.ReadObject<System.TimeSpan>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DirectionalLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DirectionalLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DirectionalLight>
    {
        protected override Nine.Graphics.ObjectModel.DirectionalLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DirectionalLight existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DirectionalLight(graphicsDevice);
            }
            existingInstance.Direction = input.ReadVector3();
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Order = input.ReadSingle();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>DrawingGroup</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DrawingGroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.DrawingGroup>
    {
        protected override Nine.Graphics.ObjectModel.DrawingGroup Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.DrawingGroup existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new DrawingGroup();
            existingInstance.Visible = input.ReadBoolean();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Children.Add(input.ReadObject<System.Object>());
            }
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.TransformBindings.Add(input.ReadObject<Nine.Graphics.ObjectModel.TransformBinding>());
            }
            existingInstance.Animations = input.ReadObject<Nine.Animations.AnimationPlayer>();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.DetailLevels.Add(input.ReadObject<System.Object>());
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Fog</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FogReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.Fog>
    {
        protected override Nine.Graphics.ObjectModel.Fog Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.Fog existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Fog();
            existingInstance.FogStart = input.ReadSingle();
            existingInstance.FogEnd = input.ReadSingle();
            existingInstance.FogColor = input.ReadVector3();
            existingInstance.FogEnabled = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Heightmap</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class HeightmapReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.Heightmap>
    {
        protected override Nine.Graphics.ObjectModel.Heightmap Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.Heightmap existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new Heightmap();
            existingInstance.Size = input.ReadVector3();
            existingInstance.Step = input.ReadSingle();
            existingInstance.Heights = input.ReadObject<System.Single[]>();
            existingInstance.Normals = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Tangents = input.ReadObject<Microsoft.Xna.Framework.Vector3[]>();
            existingInstance.Width = input.ReadInt32();
            existingInstance.Height = input.ReadInt32();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.BoundingBox = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>InstancedModel</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class InstancedModelReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.InstancedModel>
    {
        protected override Nine.Graphics.ObjectModel.InstancedModel Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.InstancedModel existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new InstancedModel(graphicsDevice);
            }
            existingInstance.instanceTransforms = input.ReadObject<Microsoft.Xna.Framework.Matrix[]>();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Template = input.ReadObject<Nine.Graphics.ObjectModel.ISupportInstancing>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Model</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.Model>
    {
        protected override Nine.Graphics.ObjectModel.Model Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.Model existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Model(graphicsDevice);
            }
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.ModelMeshes.Add(input.ReadObject<Nine.Graphics.ObjectModel.ModelMesh>());
            }
            existingInstance.Source = input.ReadObject<Microsoft.Xna.Framework.Graphics.Model>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.UseModelTextures = input.ReadBoolean();
            existingInstance.LightingEnabled = input.ReadBoolean();
            existingInstance.MultiPassLightingEnabled = input.ReadBoolean();
            existingInstance.MaxAffectingLights = input.ReadInt32();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.ReceiveShadow = input.ReadBoolean();
            existingInstance.MaxReceivedShadows = input.ReadInt32();
            existingInstance.MultiPassShadowEnabled = input.ReadBoolean();
            existingInstance.SharedSkeleton = input.ReadObject<Nine.Graphics.Skeleton>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ModelMesh</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ModelMeshReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.ModelMesh>
    {
        protected override Nine.Graphics.ObjectModel.ModelMesh Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.ModelMesh existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ModelMesh();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.UseModelTextures = input.ReadObject<System.Nullable<System.Boolean>>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PointLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.PointLight>
    {
        protected override Nine.Graphics.ObjectModel.PointLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.PointLight existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new PointLight(graphicsDevice);
            }
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.Range = input.ReadSingle();
            existingInstance.Attenuation = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Order = input.ReadSingle();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SkyBox</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SkyBoxReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.SkyBox>
    {
        protected override Nine.Graphics.ObjectModel.SkyBox Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.SkyBox existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new SkyBox(graphicsDevice);
            }
            existingInstance.Color = input.ReadVector3();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.TextureCube>();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpotLight</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpotLightReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.SpotLight>
    {
        protected override Nine.Graphics.ObjectModel.SpotLight Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.SpotLight existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new SpotLight(graphicsDevice);
            }
            existingInstance.SpecularColor = input.ReadVector3();
            existingInstance.DiffuseColor = input.ReadVector3();
            existingInstance.Range = input.ReadSingle();
            existingInstance.Attenuation = input.ReadSingle();
            existingInstance.InnerAngle = input.ReadSingle();
            existingInstance.OuterAngle = input.ReadSingle();
            existingInstance.Falloff = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.Order = input.ReadSingle();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Surface</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SurfaceReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.Surface>
    {
        protected override Nine.Graphics.ObjectModel.Surface Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.Surface existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Surface(graphicsDevice);
            }
            existingInstance.PatchSegmentCount = input.ReadInt32();
            existingInstance.TextureTransform = input.ReadMatrix();
            existingInstance.Heightmap = input.ReadObject<Nine.Graphics.ObjectModel.Heightmap>();
            existingInstance.VertexTypeSerializer = input.ReadObject<System.String>();
            existingInstance.LevelOfDetailStart = input.ReadSingle();
            existingInstance.LevelOfDetailEnd = input.ReadSingle();
            existingInstance.LevelOfDetailEnabled = input.ReadBoolean();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.LightingEnabled = input.ReadBoolean();
            existingInstance.CastShadow = input.ReadBoolean();
            existingInstance.ReceiveShadow = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SurfacePatch</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SurfacePatchReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.SurfacePatch>
    {
        protected override Nine.Graphics.ObjectModel.SurfacePatch Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.SurfacePatch existingInstance)
        {
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Tag = input.ReadObject<System.Object>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TransformBinding</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TransformBindingReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ObjectModel.TransformBinding>
    {
        protected override Nine.Graphics.ObjectModel.TransformBinding Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ObjectModel.TransformBinding existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new TransformBinding();
            existingInstance.SourceName = input.ReadString();
            existingInstance.TargetName = input.ReadString();
            existingInstance.Transform = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.TargetBone = input.ReadObject<System.String>();
            existingInstance.UseBoneScale = input.ReadBoolean();
            existingInstance.ShareSkeleton = input.ReadBoolean();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.ParticleEffects
{
    /// <summary>
    /// Content reader for <c>AbsorbController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class AbsorbControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.AbsorbController>
    {
        protected override Nine.Graphics.ParticleEffects.AbsorbController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.AbsorbController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new AbsorbController();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Force = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>BoxEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoxEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.BoxEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.BoxEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.BoxEmitter existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new BoxEmitter();
            existingInstance.Transform = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Box = input.ReadObject<Microsoft.Xna.Framework.BoundingBox>();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Direction = input.ReadVector3();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ColorController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ColorControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ColorController>
    {
        protected override Nine.Graphics.ParticleEffects.ColorController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ColorController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ColorController();
            existingInstance.EndColor = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CylinderEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CylinderEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.CylinderEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.CylinderEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.CylinderEmitter existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new CylinderEmitter();
            existingInstance.Shell = input.ReadBoolean();
            existingInstance.Radiate = input.ReadBoolean();
            existingInstance.Height = input.ReadSingle();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Up = input.ReadVector3();
            existingInstance.Radius = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Direction = input.ReadVector3();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>FadeController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class FadeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.FadeController>
    {
        protected override Nine.Graphics.ParticleEffects.FadeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.FadeController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new FadeController();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ForceController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ForceController>
    {
        protected override Nine.Graphics.ParticleEffects.ForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ForceController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new ForceController();
            existingInstance.Force = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>LineEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class LineEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.LineEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.LineEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.LineEmitter existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new LineEmitter();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.LineList = input.ReadObject<System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Vector3>>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Direction = input.ReadVector3();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>ParticleEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class ParticleEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.ParticleEffect>
    {
        protected override Nine.Graphics.ParticleEffects.ParticleEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.ParticleEffect existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new ParticleEffect(graphicsDevice);
            }
            existingInstance.ParticleType = input.ReadObject<Nine.Graphics.ParticleEffects.ParticleType>();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Stretch = input.ReadSingle();
            existingInstance.Texture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SourceRectangle = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Rectangle>>();
            existingInstance.IsAdditive = input.ReadBoolean();
            existingInstance.SoftParticleEnabled = input.ReadBoolean();
            existingInstance.SoftParticleFade = input.ReadSingle();
            existingInstance.IsAsync = input.ReadBoolean();
            existingInstance.Emitter = input.ReadObject<Nine.Graphics.ParticleEffects.IParticleEmitter>();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Controllers.Add(input.ReadObject<Nine.Graphics.ParticleEffects.IParticleController>());
            }
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PointEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PointEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.PointEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.PointEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.PointEmitter existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new PointEmitter();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Direction = input.ReadVector3();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>RotationController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class RotationControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.RotationController>
    {
        protected override Nine.Graphics.ParticleEffects.RotationController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.RotationController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new RotationController();
            existingInstance.EndRotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SizeController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SizeControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SizeController>
    {
        protected override Nine.Graphics.ParticleEffects.SizeController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SizeController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SizeController();
            existingInstance.EndSize = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SpeedController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SpeedControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SpeedController>
    {
        protected override Nine.Graphics.ParticleEffects.SpeedController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SpeedController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SpeedController();
            existingInstance.EndSpeed = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SphereEmitter</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SphereEmitterReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.SphereEmitter>
    {
        protected override Nine.Graphics.ParticleEffects.SphereEmitter Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.SphereEmitter existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new SphereEmitter();
            existingInstance.Shell = input.ReadBoolean();
            existingInstance.Radiate = input.ReadBoolean();
            existingInstance.Radius = input.ReadSingle();
            existingInstance.Spread = input.ReadSingle();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.EmitCount = input.ReadInt32();
            existingInstance.Emission = input.ReadSingle();
            existingInstance.Delay = input.ReadObject<System.TimeSpan>();
            existingInstance.Lifetime = input.ReadObject<System.TimeSpan>();
            existingInstance.Position = input.ReadVector3();
            existingInstance.Direction = input.ReadVector3();
            existingInstance.Duration = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Color = input.ReadObject<Nine.Range<Microsoft.Xna.Framework.Color>>();
            existingInstance.Size = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Rotation = input.ReadObject<Nine.Range<System.Single>>();
            existingInstance.Speed = input.ReadObject<Nine.Range<System.Single>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>TangentForceController</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TangentForceControllerReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.ParticleEffects.TangentForceController>
    {
        protected override Nine.Graphics.ParticleEffects.TangentForceController Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.ParticleEffects.TangentForceController existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new TangentForceController();
            existingInstance.Force = input.ReadSingle();
            existingInstance.Up = input.ReadVector3();
            existingInstance.Center = input.ReadVector3();
            existingInstance.Enabled = input.ReadBoolean();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.PostEffects
{
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>BloomEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BloomEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.BloomEffect>
    {
        protected override Nine.Graphics.PostEffects.BloomEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.BloomEffect existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new BloomEffect(graphicsDevice);
            }
            existingInstance.Threshold = input.ReadSingle();
            existingInstance.BlurAmount = input.ReadSingle();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Passes.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffectChain>());
            }
            existingInstance.InputTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>BlurEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BlurEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.BlurEffect>
    {
        protected override Nine.Graphics.PostEffects.BlurEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.BlurEffect existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new BlurEffect(graphicsDevice);
            }
            existingInstance.BlurAmount = input.ReadSingle();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Effects.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffect>());
            }
            existingInstance.TextureUsage = input.ReadObject<Nine.Graphics.TextureUsage>();
            existingInstance.BlendState = input.ReadObject<Microsoft.Xna.Framework.Graphics.BlendState>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>DepthOfFieldEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DepthOfFieldEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.DepthOfFieldEffect>
    {
        protected override Nine.Graphics.PostEffects.DepthOfFieldEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.DepthOfFieldEffect existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new DepthOfFieldEffect(graphicsDevice);
            }
            existingInstance.FocalLength = input.ReadSingle();
            existingInstance.FocalPlane = input.ReadSingle();
            existingInstance.FocalDistance = input.ReadSingle();
            existingInstance.BlurAmount = input.ReadSingle();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Passes.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffectChain>());
            }
            existingInstance.InputTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>HighDynamicRangeEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class HighDynamicRangeEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.HighDynamicRangeEffect>
    {
        protected override Nine.Graphics.PostEffects.HighDynamicRangeEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.HighDynamicRangeEffect existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new HighDynamicRangeEffect(graphicsDevice);
            }
            existingInstance.Threshold = input.ReadSingle();
            existingInstance.BlurAmount = input.ReadSingle();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Passes.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffectChain>());
            }
            existingInstance.InputTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>LuminanceChain</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class LuminanceChainReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.LuminanceChain>
    {
        protected override Nine.Graphics.PostEffects.LuminanceChain Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.LuminanceChain existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new LuminanceChain(graphicsDevice);
            }
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Effects.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffect>());
            }
            existingInstance.TextureUsage = input.ReadObject<Nine.Graphics.TextureUsage>();
            existingInstance.BlendState = input.ReadObject<Microsoft.Xna.Framework.Graphics.BlendState>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#if !WINDOWS_PHONE
    /// <summary>
    /// Content reader for <c>PostEffect</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PostEffectReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.PostEffect>
    {
        protected override Nine.Graphics.PostEffects.PostEffect Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.PostEffect existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new PostEffect();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.InputTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.SurfaceFormat = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Graphics.SurfaceFormat>>();
            existingInstance.RenderTargetSize = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Vector2>>();
            existingInstance.RenderTargetScale = input.ReadSingle();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
#endif
    /// <summary>
    /// Content reader for <c>PostEffectChain</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PostEffectChainReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.PostEffectChain>
    {
        protected override Nine.Graphics.PostEffects.PostEffectChain Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.PostEffectChain existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new PostEffectChain();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Effects.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffect>());
            }
            existingInstance.TextureUsage = input.ReadObject<Nine.Graphics.TextureUsage>();
            existingInstance.BlendState = input.ReadObject<Microsoft.Xna.Framework.Graphics.BlendState>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PostEffectGroup</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PostEffectGroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.PostEffects.PostEffectGroup>
    {
        protected override Nine.Graphics.PostEffects.PostEffectGroup Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.PostEffects.PostEffectGroup existingInstance)
        {
            if (existingInstance == null)
                existingInstance = new PostEffectGroup();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Passes.Add(input.ReadObject<Nine.Graphics.PostEffects.PostEffectChain>());
            }
            existingInstance.InputTexture = input.ReadObject<Microsoft.Xna.Framework.Graphics.Texture2D>();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Enabled = input.ReadBoolean();
            existingInstance.Order = input.ReadInt32();
            existingInstance.View = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.Projection = input.ReadObject<System.Nullable<Microsoft.Xna.Framework.Matrix>>();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
}
namespace Nine.Graphics.Primitives
{
    /// <summary>
    /// Content reader for <c>Box</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class BoxReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Box>
    {
        protected override Nine.Graphics.Primitives.Box Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Box existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Box(graphicsDevice);
            }
            existingInstance.IsSolid = input.ReadBoolean();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Centrum</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CentrumReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Centrum>
    {
        protected override Nine.Graphics.Primitives.Centrum Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Centrum existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Centrum(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CentrumInvert</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CentrumInvertReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.CentrumInvert>
    {
        protected override Nine.Graphics.Primitives.CentrumInvert Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.CentrumInvert existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new CentrumInvert(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Cross</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CrossReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Cross>
    {
        protected override Nine.Graphics.Primitives.Cross Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Cross existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Cross(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>CubeInvert</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CubeInvertReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.CubeInvert>
    {
        protected override Nine.Graphics.Primitives.CubeInvert Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.CubeInvert existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new CubeInvert(graphicsDevice);
            }
            existingInstance.IsSolid = input.ReadBoolean();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Cylinder</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class CylinderReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Cylinder>
    {
        protected override Nine.Graphics.Primitives.Cylinder Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Cylinder existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Cylinder(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Dome</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class DomeReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Dome>
    {
        protected override Nine.Graphics.Primitives.Dome Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Dome existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Dome(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Plane</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PlaneReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Plane>
    {
        protected override Nine.Graphics.Primitives.Plane Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Plane existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Plane(graphicsDevice);
            }
            existingInstance.TessellationX = input.ReadInt32();
            existingInstance.TessellationZ = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>PrimitiveGroup</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class PrimitiveGroupReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.PrimitiveGroup>
    {
        protected override Nine.Graphics.Primitives.PrimitiveGroup Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.PrimitiveGroup existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new PrimitiveGroup(graphicsDevice);
            }
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            {
                var count = input.ReadInt32();
                for (var i = 0; i < count; i++)
                    existingInstance.Primitives.Add(input.ReadObject<Nine.Graphics.Primitives.Primitive<Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture>>());
            }
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Sphere</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SphereReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Sphere>
    {
        protected override Nine.Graphics.Primitives.Sphere Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Sphere existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Sphere(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>SphereInvert</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class SphereInvertReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.SphereInvert>
    {
        protected override Nine.Graphics.Primitives.SphereInvert Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.SphereInvert existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new SphereInvert(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Teapot</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TeapotReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Teapot>
    {
        protected override Nine.Graphics.Primitives.Teapot Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Teapot existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Teapot(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
    /// <summary>
    /// Content reader for <c>Torus</c>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Content.Reader.tt", "1.1.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class TorusReader : Microsoft.Xna.Framework.Content.ContentTypeReader<Nine.Graphics.Primitives.Torus>
    {
        protected override Nine.Graphics.Primitives.Torus Read(Microsoft.Xna.Framework.Content.ContentReader input, Nine.Graphics.Primitives.Torus existingInstance)
        {
            if (existingInstance == null)
            {
#if SILVERLIGHT
                var graphicsDevice = System.Windows.Graphics.GraphicsDeviceManager.Current.GraphicsDevice;
#else
                var graphicsDevice = ((Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)input.ContentManager.ServiceProvider.GetService(
                                typeof(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService))).GraphicsDevice;
#endif
                existingInstance = new Torus(graphicsDevice);
            }
            existingInstance.Tessellation = input.ReadInt32();
            existingInstance.Visible = input.ReadBoolean();
            existingInstance.Material = input.ReadObject<Nine.Graphics.Materials.Material>();
            existingInstance.MaterialLevels = input.ReadObject<Nine.Graphics.Materials.MaterialLevelOfDetail>();
            existingInstance.InvertWindingOrder = input.ReadBoolean();
            existingInstance.Name = input.ReadObject<System.String>();
            existingInstance.Tag = input.ReadObject<System.Object>();
            existingInstance.Transform = input.ReadMatrix();
            existingInstance.AttachedProperties = input.ReadObject<System.Collections.Generic.Dictionary<System.Xaml.AttachableMemberIdentifier, System.Object>>();
            return existingInstance;
        }
    }
}
#endif