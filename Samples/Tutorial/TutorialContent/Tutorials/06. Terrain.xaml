<Scene xmlns="http://schemas.microsoft.com/nine/2011/xaml">

    <SkyBox Texture="{ContentReference ../Textures/SkyCubeMap}" />
    <Fog FogColor="1, 1, 1" FogStart="50" FogEnd="500" />
    <AmbientLight AmbientLightColor="0.2, 0.2, 0.2" />
    <DirectionalLight DiffuseColor="0.8, 0.8, 0.8" SpecularColor="1, 1, 1" Direction="-1, -1, -1" />
       
    <!--
        A surface is the visual representation of a heightmap. You can use surface to represent the terrain
        or the ocean depending on the material specified for the surface.
    
        You can create a flat surface by setting the Width, Height and Step properties.

        A surface is uniformly divided into square patches, the size of each patch is determined by 
        PatchSegmentCount, so Width and Height must be multiples of PatchSegmentCount.
    -->
    <Surface Heightmap.Width="16" Heightmap.Height="16" Heightmap.Step="2" PatchSegmentCount="4" Position="-16, 0, 0" />
    
    <!-- 
        A surface can also be created from heightmap.
        The bumpiness and step of the heightmap is specified in the heightmap processor.
    
        Level of detail can be enabled on surface patches, so that patches far away will use less triangles to 
        approximate the shape of the heightmap. Level of detail can be fine tuned with LevelOfDetailStart and
        LevelOfDetailEnd property.
    
        In this tutorial, a basic material is applied to the terrain. The texture will map across the entire
        terrain by default. This behavior can be changed by setting the TextureScale and TextureOffset.
    -->
    <Surface Heightmap="{ContentReference ../Textures/MountainHeightmap}" Position="0, -20, 0" TextureTransform.Scale="0.2, 0.2"
             LevelOfDetailEnabled="True" LevelOfDetailStart="20" LevelOfDetailEnd="200">
        <BasicMaterial Texture="{ContentReference ../Textures/grass}" />
    </Surface>

    <!--
        MaterialPaintGroup can be used to create materials with multiple layers. Each layer has its own texture, 
        normal map and color properties. A grayscale alpha map is used to determine which part of the layer
        is visible and how the layer blends with other layers.
    
        Normal mapping requires the vertices of the terrain to contain tangent and binormal channels, which
        isn't enabled by default. You can set the VertexType property to the name of the vertex type and the
        vertex data will be converted into that format.
    -->
    <Surface Heightmap="{ContentReference ../Textures/RF1}" Position="-128, -20, -128" LevelOfDetailEnabled="False" 
             TextureTransform.Scale="0.2, 0.2" VertexType="VertexPositionNormalTangentBinormalTexture">
                            
        <!--
            You should set the MaterialPaintGroup.MaskTextureScale to the inverse of TextureTransform.Scale so 
            that the layers will map across the entire terrain.
        -->
        <MaterialGroup MaterialPaintGroup.MaskTextureScale="5, 5">
        
            <MaterialPaintGroup.MaskTextures>
                <!-- Specify the mask textures of each material paint group using a splatter. -->
                <Splatter>
                    <ExternalReference />
                    <ExternalReference>../../Content/Terrain/2.bmp</ExternalReference>
                    <ExternalReference>../../Content/Terrain/3.bmp</ExternalReference>
                </Splatter>
            </MaterialPaintGroup.MaskTextures>
        
            <MaterialPaintGroup>
                <DiffuseMaterialPart Texture="{ContentReference ../Textures/box}" />
                <SpecularMaterialPart SpecularColor="0.5, 0.5, 0.5" SpecularPower="64" />
                <NormalMapMaterialPart NormalMap="{ContentReference ../Textures/box_n}" />
            </MaterialPaintGroup>
            
            <MaterialPaintGroup>
                <CustomMaterialPart xml:space="preserve">
                    <![CDATA[
                        float Time:TIME;
                        void PixelShader(inout float2 uv:TEXCOORD0)
                        {
                            uv += frac(Time * 0.05f);
                        }
                    ]]>
                </CustomMaterialPart>
                <NormalMapMaterialPart NormalMap="{ContentReference ../Textures/grass_n}" />
                <DiffuseMaterialPart Texture="{ContentReference ../Textures/grass}" DiffuseColor="1, 0, 0" />
                <SpecularMaterialPart SpecularColor="0.5, 0.5, 0.5" SpecularPower="64" />
            </MaterialPaintGroup>
            
            <MaterialPaintGroup>
                <DiffuseMaterialPart Texture="{ContentReference ../Textures/terrainTex}" />
                <EmissiveMaterialPart EmissiveColor="0.2, 0.2, 0" />
            </MaterialPaintGroup>
            
            <!--
                Terrain material also supports detailed texture in case you look at the terrain really close.
            <DetailMaterialPart DetailTexture="{ContentReference ..\Textures\LandscapeDetail}" DetailTextureScale="0.5, 0.5" />
            -->
            <DirectionalLightMaterialPart />
        </MaterialGroup>
    </Surface>
</Scene>