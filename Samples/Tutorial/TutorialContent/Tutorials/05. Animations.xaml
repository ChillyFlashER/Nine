<Scene xmlns="http://schemas.microsoft.com/nine/2011/xaml" 
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <SkyBox Texture="{ContentReference ../Textures/SkyCubeMap}" />
    <Fog FogColor="1, 1, 1" FogStart="50" FogEnd="500" />
    <AmbientLight AmbientLightColor="0.2, 0.2, 0.2" />
    
    <!-- To enable animation, objects that needs to be animated have to be grouped together under a Group. -->
    <Group>        
        <Group.Animations>
            <!--
                In the Animations property of display object, add a new animation with a name key.                
                The following animation is a tween animation that changes the alpha property of the tank model.
                Note that tween animation can only reference the direct children of the diplay object.
            -->
            <SingleAnimation TargetProperty="['Tank'].Material.Alpha"
                             From="1" To="0" Curve="{x:Static Curves.Sin}" Repeat="999999" Easing="In" AutoReverse="True" />
        </Group.Animations>
        
        <!-- To enable animation, you have to give the object a name -->
        <Model Name="Tank" Source="{ContentReference ../Models/Tank}" Material="{BasicMaterial}" />
        
        <!-- Drawing group can also be nested to create a transform hierarchy. -->
        <Group Transform.Position="-10,0,0" Name="NestedObject">

            <Model Name="Dude" Source="{ContentReference ../Models/Dude}" Material="{SkinnedMaterial}" />            
            <Model Name="Dude2" Transform.Position="0,0,-10" Source="{ContentReference ../Models/Dude}"/>
            <Model Name="Tree" Transform.Position="0,0,10"  Source="{ContentReference ../Models/AlphaPalm}" />

            <!--
            <Camera Name="MyCamera" />

                Drawing group can also be used to bind transforms. Here is a demonstration to attach the tree
                model to the right hand of the dude model. You can also adjust the bind transform.
            -->
                <!--
            <Group.TransformBindings>
                <TransformBinding Source="{x:Reference MyCamera}" Target="{x:Reference Dude}" TargetBone="R_Hand" />
                <TransformBinding Source="{x:Reference Dude2}" Target="{x:Reference Dude}" ShareSkeleton="True" Position="-5, 0, 0" />
                <TransformBinding Source="{x:Reference Tree}" Target="{x:Reference Dude}" TargetBone="R_Hand"
                                  Scale="0.25, 0.25, 0.25" Position="0.2, 0.3, -0.6" Rotation="15, 15, 0" />
            </Group.TransformBindings>
                -->

            <Group.Animations>                
                <!--
                    AnimationGroup plays the contained animations in parallel while AnimationSequence 
                    plays them one by one.
                -->
                <AnimationGroup>                    
                    <AnimationSequence Repeat="999999">
                        <SingleAnimation TargetProperty="['Dude'].Material.Alpha" To="0" />
                        <DelayAnimation Duration="00:00:01" />
                        <!--
                            If from is not specified, the animation will use the current value of the target
                            property as the starting value.
                        -->
                        <SingleAnimation TargetProperty="['Dude'].Material.Alpha" To="1" />
                    </AnimationSequence>
                    
                    <!-- 
                        A transform animation is designed to manipulate transforms. You can write a transform
                        using the format "Scale;Rotation;Translation"
                    -->
                    <MatrixAnimation TargetProperty="['Dude'].Transform" Repeat="99999999" Duration="00:00:05">
                        <MatrixAnimation.From>
                            <Transform />
                        </MatrixAnimation.From>
                        <MatrixAnimation.To>
                            <Transform RotationY="{Degrees 180}" />
                        </MatrixAnimation.To>
                    </MatrixAnimation>
                </AnimationGroup>
            </Group.Animations> 
        </Group>
    </Group>
</Scene>