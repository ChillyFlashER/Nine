#! /cygdrive/c/Per/bin/perl.exe
# (for windows)

#
# Generate HLSL table for use in vertex-noise shaders
#
#

# use POSIX;

# various defaults
# our $Root = "NoiseTable";
our $Root = "NTab";
my $tableSize = 32;
my $seed = 0;

###########################################################

sub sfrand { return (rand(2.0) - 1.0); }

###########################################################

sub normalize3 {
    my ($a,$b,$c) = @_;
    my $d = $a*$a + $b*$b + $c*$c;
    $d = sqrt($d);
    return sprintf("%g,%g,%g",$a/$d, $b/$d, $c/$d);
}

###########################################################

# build permuation/gradient table for noise
sub initVertexNoiseConstants {
    my $table_size = shift @_;
    my $seed = shift @_;
    srand($seed);
    my $fullSize = ($table_size*2 + 2);
    print "// Generated by \"vnoise_init.pl\"\n";
    print "//	$Revision: #1 $\n";
    print "// HLSL Noise Table\n";
    print "//	Seed value: $seed\n";
    print "//\n\n";
    my @p;
    # int *p = new int[table_size*2+2];                # permutation table
    my @g;
    # glh::vec4f *g = new glh::vec4f[table_size*2+2];  # gradient table
    my $i;
    # initalize random gradients
    for($i=0; $i<$table_size; $i++) {
	$p[$i] = $i;
	# $g[i][0] = sfrand();
	# $g[i][1] = sfrand();
	# $g[i][2] = sfrand();
	$g[$i] = &normalize3(&sfrand(),&sfrand(),&sfrand());
    }

    # initialize permutation table (random shuffle)
    for($i=0; $i<$table_size; $i++) {
	my $j;
	my $t;
	$j = int(rand(1024)) % $table_size;
	$t = $p[$i];
	$p[$i] = $p[$j];
	$p[$j] = $t;

	$g[$i] .= ",$i";
        # g[i][3] = (float) p[i];

        # mirror first half of table into second half
        $g[$i+$table_size] = $g[$i];
        # $g[i+$table_size][0] = g[i][0];
        # $g[i+$table_size][1] = g[i][1];
        # $g[i+$table_size][2] = g[i][2];
        # $g[i+$table_size][3] = g[i][3];
    }

    # glUniform4fvARB(permGradTableParam, table_size*2, g[0].v);
    # glUniform4fvARB(permGradTableParam + (table_size*2), 1, g[0].v);
    # glUniform4fvARB(permGradTableParam + (table_size*2)+1, 1, g[1].v);
	print "#define BSIZE $table_size\n";
	print "#define FULLSIZE $fullSize\n";
	my $f = (1.0 / $table_size);
	print sprintf("#define NOISEFRAC %g\n",$f);
    print "\nconst float4 $Root\[FULLSIZE\] <string UIWdget=\"None\";> = {";
    for($i=0; $i<($table_size*2); $i++) {
		print "\t\t" if ($i > 0);
		print "$g[$i],\n";
    }
    print "\t\t$g[0],\n";
    print "\t\t$g[1]};\n";
    print "\n///////////////////////////// eof ///\n";
}

######################################

$tableSize = $ARGV[0] if ($#ARGV >= 0);
$seed = $ARGV[1] if ($#ARGV >= 1);
&initVertexNoiseConstants($tableSize,$seed);

####################################### eof ###
