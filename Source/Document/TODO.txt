Isles Change Log
--------------------
2008. (c) Nightin Game


[20:13 2008/2/24]

Camera Features:

- Hold SPACE to enter birdeye view [DONE].
- Double-click the landscape to fly there [DONE].


[13:40 2008/3/1]

Model Rendering System:

- Interface for setting / getting model material [DONE].
- Hide difference between static mesh and skinned mesh [DONE].
- Mesh animation blending [DONE].
- Simple effects: Tint, shadow, transparent, invisible, frozen...
- Solve alpha issues [DONE].

[19:09 2008/3/4]

Landscape Rendering System:

- Island shadow mapping [DONE].
- Fix shadow mapping issues.
- Add Cloud Drops.


[15:35 2008/3/7]

Particle System:

- Incorporate Sample 3D Particle System [DONE].
- Particle Editor [Urgent].

[13:26 2008/3/12]

Environment Settings
Input System


Button
Camera
Hand
Entity

/* GameControl will replace Hand */
public class GameControl { }

GameScreen.StartLevel
{
	Camera.SetLandscape();
	Camera.FlyTo();
}


[23:17 2008/3/13]

UI Driven Tasks:


Mipmap		- FogOfWar
			- Map Snapshot

Select 
BoxSelect	- Multiselect Group Filter
			- Team Control/Visualization
			- Highlight Effect
			- Unit Control (Move, Shift Task)
			- Unit Brain (Goal Driven Model)
			- Unit Behaviors (Gathering, Attack, Repair, Cast...)
			- Unit Movement (Path, Steering)
			- Unit Spells (Individual Spells)

Construct	- Building States (pre-build, building, destroyed...)

Opponent	- Player Brain (Goal Driven Model?)

Timer, Trigger


Moving Direction:

	Using Force, but normalize velocity when moving the agents

	- Seek, points to the target
	- Wander, random walk
	- Obstacle Avoidance
		- Rectangular Obstacle (Wall model)
		- Circular Obstacle (Exclude other agents)
	- Agent Avoidance (Seperation Force)
	- Terrain (Force like wall)
	
	Still, we have to do collision detection at the last moment.
	
	
[16:15 2008/3/17]

BigCell = 16 * SmallCell = 4 * TerrainCell

- Destination / Start Position
- Precise unstuck
- Realtime smoothing


[19:25 2008/3/20]

OPTINIZE LOADING (OBJECT CREATION/SERIALIZATION)


[14:00 2008/3/23]

Game Particle Systems:

- EffectConstruct
	Description: The smoke and sparks on the building been constructed.	
	Property: Outline of the building. See Isles.Engine.Outline
	Property: Emission : float(0~1). To make the smoke fade in and fade out.
	
- EffectBuildingOnFire
	Description: The fire and smoke on a damaged building
	Property: Building Outline
	Property: Emission.

- EffectBuildingExplode
	Property: Building Outline
	
- EffectFireball
	Description: A spell casted from the source to target
	Property: Source : IEventListener
	Property: Target : BaseEntity
	Remarks: When the fireball hits the target, it should create an explode effect,
			 and notify the source with a EventType.HitTarget message.
			 
- EffectOnFire
	Description: ...
	
- EffectMissile

	
[15:38 2008/3/23]

Entity		- Building, Tree,
   |
BaseAgent	- Charactor


Spells, Status, TeamStatus, Snapshot

ISelectable : IEventListener
{
	DrawStatus;
	DrawSnapshot;
	OnSelect;
	OnDeselect;
}

SelectSingle:

- LocalPlayer handle click event, select an ISelectable object
- Invoke OnDeselect/OnSelect

SelectMultiple:

- LocalPlayer handle click event, create a Team : ISelectable
- Team.OnSelect -> Team.Filter

RightClickMoveEvent:

- LocalPlayer pass on the event to the ISelectable


FIX Multiselect Issue.
FIX State Activate/Terminate Issue.


[19:41 2008/4/3]

Movement system:

- Entity.State

- StateMoveToTarget
- StateMoveToPosition
- StateMoveToPositionPrecise
- StateSeekToPosition

- PathManager
- PathManager.LargeGraph / DetailedGraph
- PathManager.Mark / Unmark
- PathManager.AddMovable / RemoveMovable
- PathManager.CanWalkBetween / CanWalkTo / CanStepForward
- PathManager.AdjustPosition

- PathGraph


IMovable : IEventListener
{
    Position { get; set; }
    Facing   { get; set; }
    Speed    { get; }
    
    OverlapsPoint(float x, float y);
}


IDynamicObstacle
{
    IsDirty  { get; }
    Position { get; }
}



StateMoveToPosition
{
    Activate
    {        
        if (StartEndDistance > Threshold)
        {
            PathManager.QueryPath(LargeGraph);
            new StateSeekToPosition(Target);
        }
        else
        {
            new StateMoveToPositionPrecise(Target, FindWhenStartup);
        }
    }
    
    Update
    {
        EdgeTravesed = owner.OverlapsPoint(NextEdgeStart);
        
        if (Traversing && (RandomTimeoutExceeded || EdgeTraversed))
        {
            new StateMoveToPositionPrecise(NextEdgeEnd, DoNotFind);
            
            if (EdgeTraversed)
                RemoveEdge(currentEdge);
            
            // For some random time interval
            RandomTimeoutExceeded = Random(MinEdgeLength / Speed);
        }
        
        if (MoveToPositionPrecise Failed)
            return Failed;
            
        if (SeekToPosition Failed)
            ;// Wait till path found on the large graph
    }
    
    Event
    {
        On (Path found on LargeGraph)
        {
            Traversing = true;
            SeekToPosition = null;
            
            // Find a nearest path node from current position as the next edge end
            
            new StateMoveToPositionPrecise(FirstPathEdge, DoNotFind);
        }
    }
}


StateMoveToPositionPrecise
{
    StateMoveToPositionPrecise(bool FindPathWhenStartup);

    Activate
    {
        PathManager.AdjustPosition(Target);
        
        if (FindPathWhenStartup && !PathManager.CanWalkTo(Target) && !PathQuerying)
        {
            PathManager.QueryPath(DetailedGraph);
        }
        
        FindPathWhenStartup = true;
             
        new StateSeekToPosition(Target);
    }
    
    Update
    {        
        if (SeekToPosition Failed)
        {
            if (RetryCounter++ > MaximumThreshold)
                return Failed;
            else
                Reactivate();
        }
    }
    
    Event
    {
        On (Path found on DetailedGraph)
        {
            // Smooth path in the PathManager, it can make use of direction info.
            // SimplifyPath -> SmoothPath
            //
            // Find the first path using the same trick
            
            Add (new StateSeekToPosition(EdgeTarget));
        }
    }
}


StateSeekToPosition
{   
    StateSeekToPosition(target);
    StateSeekToPosition(path);
    
    // Build steps from a given line segment

    Update
    {
        // Uses the left bottom corner as the hot spot
    
        if (PathManager.CanStepForward())
        {
            WaitTime = WaitTimer = 0;
            
            UpdatePosition();
            UpdateFacing();
        }
        else
        {
            if (WaitTime == 0)
                WaitTime = Random(0.5, 2.0); 
        
            if (WaitTimer++ > WaitTime)
            {
                return Failed;
            }
        }
    }
}


[20:16 2008/4/8]

- Animation Event Handler [DONE]
- Center Game Model [DONE]
- Building Rectanglar Outline


[18:00 2008/4/12]

Design Spec:

  - Level snapshot feedback to menu screen
  - Ability to choose spawnpoint/race/player before load
  - Assign owner to objects in a scripted map (using index)
  
  StartLevel("world.xml", playerInfo)
  
  level.CreatePlayers(xml, playerInfo)
  
  World.Load(xml)
  
  level.CreateStartup
  
  Initialize UI
    
Player

Server Side 
{
	LocalPlayer,
		Select & Filter & Shown & Event : IEnumerable<GameObject>
		
		- Double click to select objects of the same type
		- Create/Select a team, add/remove members
		
		- Group select, filtered (Units - buildings), units can be mixed while buildings can't
		- You can't multiselect your opponents objects	
		- Highlight selected (filtered) object during dragging in realtime
					
					[LocalPlayer.Filter : ISelectable (GameObject, Squard, Buildings)] [Only one squard exists]	
			
			
		- Redirect minimap events to local player
		- Right click will let currently selected objects act upon the target
		- Charactor team movement
		
					[GameObject, Squard, Buildings.PerformAction(Position : Vector3, Target : Nullable)]
					
		- Show bouble states when hover/ALT pressed
			
					[(picked as ISelectable).DrawBoubleStates]
		
		- Refresh UI based on currently selected objects
		
					[GameObject, Squard, Buildings.Selected { if (owner is LocalPlayer), initialize buttons when selected }]


	ComputerPlayer,
		Player.FindObject() -> Object.MoveTo / AttackTo / Cast
							-> Object.Spell.Cast
							-> Object.State = ...

	RemotePlayer
}

[15:24 2008/4/14]

PerformAction / SpellCombat
	- StateAttack

Cast();
Cast(Entity);
Cast(Position);

Spell Update / Cooldown

{
	Trigger - UI
	Cast
	CoolDown
	Update
}

StateIdle


Requirements
{
	LocalPlayer's POV:
		
		- Able to use right click/attack button to trigger spell cast event
		- Spell catergories: AutoCast, Trigger, Target, Area,
		- Spell cool down
		- 2 Updates?
}


Call hierarchy
{
	SpellCombat.Trigger - LocalPlayer UI stuff
	StateAttack(SpellCombat);
		Attack : SpellCombat.Cast(Entity)
}

StateAttack.CastOnce : bool



[18:48 2008/4/15]


World
{
	Object Placement
	Pathgrid Editing
}

Gameplay
{
	Goldmine spawn position
	Building Pathbrush [DONE]
	Building Effect
	Training & Upgrades
	Attacking (Minimapping)
	Targeting System
	All units & building effects, animation & effect & spell binding
	Numerics
	2D visualization: spells, snapshot, dialogs
	Game text
}

Computer Oppnent
{
	// Tough...
	Goals: Gather, Build, Attack
	
	There is an arbitrate every several seconds
	
	Goal Hierarchy: { Whether satisfied/ How to satisfy }
	
	Victory {
		Destroy Enermy Buildings {
			Destroy Enermy Troops {
				CreateTroops {
					BuildInfrastructure {
						CreateBodies
					}
				}
				
				Attack {
				}
				
				Retreat {
				}
			}			
		}
	}
	
	GoalEvaluation:
		- Compute the willingness of each subgoal using Evaluation
		- Smooth the result using exponential backoff & probability
	
	GoalGather
	GoalDevelop
	GoalDestroyEnermy
		GoalCreateTroops
		GoalAttack
		GoalRetreat
		GoalExpand.Evaluate
		
	
	GoalDestroyEnermy.Arbitrate
	{
		Train a troop if we don't have one	
		
		Compare our military strengh with our enermy.
		
		Attack / Retreat using probability
	}
	
	GoalCreateTroops.Arbitrate
	{
		Check resource
		Check & resolve techtree dependency
	}
}

[20:12 2008/4/17]

Automatic Building Avoidance:

- IsPositionValid { Unmark nearby units with the same owner. }
- BeginConstruct { Notify nearby units to move. Reset timer. }
	
	Mark - Find a position - Unmark - Store Old State - Move there - Restore old state
	
- Update { if (CanPlace) { AddToWorld } else if (Timer runs out) Notify Failure }


[23:59 2008/4/17]

Fix Attacking & MoveToTarget & MoveToUnreachable Issues

0.5 * A

K ~ 1

A * (  K + clamp(1 - D / A) * (1 - K) ) * 10



[13:27 2008/4/19]

About AI:

- Able to build, train units based on dependency
- Able to decide how to spend the money based on evaluation
- Able to create a troop (Structures can be pre-defined)
- Able to attack (Can be pre-define)
- Able to retreat when necessary
- Able to defend when attacked

[2:17 2008/4/20]

Got the ZipContentManager working, so we don't have to worry about game size any more :)

- FIX Selection issues in LocalPlayer when units died

[23:01 2008/4/20]

Things Left To Do:

- Building Explosion [1]
- World Decoration & Placement: Decoration/Path grid [1]
- Sound: Channel/Volumn [1]
- Fog of war?: Minimap/WorldFog [1]
- UI & GameLogic: subteam Control, bug fixes, lumbermill, 2 races, hero spells, upgrades, numerics [2]
- Model Binding (Islander & Introduer): sparks, tails, particles, rays, dummy bones, ammos[3]
- AI (Add more behavior): Expansion, heros & spells [2]
- Documentation & Literature: Readme [2]


[20:04 2008/4/22]

Islander:

Townhall: Follower, 
Farmhouse:
Barracks: Footman, Hunter, A / D
Altar: Creature of Fire, Punish of Nature
Lumbermill: Live of Nature
Tower:

Creature of Fire: Summon Hellfire


Intruder:

Fortress: Peon
...
Factory: Swordman, Rifleman, A / D
Steamrelay?: Robot, Massive Destruction
Regenerator: 
Cannon:

Robot: Deadly smoke


BUG: Place the building on the UI


BUG: Chop wood sound. AI wood/farm


Attack button
highlight on panel



Bug: ZipContentManager / cached graphics device
Bug: Install Permission
Bug: Tipbox appear in the fog of war