<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.Xna.Framework" #>
<#@ assembly name="Microsoft.Xna.Framework.Graphics" #>
<#@ assembly name="Microsoft.Xna.Framework.Content.Pipeline" #>
<#@ assembly name="%XNAGSv4%References\Windows\x86\Microsoft.Xna.Framework.Content.Pipeline.EffectImporter.dll" #>
<#@ assembly name="$(SolutionDir)\..\Utilities\References\EffectCompiler\Release\EffectCompiler.dll" #>
<#@ import namespace="EffectCompiler" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
// -----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a text template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------------

#if !TEXT_TEMPLATE
namespace Nine.Graphics.Materials
{
#if !WINDOWS_PHONE

    using System;
    using Microsoft.Xna.Framework;
    using Microsoft.Xna.Framework.Graphics;

<#
    var compiler = new Compiler();
    foreach (var fxFile in Directory.GetFiles(Host.ResolvePath(shaderFolder), "*.fx", SearchOption.AllDirectories))
    {
        var className = Path.GetFileNameWithoutExtension(fxFile);
        if (className.EndsWith("Effect"))
            className = className.Replace("Effect", "");
        if (!className.EndsWith("Shader"))
            className = className + "Shader";
        var materialName = className.Replace("Shader", "Material");
        var result = compiler.Build(fxFile);
#>
    [Nine.Serialization.NotBinarySerializable]
    partial class <#= materialName #> : Material
    {
        public GraphicsDevice GraphicsDevice { get; private set; }

        internal <#= className #> effect;

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= materialName #>"/> class.
        /// </summary>
        public <#= materialName #>(GraphicsDevice graphics)
        {
            GraphicsDevice = graphics;
            effect = GraphicsResources<<#= className #>>.GetInstance(graphics, typeof(<#= materialName #>));

            OnCreated();
        }

        protected override void OnBeginApply(Nine.Graphics.DrawingContext context, Nine.Graphics.Materials.Material previousMaterial)
        {
            <#= materialName #> previous = previousMaterial as <#= materialName #>;
            if (previous == null)
                ApplyGlobalParameters(context);
            BeginApplyLocalParameters(context, previous);
            effect.CurrentTechnique.Passes[0].Apply();
        }

        protected override void OnEndApply(Nine.Graphics.DrawingContext context)
        {
            EndApplyLocalParameters(context);
        }
                
        partial void OnCreated();
        partial void ApplyGlobalParameters(Nine.Graphics.DrawingContext context);
        partial void BeginApplyLocalParameters(Nine.Graphics.DrawingContext context, <#= materialName #> previousMaterial);
        partial void EndApplyLocalParameters(Nine.Graphics.DrawingContext context);
    }
    
    [System.CodeDom.Compiler.GeneratedCode("Nine.Graphics.Materials.tt", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.Runtime.CompilerServices.CompilerGenerated()]
    partial class <#= className #> : Effect
    {
        public <#= className #>(GraphicsDevice graphics) 
            : base(graphics, ReachEffectCode)
        {
<#
        if (result.HiDef)
        {
#>
            if (GraphicsDevice.GraphicsProfile != GraphicsProfile.HiDef)
                throw new InvalidOperationException("<#= className #> requires GraphicsProfile.HiDef.");
<#
        }
        foreach (var parameter in result.EffectParameters)
        {
#>
            <#= parameter.Name #> = Parameters["<#= parameter.Name #>"];
<#
        }
#>

            OnCreated();
        }

        partial void OnCreated();

<#
        foreach (var parameter in result.EffectParameters)
        {
#>
        internal EffectParameter <#= parameter.Name #>;
<#
        }
#>

        #region ByteCode
        internal static byte[] ReachEffectCode = null;
        internal static byte[] HiDefEffectCode = null;

        static <#= className #>()
        {
#if MonoGame
			/*if (Device.GraphicsMode == DirectX)
			{
				ReachEffectCode = HiDefEffectCode = new byte[] 
				{
<#= result.DirectX_11EffectCode #>
				};
			}
			else if (Device.GraphicsMode == OpenGL) */
			{
				ReachEffectCode = HiDefEffectCode = new byte[] 
				{
<#= result.OpenGLEffectCode #>
				};
			}
#elif XBOX360
            ReachEffectCode = HiDefEffectCode = new byte[] 
            {
<#= result.XboxEffectCode #>
            };
#else
<#
    if (object.ReferenceEquals(result.WindowsEffectCode, result.WindowsHiDefEffectCode))
    {
#>
            ReachEffectCode = HiDefEffectCode = new byte[] 
            {
<#= result.WindowsEffectCode #>
            };
<#
    }
    else
    {
#>
            ReachEffectCode = new byte[] 
            {
<#= result.WindowsEffectCode #>
            };

            HiDefEffectCode = new byte[] 
            {
<#= result.WindowsHiDefEffectCode #>
            };
<#
    }
#>
#endif
        }
        #endregion
    }

<#
    }
#>
#endif
}
#endif