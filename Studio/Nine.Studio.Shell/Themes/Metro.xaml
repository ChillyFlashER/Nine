<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:System="clr-namespace:System;assembly=mscorlib" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended" 
                    xmlns:nine="clr-namespace:Nine.Studio.Shell.Behaviors"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    mc:Ignorable="d">
    
    <!--
        Colors
    -->
    <SolidColorBrush x:Key="Brush-NormalText" Color="Gray"/>
    <SolidColorBrush x:Key="Brush-HighlightText" Color="#FFEEEEEE"/>
    <SolidColorBrush x:Key="Brush-Accent" Color="#FF0071BC"/>
    <SolidColorBrush x:Key="Brush-HighlightAccent" Color="#FF0084DC"/>

    <System:Double x:Key="Size-SmallIcon">10</System:Double>

    <Thickness x:Key="Margin-Menu">0</Thickness>
    <Thickness x:Key="Margin-SmallIcon">0</Thickness>
    <Thickness x:Key="Margin-Thin">4</Thickness>

    <!--
        Styles
    -->
    <Style x:Key="Button-Minimum" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#00000000">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle MinHeight="20" Fill="#00000000"/>
                        <TextBlock x:Name="textBlock" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="Gray" FontSize="9.333" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButton-Product" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Margin="0" d:DesignHeight="140" MinWidth="100">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="rectangle">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF00AEEF"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="rectangle" MinHeight="20" MinWidth="60" MaxWidth="Infinity" Fill="#FF0071BC"/>
                        <TextBlock x:Name="textBlock" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButton-Menu" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Margin="{StaticResource Margin-Menu}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000" MinWidth="100" MinHeight="20">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxMouseOver">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFC8C8C8"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxMouseOver">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxChecked">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF0071BC"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxChecked">
                                            <EasingColorKeyFrame KeyTime="0" Value="Gray"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="textBoxMouseOver" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="Gray" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Center"/>
                        <TextBlock x:Name="textBoxChecked" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="Gray" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="textBoxMouseOver" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="textBoxChecked" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButton-Menu" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Margin="{StaticResource Margin-Menu}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000" MinWidth="100" MinHeight="20">                        
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxMouseOver">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFC8C8C8"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxMouseOver">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxChecked">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF0071BC"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBoxChecked">
                                            <EasingColorKeyFrame KeyTime="0" Value="Gray"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="textBoxMouseOver" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="Gray" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Center"/>
                        <TextBlock x:Name="textBoxChecked" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="Gray" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="textBoxMouseOver" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="textBoxChecked" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button-Menu" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Margin="{StaticResource Margin-Menu}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000" MinWidth="100" MinHeight="20">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFC8C8C8"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="textBlock" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="Gray" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button-ToolsMenu" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000" Margin="0" MinWidth="100" MinHeight="25">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFC8C8C8"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="textBlock" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" Foreground="Gray" FontSize="12" FontFamily="Segoe UI" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButton-Category" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <TextBlock x:Name="textBlock" TextWrapping="NoWrap" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Normal" HorizontalAlignment="Left" VerticalAlignment="Center" Foreground="Gray" FontSize="32" Margin="0,20,0,0" FontFamily="Segoe UI Light" FontStretch="Condensed" ClipToBounds="True" Text="{TemplateBinding Content, Converter={StaticResource ToLowerConverter}}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFC8C8C8"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Separator-Vertical" TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle Fill="{StaticResource Brush-NormalText}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button-Close" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Margin="{StaticResource Margin-SmallIcon}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path1">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="#00000000" />
                        <Path x:Name="path" Stretch="Fill" Width="{StaticResource Size-SmallIcon}" Height="{StaticResource Size-SmallIcon}" Data="F1 M 14.5226,113.541L 34.7572,133.854L 38.5906,130.039L 18.3559,109.725L 14.5226,113.541 Z " Fill="Gray"/>
                        <Path x:Name="path1" Stretch="Fill" Width="{StaticResource Size-SmallIcon}" Height="{StaticResource Size-SmallIcon}" Data="F1 M 18.227,133.961L 38.7363,113.535L 34.9176,109.699L 14.4083,130.128L 18.227,133.961 Z " Fill="Gray"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button-Minimize" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Margin="{StaticResource Margin-SmallIcon}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="path">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="#00000000" />
                        <Border x:Name="path" VerticalAlignment="Center" BorderThickness="0, 0, 0, 2" Width="{StaticResource Size-SmallIcon}" Height="{StaticResource Size-SmallIcon}" BorderBrush="Gray"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button-Maximized" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Margin="{StaticResource Margin-SmallIcon}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="path">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="#00000000" />
                        <Border x:Name="path" BorderThickness="1, 2, 1, 1" BorderBrush="Gray" Width="{StaticResource Size-SmallIcon}" Height="{StaticResource Size-SmallIcon}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListView-ToolsGroupExpander" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpandDirectionStates">
                                <VisualState x:Name="ExpandDown"/>
                                <VisualState x:Name="ExpandUp"/>
                                <VisualState x:Name="ExpandLeft"/>
                                <VisualState x:Name="ExpandRight"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="HeaderSite" Content="{Binding Name}" Style="{StaticResource ToggleButton-Category}"  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" />
                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListView-ToolsGroup" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True" Style="{StaticResource ListView-ToolsGroupExpander}">
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <GroupStyle x:Key="GroupStyle-None">
        <GroupStyle.ContainerStyle>
            <Style TargetType="{x:Type GroupItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupItem}">
                            <ItemsPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </GroupStyle.ContainerStyle>
    </GroupStyle>
    <GroupStyle x:Key="GroupStyle-Metro" ContainerStyle="{StaticResource ListView-ToolsGroup}" />
    <Style x:Key="ListViewItem-Tools" TargetType="{x:Type ListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListView-Tools" TargetType="{x:Type ListView}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Background="#00000000" ClipToBounds="True" Foreground="{StaticResource Brush-NormalText}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Left"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Button-Dialog" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Margin="{StaticResource Margin-Menu}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="textBlock">
                                            <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="textBlock" TextWrapping="NoWrap" Text="{TemplateBinding Content, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FFC8C8C8" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyGrid-Metro" TargetType="{x:Type extToolkit:PropertyGrid}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type extToolkit:PropertyGrid}">
                    <StackPanel VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000">

                        <ListView Style="{StaticResource ListView-Tools}" ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"                                                                    
                                  nine:ResourceBehavior.Resource="{StaticResource ListViewItem-Tools}"
                                  nine:GroupStyleBehavior.GroupStyle="{StaticResource GroupStyle-Metro}">
                            
                            <!--
                            <ListView.Triggers>
                                <DataTrigger Binding="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                    <Setter Property="nine:GroupStyleBehavior.GroupStyle" Value="{StaticResource GroupStyle-None}" />
                                </DataTrigger>
                            </ListView.Triggers>
                            -->
                        </ListView>

                        <!-- PropertyGrid requires this PART_DragThumb -->
                        <Thumb x:Name="PART_DragThumb" Visibility="Hidden" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBar-Metro" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true" ClipToBounds="True">
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="0" d:IsLocked="True">
                            <Grid x:Name="Foreground">
                                <Rectangle x:Name="Overlay" Fill="{StaticResource Brush-Accent}"/>
                            </Grid>
                        </Decorator>
                        <Rectangle x:Name="Background" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0, 0" EndPoint="0,20" MappingMode="Absolute" SpreadMethod="Repeat">
                                    <LinearGradientBrush.Transform>
                                        <SkewTransform AngleX="0" CenterX="0" AngleY="-45"/>
                                    </LinearGradientBrush.Transform>
                                    <GradientStop Color="#FF0084DC"/>
                                    <GradientStop Color="#FF0071BC" Offset="0.5"/>
                                    <GradientStop Color="#FF0084DC" Offset="0.5"/>
                                    <GradientStop Color="#FF0071BC"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <ThicknessAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Margin"
                                                            Duration="0:0:0.5" From="-20, 0, 0, 0" To="0, 0, 0, 0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Setter Property="Visibility" TargetName="Background" Value="Hidden"/>                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Thumb-Metro" d:IsControlPart="True" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Width="4">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Normal"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Thumb">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Thumb">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="Left" Fill="{StaticResource Brush-Accent}" HorizontalAlignment="Left" Width="2000" Margin="-1996,0,0,0" />
                        <Rectangle x:Name="Right" Fill="Transparent" HorizontalAlignment="Left" Width="2000" Margin="0, 0,-2000,0" />
                        <Rectangle x:Name="Thumb" Fill="#FF0071BC" HorizontalAlignment="Center" Width="4" Margin="0" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButton-Metro" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Slider-Metro" TargetType="{x:Type Slider}">
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot" ClipToBounds="True" MinHeight="{TemplateBinding MinHeight}">                    	
                        <Rectangle x:Name="Border" d:IsLocked="True" />
                        <Track Grid.Row="1" x:Name="PART_Track" d:IsLocked="True">
                            <Track.Thumb>
                                <Thumb Style="{StaticResource Thumb-Metro}" VerticalAlignment="Stretch" Height="Auto" Margin="0" Width="Auto" HorizontalAlignment="Stretch"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource RepeatButton-Metro}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource RepeatButton-Metro}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock x:Name="Header" IsHitTestVisible="False" Text="{Binding Path=(nine:HeaderBehavior.Header), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToUpperConverter}}" Margin="{TemplateBinding Padding}" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FFC8C8C8" />
                            <TextBlock x:Name="Foreground" IsHitTestVisible="False" TextWrapping="NoWrap" Text="{TemplateBinding Value, Converter={StaticResource ToUpperConverter}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FFC8C8C8" FontSize="12" Margin="{StaticResource Margin-Thin}" FontFamily="Segoe UI" HorizontalAlignment="Left"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft"/>
                        <Trigger Property="TickPlacement" Value="BottomRight"/>
                        <Trigger Property="TickPlacement" Value="Both"/>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Thumb-ColorSlider" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="Width" Value="11"/>
        <Setter Property="Foreground" Value="Gray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid SnapsToDevicePixels="true" HorizontalAlignment="Stretch" Height="2">
                        <Rectangle x:Name="Top" Fill="Transparent" VerticalAlignment="Top" Height="2000" Margin="0,-2000,0,0" />
                        <Rectangle x:Name="Bottom" Fill="Transparent" VerticalAlignment="Top" Height="2000" Margin="0,0,0,-2000" />
                        <Rectangle Fill="Black"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBox-Metro" BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource Brush-NormalText}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="#FF808080"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="None"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="CaretBrush" Value="{StaticResource Brush-HighlightText}" />
        <Setter Property="nine:ClickSelectBehavior.IsClickSelect" Value="True" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Header">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Header">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="Transparent" />
                        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" BorderBrush="Gray">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock x:Name="Header" Text="{Binding Path=(nine:HeaderBehavior.Header), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToUpperConverter}}" Margin="{TemplateBinding Padding}" FontWeight="Bold" VerticalAlignment="Center"
                                           Visibility="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringToVisibilityConverter}}"/>
                                <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WatermarkTextBox-Metro" BasedOn="{x:Null}" TargetType="{x:Type extToolkit:WatermarkTextBox}">
        <Setter Property="Foreground" Value="{StaticResource Brush-NormalText}"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="#FF808080"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="CaretBrush" Value="{StaticResource Brush-HighlightText}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="nine:ClickSelectBehavior.IsClickSelect" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type extToolkit:WatermarkTextBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Header">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FF323232"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="Header">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFEEEEEE"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="Transparent" />
                        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" BorderBrush="Gray">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock x:Name="Header" Text="{Binding Path=(nine:HeaderBehavior.Header), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToUpperConverter}}" Margin="{TemplateBinding Padding}" FontWeight="Bold" VerticalAlignment="Center" 
                                           Visibility="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringToVisibilityConverter}}"/>
                                <Grid>
                                    <TextBlock x:Name="PART_WatermarkHost" VerticalAlignment="Center" Text="{TemplateBinding Watermark}" FontStyle="Italic" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed"/>
                                    <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                </Grid>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"></Condition>
                                <Condition Property="Text" Value=""></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"></Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ColorSpectrumSlider-Metro" TargetType="{x:Type extToolkit:ColorSpectrumSlider}">
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Minimum" Value="1"/>
        <Setter Property="Maximum" Value="360"/>
        <Setter Property="TickFrequency" Value="0.001" />
        <Setter Property="IsSnapToTickEnabled" Value="True" />
        <Setter Property="IsDirectionReversed" Value="False" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="Value" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type extToolkit:ColorSpectrumSlider}">
                    <Grid>
                        <Border ClipToBounds="True" x:Name="PART_TrackBackground" BorderBrush="{StaticResource Brush-NormalText}" BorderThickness="1" Margin="0" >
                            <Rectangle x:Name="PART_SpectrumDisplay" Stretch="Fill" VerticalAlignment="Stretch" />
                        </Border>

                        <Track x:Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource RepeatButton-Metro}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource RepeatButton-Metro}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource Thumb-ColorSlider}" VerticalAlignment="Stretch" Height="Auto" Margin="0" Width="Auto" HorizontalAlignment="Stretch" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButton-ColorCanvas" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource Brush-NormalText}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Margin="{StaticResource Margin-Menu}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="#00000000" MinWidth="100" MinHeight="20">
                        <ContentPresenter />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ColorCanvas-Metro" TargetType="{x:Type extToolkit:ColorCanvas}">
        <Setter Property="Padding" Value="5,0,0,0"/>
        <Setter Property="Foreground" Value="{StaticResource Brush-NormalText}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type extToolkit:ColorCanvas}">
                    <StackPanel Background="Transparent" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">

                        <ToggleButton x:Name="Preview" Style="{StaticResource ToggleButton-ColorCanvas}">
                            <Border x:Name="Bd" Grid.ColumnSpan="3" Height="30" BorderThickness="1" BorderBrush="{StaticResource Brush-NormalText}">
                                <Grid>
                                    <Rectangle Fill="{Binding SelectedColor, Converter={StaticResource ColorToSolidColorBrushConverter}, RelativeSource={RelativeSource AncestorType={x:Type extToolkit:ColorCanvas}}}" />
                                    <TextBlock x:Name="Header" Text="{Binding Path=(nine:HeaderBehavior.Header), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ToUpperConverter}}" Margin="{TemplateBinding Padding}" FontWeight="Bold" VerticalAlignment="Center"
                                           Foreground="{Binding SelectedColor, Converter={StaticResource ColorToInvertBrushConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </ToggleButton>

                        <Grid x:Name="Canvas" Visibility="{Binding IsChecked, ElementName=Preview, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="80" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="30" />
                            </Grid.RowDefinitions>

                            <Border x:Name="PART_ColorCanvas" Margin="0,5,0,0" BorderThickness="1,1,0,1" BorderBrush="{StaticResource Brush-NormalText}">
                                <Grid ClipToBounds="True">
                                    <Rectangle x:Name="PART_ColorShadingCanvas" Fill="{Binding SelectedColor, Converter={StaticResource ColorToSolidColorBrushConverter}, ElementName=PART_SpectrumSlider}" />
                                    <Rectangle x:Name="WhiteGradient" IsHitTestVisible="False" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                <GradientStop Offset="0" Color="#ffffffff"/>
                                                <GradientStop Offset="1" Color="Transparent"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Rectangle x:Name="BlackGradient" IsHitTestVisible="False" >
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,1" EndPoint="0, 0">
                                                <GradientStop Offset="0" Color="#ff000000"/>
                                                <GradientStop Offset="1" Color="#00000000"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>

                                    <Grid x:Name="PART_ColorShadeSelector" Width="10" Height="10" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False">
                                        <Ellipse StrokeThickness="2" Stroke="#FFFFFFFF" />
                                        <Ellipse StrokeThickness="1" Stroke="#FF000000" />
                                    </Grid>
                                </Grid>
                            </Border>

                            <extToolkit:ColorSpectrumSlider x:Name="PART_SpectrumSlider" Margin="0,5,0,0" Grid.Column="1" Style="{StaticResource ColorSpectrumSlider-Metro}" />

                            <StackPanel x:Name="States" Grid.Column="2" Margin="0,5,0,0">
                                <TextBox Style="{StaticResource TextBox-Metro}" nine:HeaderBehavior.Header="R" Text="{Binding R, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Style="{StaticResource TextBox-Metro}" nine:HeaderBehavior.Header="G" Text="{Binding G, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Style="{StaticResource TextBox-Metro}" nine:HeaderBehavior.Header="B" Text="{Binding B, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Style="{StaticResource TextBox-Metro}" nine:HeaderBehavior.Header="A" Text="{Binding A, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Style="{StaticResource TextBox-Metro}" Grid.Row="1" Text="{Binding HexadecimalString, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            </StackPanel>

                            <Slider x:Name="Opacity" Grid.Row="1" Grid.ColumnSpan="3" nine:HeaderBehavior.Header="Opacity" Style="{StaticResource Slider-Metro}" Value="{Binding A, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Minimum="0" Maximum="255" />
                        </Grid>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>